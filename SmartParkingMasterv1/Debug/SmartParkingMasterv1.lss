
SmartParkingMasterv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014c  00800060  00003fea  0000407e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008001ac  008001ac  000041ca  2**0
                  ALLOC
  3 .stab         00003a98  00000000  00000000  000041cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001451  00000000  00000000  00007c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000090b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00009255  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00009447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000cbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ddb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000df70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000e266  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8c 19 	jmp	0x3318	; 0x3318 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <main>
      8a:	0c 94 f3 1f 	jmp	0x3fe6	; 0x3fe6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ea       	ldi	r26, 0xA4	; 164
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 1f 	jmp	0x3f78	; 0x3f78 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	84 ea       	ldi	r24, 0xA4	; 164
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 1f 	jmp	0x3fb0	; 0x3fb0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 1f 	jmp	0x3f88	; 0x3f88 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 ea       	ldi	r22, 0xA4	; 164
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e4 1f 	jmp	0x3fc8	; 0x3fc8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e8 1f 	jmp	0x3fd0	; 0x3fd0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c4 1f 	jmp	0x3f88	; 0x3f88 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e0 1f 	jmp	0x3fc0	; 0x3fc0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 55       	subi	r30, 0x54	; 84
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_void_Init>:
#include "DIO_Registers.h"
#include "DIO_Config.h"

/* Function to configure DIO */
void DIO_void_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	/* set port Direction */
	DIO_DDRA_u8_REG = CONCT_BIT(DIO_PORTA_PIN7_INIT_DIR,DIO_PORTA_PIN6_INIT_DIR,
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	80 83       	st	Z, r24
			                    DIO_PORTA_PIN5_INIT_DIR,DIO_PORTA_PIN4_INIT_DIR,
			                    DIO_PORTA_PIN3_INIT_DIR,DIO_PORTA_PIN2_INIT_DIR,
								DIO_PORTA_PIN1_INIT_DIR,DIO_PORTA_PIN0_INIT_DIR);

	DIO_DDRB_u8_REG = CONCT_BIT(DIO_PORTB_PIN7_INIT_DIR,DIO_PORTB_PIN6_INIT_DIR,
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	80 83       	st	Z, r24
								DIO_PORTB_PIN5_INIT_DIR,DIO_PORTB_PIN4_INIT_DIR,
								DIO_PORTB_PIN3_INIT_DIR,DIO_PORTB_PIN2_INIT_DIR,
								DIO_PORTB_PIN1_INIT_DIR,DIO_PORTB_PIN0_INIT_DIR);

	DIO_DDRC_u8_REG = CONCT_BIT(DIO_PORTC_PIN7_INIT_DIR,DIO_PORTC_PIN6_INIT_DIR,
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24
								DIO_PORTC_PIN5_INIT_DIR,DIO_PORTC_PIN4_INIT_DIR,
								DIO_PORTC_PIN3_INIT_DIR,DIO_PORTC_PIN2_INIT_DIR,
								DIO_PORTC_PIN1_INIT_DIR,DIO_PORTC_PIN0_INIT_DIR);

	DIO_DDRD_u8_REG = CONCT_BIT(DIO_PORTD_PIN7_INIT_DIR,DIO_PORTD_PIN6_INIT_DIR,
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8f ef       	ldi	r24, 0xFF	; 255
     e54:	80 83       	st	Z, r24
								DIO_PORTD_PIN5_INIT_DIR,DIO_PORTD_PIN4_INIT_DIR,
								DIO_PORTD_PIN3_INIT_DIR,DIO_PORTD_PIN2_INIT_DIR,
								DIO_PORTD_PIN1_INIT_DIR,DIO_PORTD_PIN0_INIT_DIR);

	/* set port Value */
	DIO_PORTA_u8_REG = CONCT_BIT(DIO_PORTA_PIN7_INIT_VAL,DIO_PORTA_PIN6_INIT_VAL,
     e56:	eb e3       	ldi	r30, 0x3B	; 59
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	10 82       	st	Z, r1
								 DIO_PORTA_PIN5_INIT_VAL,DIO_PORTA_PIN4_INIT_VAL,
								 DIO_PORTA_PIN3_INIT_VAL,DIO_PORTA_PIN2_INIT_VAL,
								 DIO_PORTA_PIN1_INIT_VAL,DIO_PORTA_PIN0_INIT_VAL);

	DIO_PORTB_u8_REG = CONCT_BIT(DIO_PORTB_PIN7_INIT_VAL,DIO_PORTB_PIN6_INIT_VAL,
     e5c:	e8 e3       	ldi	r30, 0x38	; 56
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	10 82       	st	Z, r1
								 DIO_PORTB_PIN5_INIT_VAL,DIO_PORTB_PIN4_INIT_VAL,
								 DIO_PORTB_PIN3_INIT_VAL,DIO_PORTB_PIN2_INIT_VAL,
								 DIO_PORTB_PIN1_INIT_VAL,DIO_PORTB_PIN0_INIT_VAL);

	DIO_PORTC_u8_REG = CONCT_BIT(DIO_PORTC_PIN7_INIT_VAL,DIO_PORTC_PIN6_INIT_VAL,
     e62:	e5 e3       	ldi	r30, 0x35	; 53
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	10 82       	st	Z, r1
								 DIO_PORTC_PIN5_INIT_VAL,DIO_PORTC_PIN4_INIT_VAL,
								 DIO_PORTC_PIN3_INIT_VAL,DIO_PORTC_PIN2_INIT_VAL,
								 DIO_PORTC_PIN1_INIT_VAL,DIO_PORTC_PIN0_INIT_VAL);

	DIO_PORTD_u8_REG = CONCT_BIT(DIO_PORTD_PIN7_INIT_VAL,DIO_PORTD_PIN6_INIT_VAL,
     e68:	e2 e3       	ldi	r30, 0x32	; 50
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	10 82       	st	Z, r1
								 DIO_PORTD_PIN5_INIT_VAL,DIO_PORTD_PIN4_INIT_VAL,
								 DIO_PORTD_PIN3_INIT_VAL,DIO_PORTD_PIN2_INIT_VAL,
								 DIO_PORTD_PIN1_INIT_VAL,DIO_PORTD_PIN0_INIT_VAL);
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <DIO_enum_SetPinDirection>:

/* Function to set the pin direction */
DIO_Errors DIO_enum_SetPinDirection(u8 Local_u8_Port, u8 Local_u8_Pin, u8 Local_u8_Direction)
{
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	28 97       	sbiw	r28, 0x08	; 8
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	6b 83       	std	Y+3, r22	; 0x03
     e8c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState = DIO_OK;
     e8e:	85 e0       	ldi	r24, 0x05	; 5
     e90:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Pin >= DIO_PIN0 && Local_u8_Pin <= DIO_PIN7)
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	88 30       	cpi	r24, 0x08	; 8
     e96:	08 f0       	brcs	.+2      	; 0xe9a <DIO_enum_SetPinDirection+0x26>
     e98:	f4 c0       	rjmp	.+488    	; 0x1082 <DIO_enum_SetPinDirection+0x20e>
	{
		if(Local_u8_Direction == DIO_PIN_INPUT)
     e9a:	8c 81       	ldd	r24, Y+4	; 0x04
     e9c:	88 23       	and	r24, r24
     e9e:	09 f0       	breq	.+2      	; 0xea2 <DIO_enum_SetPinDirection+0x2e>
     ea0:	77 c0       	rjmp	.+238    	; 0xf90 <DIO_enum_SetPinDirection+0x11c>
		{
			switch(Local_u8_Port)
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	38 87       	std	Y+8, r19	; 0x08
     eaa:	2f 83       	std	Y+7, r18	; 0x07
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	81 30       	cpi	r24, 0x01	; 1
     eb2:	91 05       	cpc	r25, r1
     eb4:	59 f1       	breq	.+86     	; 0xf0c <DIO_enum_SetPinDirection+0x98>
     eb6:	2f 81       	ldd	r18, Y+7	; 0x07
     eb8:	38 85       	ldd	r19, Y+8	; 0x08
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	2c f4       	brge	.+10     	; 0xeca <DIO_enum_SetPinDirection+0x56>
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	69 f0       	breq	.+26     	; 0xee2 <DIO_enum_SetPinDirection+0x6e>
     ec8:	60 c0       	rjmp	.+192    	; 0xf8a <DIO_enum_SetPinDirection+0x116>
     eca:	2f 81       	ldd	r18, Y+7	; 0x07
     ecc:	38 85       	ldd	r19, Y+8	; 0x08
     ece:	22 30       	cpi	r18, 0x02	; 2
     ed0:	31 05       	cpc	r19, r1
     ed2:	89 f1       	breq	.+98     	; 0xf36 <DIO_enum_SetPinDirection+0xc2>
     ed4:	8f 81       	ldd	r24, Y+7	; 0x07
     ed6:	98 85       	ldd	r25, Y+8	; 0x08
     ed8:	83 30       	cpi	r24, 0x03	; 3
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <DIO_enum_SetPinDirection+0x6c>
     ede:	40 c0       	rjmp	.+128    	; 0xf60 <DIO_enum_SetPinDirection+0xec>
     ee0:	54 c0       	rjmp	.+168    	; 0xf8a <DIO_enum_SetPinDirection+0x116>
			{
			case DIO_PORTA: CLR_BIT(DIO_DDRA_u8_REG, Local_u8_Pin); break;
     ee2:	aa e3       	ldi	r26, 0x3A	; 58
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea e3       	ldi	r30, 0x3A	; 58
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_enum_SetPinDirection+0x8c>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_enum_SetPinDirection+0x88>
     f04:	80 95       	com	r24
     f06:	84 23       	and	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	bc c0       	rjmp	.+376    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTB: CLR_BIT(DIO_DDRB_u8_REG, Local_u8_Pin); break;
     f0c:	a7 e3       	ldi	r26, 0x37	; 55
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e7 e3       	ldi	r30, 0x37	; 55
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8b 81       	ldd	r24, Y+3	; 0x03
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_enum_SetPinDirection+0xb6>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_enum_SetPinDirection+0xb2>
     f2e:	80 95       	com	r24
     f30:	84 23       	and	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	a7 c0       	rjmp	.+334    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTC: CLR_BIT(DIO_DDRC_u8_REG, Local_u8_Pin); break;
     f36:	a4 e3       	ldi	r26, 0x34	; 52
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e4 e3       	ldi	r30, 0x34	; 52
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_enum_SetPinDirection+0xe0>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_enum_SetPinDirection+0xdc>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	92 c0       	rjmp	.+292    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTD: CLR_BIT(DIO_DDRD_u8_REG, Local_u8_Pin); break;
     f60:	a1 e3       	ldi	r26, 0x31	; 49
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e3       	ldi	r30, 0x31	; 49
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_enum_SetPinDirection+0x10a>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_enum_SetPinDirection+0x106>
     f82:	80 95       	com	r24
     f84:	84 23       	and	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	7d c0       	rjmp	.+250    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			/* report error the port is incorrect  */
			default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	7a c0       	rjmp	.+244    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			}                                                        
		}                                                            
		else if(Local_u8_Direction == DIO_PIN_OUTPUT)
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	09 f0       	breq	.+2      	; 0xf98 <DIO_enum_SetPinDirection+0x124>
     f96:	72 c0       	rjmp	.+228    	; 0x107c <DIO_enum_SetPinDirection+0x208>
		{                                                            
			switch(Local_u8_Port)                                    
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3e 83       	std	Y+6, r19	; 0x06
     fa0:	2d 83       	std	Y+5, r18	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	91 05       	cpc	r25, r1
     faa:	49 f1       	breq	.+82     	; 0xffe <DIO_enum_SetPinDirection+0x18a>
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	2c f4       	brge	.+10     	; 0xfc0 <DIO_enum_SetPinDirection+0x14c>
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	61 f0       	breq	.+24     	; 0xfd6 <DIO_enum_SetPinDirection+0x162>
     fbe:	5b c0       	rjmp	.+182    	; 0x1076 <DIO_enum_SetPinDirection+0x202>
     fc0:	2d 81       	ldd	r18, Y+5	; 0x05
     fc2:	3e 81       	ldd	r19, Y+6	; 0x06
     fc4:	22 30       	cpi	r18, 0x02	; 2
     fc6:	31 05       	cpc	r19, r1
     fc8:	71 f1       	breq	.+92     	; 0x1026 <DIO_enum_SetPinDirection+0x1b2>
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	91 05       	cpc	r25, r1
     fd2:	e9 f1       	breq	.+122    	; 0x104e <DIO_enum_SetPinDirection+0x1da>
     fd4:	50 c0       	rjmp	.+160    	; 0x1076 <DIO_enum_SetPinDirection+0x202>
			{                                                        
			case DIO_PORTA: SET_BIT(DIO_DDRA_u8_REG, Local_u8_Pin); break;
     fd6:	aa e3       	ldi	r26, 0x3A	; 58
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	ea e3       	ldi	r30, 0x3A	; 58
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_enum_SetPinDirection+0x180>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_enum_SetPinDirection+0x17c>
     ff8:	84 2b       	or	r24, r20
     ffa:	8c 93       	st	X, r24
     ffc:	43 c0       	rjmp	.+134    	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTB: SET_BIT(DIO_DDRB_u8_REG, Local_u8_Pin); break;
     ffe:	a7 e3       	ldi	r26, 0x37	; 55
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e7 e3       	ldi	r30, 0x37	; 55
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	02 2e       	mov	r0, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <DIO_enum_SetPinDirection+0x1a8>
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	0a 94       	dec	r0
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <DIO_enum_SetPinDirection+0x1a4>
    1020:	84 2b       	or	r24, r20
    1022:	8c 93       	st	X, r24
    1024:	2f c0       	rjmp	.+94     	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTC: SET_BIT(DIO_DDRC_u8_REG, Local_u8_Pin); break;
    1026:	a4 e3       	ldi	r26, 0x34	; 52
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e4 e3       	ldi	r30, 0x34	; 52
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_enum_SetPinDirection+0x1d0>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_enum_SetPinDirection+0x1cc>
    1048:	84 2b       	or	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	1b c0       	rjmp	.+54     	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			case DIO_PORTD: SET_BIT(DIO_DDRD_u8_REG, Local_u8_Pin); break;
    104e:	a1 e3       	ldi	r26, 0x31	; 49
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e1 e3       	ldi	r30, 0x31	; 49
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_enum_SetPinDirection+0x1f8>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_enum_SetPinDirection+0x1f4>
    1070:	84 2b       	or	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			/* report error the port is incorrect  */
			default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	04 c0       	rjmp	.+8      	; 0x1084 <DIO_enum_SetPinDirection+0x210>
			}
		}
		else
		{
			/* report error the Direction is incorrect  */
			Local_u8_ErrorState = DIO_DIR_TYPE_INCORRECT;
    107c:	82 e0       	ldi	r24, 0x02	; 2
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <DIO_enum_SetPinDirection+0x210>

	}
	else
	{
		/* report error the pin number is incorrect */
		Local_u8_ErrorState = DIO_PIN_NUM_INCORRECT;
    1082:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
}
    1086:	28 96       	adiw	r28, 0x08	; 8
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <DIO_enum_SetPinValue>:

/* Function to set the pin value */
DIO_Errors DIO_enum_SetPinValue(u8 Local_u8_Port, u8 Local_u8_Pin, u8 Local_u8_Value)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	28 97       	sbiw	r28, 0x08	; 8
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	6b 83       	std	Y+3, r22	; 0x03
    10b0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState = DIO_OK;
    10b2:	85 e0       	ldi	r24, 0x05	; 5
    10b4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Pin >= DIO_PIN0 && Local_u8_Pin <=DIO_PIN7)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	08 f0       	brcs	.+2      	; 0x10be <DIO_enum_SetPinValue+0x26>
    10bc:	f4 c0       	rjmp	.+488    	; 0x12a6 <DIO_enum_SetPinValue+0x20e>
	{
		if(Local_u8_Value == DIO_PIN_LOW)
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	88 23       	and	r24, r24
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <DIO_enum_SetPinValue+0x2e>
    10c4:	77 c0       	rjmp	.+238    	; 0x11b4 <DIO_enum_SetPinValue+0x11c>
		{
			switch(Local_u8_Port)
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	38 87       	std	Y+8, r19	; 0x08
    10ce:	2f 83       	std	Y+7, r18	; 0x07
    10d0:	8f 81       	ldd	r24, Y+7	; 0x07
    10d2:	98 85       	ldd	r25, Y+8	; 0x08
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	59 f1       	breq	.+86     	; 0x1130 <DIO_enum_SetPinValue+0x98>
    10da:	2f 81       	ldd	r18, Y+7	; 0x07
    10dc:	38 85       	ldd	r19, Y+8	; 0x08
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <DIO_enum_SetPinValue+0x56>
    10e4:	8f 81       	ldd	r24, Y+7	; 0x07
    10e6:	98 85       	ldd	r25, Y+8	; 0x08
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	69 f0       	breq	.+26     	; 0x1106 <DIO_enum_SetPinValue+0x6e>
    10ec:	60 c0       	rjmp	.+192    	; 0x11ae <DIO_enum_SetPinValue+0x116>
    10ee:	2f 81       	ldd	r18, Y+7	; 0x07
    10f0:	38 85       	ldd	r19, Y+8	; 0x08
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	89 f1       	breq	.+98     	; 0x115a <DIO_enum_SetPinValue+0xc2>
    10f8:	8f 81       	ldd	r24, Y+7	; 0x07
    10fa:	98 85       	ldd	r25, Y+8	; 0x08
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <DIO_enum_SetPinValue+0x6c>
    1102:	40 c0       	rjmp	.+128    	; 0x1184 <DIO_enum_SetPinValue+0xec>
    1104:	54 c0       	rjmp	.+168    	; 0x11ae <DIO_enum_SetPinValue+0x116>
			{
			case DIO_PORTA: CLR_BIT(DIO_PORTA_u8_REG, Local_u8_Pin); break;
    1106:	ab e3       	ldi	r26, 0x3B	; 59
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	eb e3       	ldi	r30, 0x3B	; 59
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	48 2f       	mov	r20, r24
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 2e       	mov	r0, r18
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <DIO_enum_SetPinValue+0x8c>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <DIO_enum_SetPinValue+0x88>
    1128:	80 95       	com	r24
    112a:	84 23       	and	r24, r20
    112c:	8c 93       	st	X, r24
    112e:	bc c0       	rjmp	.+376    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTB: CLR_BIT(DIO_PORTB_u8_REG, Local_u8_Pin); break;
    1130:	a8 e3       	ldi	r26, 0x38	; 56
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e8 e3       	ldi	r30, 0x38	; 56
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	48 2f       	mov	r20, r24
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	02 2e       	mov	r0, r18
    1148:	02 c0       	rjmp	.+4      	; 0x114e <DIO_enum_SetPinValue+0xb6>
    114a:	88 0f       	add	r24, r24
    114c:	99 1f       	adc	r25, r25
    114e:	0a 94       	dec	r0
    1150:	e2 f7       	brpl	.-8      	; 0x114a <DIO_enum_SetPinValue+0xb2>
    1152:	80 95       	com	r24
    1154:	84 23       	and	r24, r20
    1156:	8c 93       	st	X, r24
    1158:	a7 c0       	rjmp	.+334    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTC: CLR_BIT(DIO_PORTC_u8_REG, Local_u8_Pin); break;
    115a:	a5 e3       	ldi	r26, 0x35	; 53
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e5 e3       	ldi	r30, 0x35	; 53
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	48 2f       	mov	r20, r24
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	02 2e       	mov	r0, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_enum_SetPinValue+0xe0>
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	0a 94       	dec	r0
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_enum_SetPinValue+0xdc>
    117c:	80 95       	com	r24
    117e:	84 23       	and	r24, r20
    1180:	8c 93       	st	X, r24
    1182:	92 c0       	rjmp	.+292    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTD: CLR_BIT(DIO_PORTD_u8_REG, Local_u8_Pin); break;
    1184:	a2 e3       	ldi	r26, 0x32	; 50
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e2 e3       	ldi	r30, 0x32	; 50
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	48 2f       	mov	r20, r24
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	02 2e       	mov	r0, r18
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <DIO_enum_SetPinValue+0x10a>
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	0a 94       	dec	r0
    11a4:	e2 f7       	brpl	.-8      	; 0x119e <DIO_enum_SetPinValue+0x106>
    11a6:	80 95       	com	r24
    11a8:	84 23       	and	r24, r20
    11aa:	8c 93       	st	X, r24
    11ac:	7d c0       	rjmp	.+250    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			/* report error the port is incorrect */
			default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	7a c0       	rjmp	.+244    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			}
		}
		else if (Local_u8_Value == DIO_PIN_HIGH)
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	09 f0       	breq	.+2      	; 0x11bc <DIO_enum_SetPinValue+0x124>
    11ba:	72 c0       	rjmp	.+228    	; 0x12a0 <DIO_enum_SetPinValue+0x208>
		{
			switch(Local_u8_Port)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	3e 83       	std	Y+6, r19	; 0x06
    11c4:	2d 83       	std	Y+5, r18	; 0x05
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
    11c8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	91 05       	cpc	r25, r1
    11ce:	49 f1       	breq	.+82     	; 0x1222 <DIO_enum_SetPinValue+0x18a>
    11d0:	2d 81       	ldd	r18, Y+5	; 0x05
    11d2:	3e 81       	ldd	r19, Y+6	; 0x06
    11d4:	22 30       	cpi	r18, 0x02	; 2
    11d6:	31 05       	cpc	r19, r1
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <DIO_enum_SetPinValue+0x14c>
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	61 f0       	breq	.+24     	; 0x11fa <DIO_enum_SetPinValue+0x162>
    11e2:	5b c0       	rjmp	.+182    	; 0x129a <DIO_enum_SetPinValue+0x202>
    11e4:	2d 81       	ldd	r18, Y+5	; 0x05
    11e6:	3e 81       	ldd	r19, Y+6	; 0x06
    11e8:	22 30       	cpi	r18, 0x02	; 2
    11ea:	31 05       	cpc	r19, r1
    11ec:	71 f1       	breq	.+92     	; 0x124a <DIO_enum_SetPinValue+0x1b2>
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	83 30       	cpi	r24, 0x03	; 3
    11f4:	91 05       	cpc	r25, r1
    11f6:	e9 f1       	breq	.+122    	; 0x1272 <DIO_enum_SetPinValue+0x1da>
    11f8:	50 c0       	rjmp	.+160    	; 0x129a <DIO_enum_SetPinValue+0x202>
			{
			case DIO_PORTA: SET_BIT(DIO_PORTA_u8_REG, Local_u8_Pin); break;
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_enum_SetPinValue+0x180>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_enum_SetPinValue+0x17c>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	43 c0       	rjmp	.+134    	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTB: SET_BIT(DIO_PORTB_u8_REG, Local_u8_Pin); break;
    1222:	a8 e3       	ldi	r26, 0x38	; 56
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e8 e3       	ldi	r30, 0x38	; 56
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_enum_SetPinValue+0x1a8>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_enum_SetPinValue+0x1a4>
    1244:	84 2b       	or	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	2f c0       	rjmp	.+94     	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTC: SET_BIT(DIO_PORTC_u8_REG, Local_u8_Pin); break;
    124a:	a5 e3       	ldi	r26, 0x35	; 53
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e5 e3       	ldi	r30, 0x35	; 53
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_enum_SetPinValue+0x1d0>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_enum_SetPinValue+0x1cc>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	1b c0       	rjmp	.+54     	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			case DIO_PORTD: SET_BIT(DIO_PORTD_u8_REG, Local_u8_Pin); break;
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_enum_SetPinValue+0x1f8>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_enum_SetPinValue+0x1f4>
    1294:	84 2b       	or	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			/* report error the port is incorrect */
			default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_enum_SetPinValue+0x210>
			}
		}
		else
		{
			/* report error the Value is incorrect  */
			Local_u8_ErrorState = DIO_VAL_TYPE_INCORRECT;
    12a0:	83 e0       	ldi	r24, 0x03	; 3
    12a2:	89 83       	std	Y+1, r24	; 0x01
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <DIO_enum_SetPinValue+0x210>
		}
	}
	else
	{
		/* report error the pin number is incorrect */
		Local_u8_ErrorState = DIO_PIN_NUM_INCORRECT;
    12a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    12aa:	28 96       	adiw	r28, 0x08	; 8
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <DIO_enum_GetPinValue>:

/* Function to get pin value  */
DIO_Errors DIO_enum_GetPinValue(u8 Local_u8_Port, u8 Local_u8_Pin, u8 * Local_u8Ptr_PinValue)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	27 97       	sbiw	r28, 0x07	; 7
    12c6:	0f b6       	in	r0, 0x3f	; 63
    12c8:	f8 94       	cli
    12ca:	de bf       	out	0x3e, r29	; 62
    12cc:	0f be       	out	0x3f, r0	; 63
    12ce:	cd bf       	out	0x3d, r28	; 61
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
    12d4:	5d 83       	std	Y+5, r21	; 0x05
    12d6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState = DIO_OK;
    12d8:	85 e0       	ldi	r24, 0x05	; 5
    12da:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Pin >= DIO_PIN0 && Local_u8_Pin <= DIO_PIN7)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 30       	cpi	r24, 0x08	; 8
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <DIO_enum_GetPinValue+0x28>
    12e2:	74 c0       	rjmp	.+232    	; 0x13cc <DIO_enum_GetPinValue+0x110>
	{
		switch(Local_u8_Port)
    12e4:	8a 81       	ldd	r24, Y+2	; 0x02
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3f 83       	std	Y+7, r19	; 0x07
    12ec:	2e 83       	std	Y+6, r18	; 0x06
    12ee:	4e 81       	ldd	r20, Y+6	; 0x06
    12f0:	5f 81       	ldd	r21, Y+7	; 0x07
    12f2:	41 30       	cpi	r20, 0x01	; 1
    12f4:	51 05       	cpc	r21, r1
    12f6:	59 f1       	breq	.+86     	; 0x134e <DIO_enum_GetPinValue+0x92>
    12f8:	8e 81       	ldd	r24, Y+6	; 0x06
    12fa:	9f 81       	ldd	r25, Y+7	; 0x07
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	91 05       	cpc	r25, r1
    1300:	34 f4       	brge	.+12     	; 0x130e <DIO_enum_GetPinValue+0x52>
    1302:	2e 81       	ldd	r18, Y+6	; 0x06
    1304:	3f 81       	ldd	r19, Y+7	; 0x07
    1306:	21 15       	cp	r18, r1
    1308:	31 05       	cpc	r19, r1
    130a:	69 f0       	breq	.+26     	; 0x1326 <DIO_enum_GetPinValue+0x6a>
    130c:	5c c0       	rjmp	.+184    	; 0x13c6 <DIO_enum_GetPinValue+0x10a>
    130e:	4e 81       	ldd	r20, Y+6	; 0x06
    1310:	5f 81       	ldd	r21, Y+7	; 0x07
    1312:	42 30       	cpi	r20, 0x02	; 2
    1314:	51 05       	cpc	r21, r1
    1316:	79 f1       	breq	.+94     	; 0x1376 <DIO_enum_GetPinValue+0xba>
    1318:	8e 81       	ldd	r24, Y+6	; 0x06
    131a:	9f 81       	ldd	r25, Y+7	; 0x07
    131c:	83 30       	cpi	r24, 0x03	; 3
    131e:	91 05       	cpc	r25, r1
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_enum_GetPinValue+0x68>
    1322:	3d c0       	rjmp	.+122    	; 0x139e <DIO_enum_GetPinValue+0xe2>
    1324:	50 c0       	rjmp	.+160    	; 0x13c6 <DIO_enum_GetPinValue+0x10a>
		{
		case DIO_PORTA: *Local_u8Ptr_PinValue = GET_BIT(DIO_PINA_u8_REG, Local_u8_Pin); break;
    1326:	e9 e3       	ldi	r30, 0x39	; 57
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 2f       	mov	r24, r24
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	a9 01       	movw	r20, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_enum_GetPinValue+0x82>
    133a:	55 95       	asr	r21
    133c:	47 95       	ror	r20
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_enum_GetPinValue+0x7e>
    1342:	ca 01       	movw	r24, r20
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	ec 81       	ldd	r30, Y+4	; 0x04
    1348:	fd 81       	ldd	r31, Y+5	; 0x05
    134a:	80 83       	st	Z, r24
    134c:	40 c0       	rjmp	.+128    	; 0x13ce <DIO_enum_GetPinValue+0x112>
		case DIO_PORTB: *Local_u8Ptr_PinValue = GET_BIT(DIO_PINB_u8_REG, Local_u8_Pin); break;
    134e:	e6 e3       	ldi	r30, 0x36	; 54
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	88 2f       	mov	r24, r24
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	a9 01       	movw	r20, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_enum_GetPinValue+0xaa>
    1362:	55 95       	asr	r21
    1364:	47 95       	ror	r20
    1366:	8a 95       	dec	r24
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_enum_GetPinValue+0xa6>
    136a:	ca 01       	movw	r24, r20
    136c:	81 70       	andi	r24, 0x01	; 1
    136e:	ec 81       	ldd	r30, Y+4	; 0x04
    1370:	fd 81       	ldd	r31, Y+5	; 0x05
    1372:	80 83       	st	Z, r24
    1374:	2c c0       	rjmp	.+88     	; 0x13ce <DIO_enum_GetPinValue+0x112>
		case DIO_PORTC: *Local_u8Ptr_PinValue = GET_BIT(DIO_PINC_u8_REG, Local_u8_Pin); break;
    1376:	e3 e3       	ldi	r30, 0x33	; 51
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_enum_GetPinValue+0xd2>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_enum_GetPinValue+0xce>
    1392:	ca 01       	movw	r24, r20
    1394:	81 70       	andi	r24, 0x01	; 1
    1396:	ec 81       	ldd	r30, Y+4	; 0x04
    1398:	fd 81       	ldd	r31, Y+5	; 0x05
    139a:	80 83       	st	Z, r24
    139c:	18 c0       	rjmp	.+48     	; 0x13ce <DIO_enum_GetPinValue+0x112>
		case DIO_PORTD: *Local_u8Ptr_PinValue = GET_BIT(DIO_PIND_u8_REG, Local_u8_Pin); break;
    139e:	e0 e3       	ldi	r30, 0x30	; 48
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	88 2f       	mov	r24, r24
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a9 01       	movw	r20, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_enum_GetPinValue+0xfa>
    13b2:	55 95       	asr	r21
    13b4:	47 95       	ror	r20
    13b6:	8a 95       	dec	r24
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_enum_GetPinValue+0xf6>
    13ba:	ca 01       	movw	r24, r20
    13bc:	81 70       	andi	r24, 0x01	; 1
    13be:	ec 81       	ldd	r30, Y+4	; 0x04
    13c0:	fd 81       	ldd	r31, Y+5	; 0x05
    13c2:	80 83       	st	Z, r24
    13c4:	04 c0       	rjmp	.+8      	; 0x13ce <DIO_enum_GetPinValue+0x112>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <DIO_enum_GetPinValue+0x112>
		}
	}
	else
	{
		/* report error the pin number is incorrect */
		Local_u8_ErrorState = DIO_PIN_NUM_INCORRECT;
    13cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d0:	27 96       	adiw	r28, 0x07	; 7
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <DIO_enum_TogglePin>:

/* Function to toggle the pin value  */
DIO_Errors DIO_enum_TogglePin(u8 Local_u8_Port, u8 Local_u8_Pin)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <DIO_enum_TogglePin+0x6>
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <DIO_enum_TogglePin+0x8>
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = DIO_OK;
    13f4:	85 e0       	ldi	r24, 0x05	; 5
    13f6:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8_Pin >= DIO_PIN0 && Local_u8_Pin <= DIO_PIN7)
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	08 f0       	brcs	.+2      	; 0x1400 <DIO_enum_TogglePin+0x1e>
    13fe:	72 c0       	rjmp	.+228    	; 0x14e4 <DIO_enum_TogglePin+0x102>
	{
		switch(Local_u8_Port)
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	3d 83       	std	Y+5, r19	; 0x05
    1408:	2c 83       	std	Y+4, r18	; 0x04
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	91 05       	cpc	r25, r1
    1412:	49 f1       	breq	.+82     	; 0x1466 <DIO_enum_TogglePin+0x84>
    1414:	2c 81       	ldd	r18, Y+4	; 0x04
    1416:	3d 81       	ldd	r19, Y+5	; 0x05
    1418:	22 30       	cpi	r18, 0x02	; 2
    141a:	31 05       	cpc	r19, r1
    141c:	2c f4       	brge	.+10     	; 0x1428 <DIO_enum_TogglePin+0x46>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	9d 81       	ldd	r25, Y+5	; 0x05
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	61 f0       	breq	.+24     	; 0x143e <DIO_enum_TogglePin+0x5c>
    1426:	5b c0       	rjmp	.+182    	; 0x14de <DIO_enum_TogglePin+0xfc>
    1428:	2c 81       	ldd	r18, Y+4	; 0x04
    142a:	3d 81       	ldd	r19, Y+5	; 0x05
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	71 f1       	breq	.+92     	; 0x148e <DIO_enum_TogglePin+0xac>
    1432:	8c 81       	ldd	r24, Y+4	; 0x04
    1434:	9d 81       	ldd	r25, Y+5	; 0x05
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	91 05       	cpc	r25, r1
    143a:	e9 f1       	breq	.+122    	; 0x14b6 <DIO_enum_TogglePin+0xd4>
    143c:	50 c0       	rjmp	.+160    	; 0x14de <DIO_enum_TogglePin+0xfc>
		{
		case DIO_PORTA: TOG_BIT(DIO_PORTA_u8_REG, Local_u8_Pin); break;
    143e:	ab e3       	ldi	r26, 0x3B	; 59
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	eb e3       	ldi	r30, 0x3B	; 59
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8b 81       	ldd	r24, Y+3	; 0x03
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <DIO_enum_TogglePin+0x7a>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <DIO_enum_TogglePin+0x76>
    1460:	84 27       	eor	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	40 c0       	rjmp	.+128    	; 0x14e6 <DIO_enum_TogglePin+0x104>
		case DIO_PORTB: TOG_BIT(DIO_PORTB_u8_REG, Local_u8_Pin); break;
    1466:	a8 e3       	ldi	r26, 0x38	; 56
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e8 e3       	ldi	r30, 0x38	; 56
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 2e       	mov	r0, r18
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <DIO_enum_TogglePin+0xa2>
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	0a 94       	dec	r0
    1486:	e2 f7       	brpl	.-8      	; 0x1480 <DIO_enum_TogglePin+0x9e>
    1488:	84 27       	eor	r24, r20
    148a:	8c 93       	st	X, r24
    148c:	2c c0       	rjmp	.+88     	; 0x14e6 <DIO_enum_TogglePin+0x104>
		case DIO_PORTC: TOG_BIT(DIO_PORTC_u8_REG, Local_u8_Pin); break;
    148e:	a5 e3       	ldi	r26, 0x35	; 53
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e5 e3       	ldi	r30, 0x35	; 53
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	28 2f       	mov	r18, r24
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	02 2e       	mov	r0, r18
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_enum_TogglePin+0xca>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	0a 94       	dec	r0
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_enum_TogglePin+0xc6>
    14b0:	84 27       	eor	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	18 c0       	rjmp	.+48     	; 0x14e6 <DIO_enum_TogglePin+0x104>
		case DIO_PORTD: TOG_BIT(DIO_PORTD_u8_REG, Local_u8_Pin); break;
    14b6:	a2 e3       	ldi	r26, 0x32	; 50
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e2 e3       	ldi	r30, 0x32	; 50
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_enum_TogglePin+0xf2>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_enum_TogglePin+0xee>
    14d8:	84 27       	eor	r24, r20
    14da:	8c 93       	st	X, r24
    14dc:	04 c0       	rjmp	.+8      	; 0x14e6 <DIO_enum_TogglePin+0x104>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	89 83       	std	Y+1, r24	; 0x01
    14e2:	01 c0       	rjmp	.+2      	; 0x14e6 <DIO_enum_TogglePin+0x104>
		}
	}
	else
	{
		/* report error the pin number is incorrect */
		Local_u8_ErrorState = DIO_PIN_NUM_INCORRECT;
    14e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <DIO_enum_SetPortDirection>:

/* function to set the port Direction */
DIO_Errors DIO_enum_SetPortDirection(u8 Local_u8_Port, u8 Local_u8_Direction)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <DIO_enum_SetPortDirection+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <DIO_enum_SetPortDirection+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = DIO_OK;
    150a:	85 e0       	ldi	r24, 0x05	; 5
    150c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Port)
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	3d 83       	std	Y+5, r19	; 0x05
    1516:	2c 83       	std	Y+4, r18	; 0x04
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	9d 81       	ldd	r25, Y+5	; 0x05
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	91 05       	cpc	r25, r1
    1520:	d1 f0       	breq	.+52     	; 0x1556 <DIO_enum_SetPortDirection+0x5e>
    1522:	2c 81       	ldd	r18, Y+4	; 0x04
    1524:	3d 81       	ldd	r19, Y+5	; 0x05
    1526:	22 30       	cpi	r18, 0x02	; 2
    1528:	31 05       	cpc	r19, r1
    152a:	2c f4       	brge	.+10     	; 0x1536 <DIO_enum_SetPortDirection+0x3e>
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	9d 81       	ldd	r25, Y+5	; 0x05
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	61 f0       	breq	.+24     	; 0x154c <DIO_enum_SetPortDirection+0x54>
    1534:	1f c0       	rjmp	.+62     	; 0x1574 <DIO_enum_SetPortDirection+0x7c>
    1536:	2c 81       	ldd	r18, Y+4	; 0x04
    1538:	3d 81       	ldd	r19, Y+5	; 0x05
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	81 f0       	breq	.+32     	; 0x1560 <DIO_enum_SetPortDirection+0x68>
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	9d 81       	ldd	r25, Y+5	; 0x05
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	81 f0       	breq	.+32     	; 0x156a <DIO_enum_SetPortDirection+0x72>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <DIO_enum_SetPortDirection+0x7c>
	{
		case DIO_PORTA: DIO_DDRA_u8_REG = Local_u8_Direction; break;
    154c:	ea e3       	ldi	r30, 0x3A	; 58
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 83       	st	Z, r24
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <DIO_enum_SetPortDirection+0x80>
		case DIO_PORTB: DIO_DDRB_u8_REG = Local_u8_Direction; break;
    1556:	e7 e3       	ldi	r30, 0x37	; 55
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	80 83       	st	Z, r24
    155e:	0c c0       	rjmp	.+24     	; 0x1578 <DIO_enum_SetPortDirection+0x80>
		case DIO_PORTC: DIO_DDRC_u8_REG = Local_u8_Direction; break;
    1560:	e4 e3       	ldi	r30, 0x34	; 52
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	80 83       	st	Z, r24
    1568:	07 c0       	rjmp	.+14     	; 0x1578 <DIO_enum_SetPortDirection+0x80>
		case DIO_PORTD: DIO_DDRD_u8_REG = Local_u8_Direction; break;
    156a:	e1 e3       	ldi	r30, 0x31	; 49
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	80 83       	st	Z, r24
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_enum_SetPortDirection+0x80>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <DIO_enum_SetPortValue>:

/* Function to set the port value */
DIO_Errors DIO_enum_SetPortValue(u8 Local_u8_Port, u8 Local_u8_Value)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	00 d0       	rcall	.+0      	; 0x1590 <DIO_enum_SetPortValue+0x6>
    1590:	00 d0       	rcall	.+0      	; 0x1592 <DIO_enum_SetPortValue+0x8>
    1592:	0f 92       	push	r0
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	8a 83       	std	Y+2, r24	; 0x02
    159a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = DIO_OK;
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Port)
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	3d 83       	std	Y+5, r19	; 0x05
    15a8:	2c 83       	std	Y+4, r18	; 0x04
    15aa:	8c 81       	ldd	r24, Y+4	; 0x04
    15ac:	9d 81       	ldd	r25, Y+5	; 0x05
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	91 05       	cpc	r25, r1
    15b2:	d1 f0       	breq	.+52     	; 0x15e8 <DIO_enum_SetPortValue+0x5e>
    15b4:	2c 81       	ldd	r18, Y+4	; 0x04
    15b6:	3d 81       	ldd	r19, Y+5	; 0x05
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	31 05       	cpc	r19, r1
    15bc:	2c f4       	brge	.+10     	; 0x15c8 <DIO_enum_SetPortValue+0x3e>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	00 97       	sbiw	r24, 0x00	; 0
    15c4:	61 f0       	breq	.+24     	; 0x15de <DIO_enum_SetPortValue+0x54>
    15c6:	1f c0       	rjmp	.+62     	; 0x1606 <DIO_enum_SetPortValue+0x7c>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <DIO_enum_SetPortValue+0x68>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	81 f0       	breq	.+32     	; 0x15fc <DIO_enum_SetPortValue+0x72>
    15dc:	14 c0       	rjmp	.+40     	; 0x1606 <DIO_enum_SetPortValue+0x7c>
	{
		case DIO_PORTA: DIO_PORTA_u8_REG = Local_u8_Value; break;
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	80 83       	st	Z, r24
    15e6:	11 c0       	rjmp	.+34     	; 0x160a <DIO_enum_SetPortValue+0x80>
		case DIO_PORTB: DIO_PORTB_u8_REG = Local_u8_Value; break;
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	80 83       	st	Z, r24
    15f0:	0c c0       	rjmp	.+24     	; 0x160a <DIO_enum_SetPortValue+0x80>
		case DIO_PORTC: DIO_PORTC_u8_REG = Local_u8_Value; break;
    15f2:	e5 e3       	ldi	r30, 0x35	; 53
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	80 83       	st	Z, r24
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <DIO_enum_SetPortValue+0x80>
		case DIO_PORTD: DIO_PORTD_u8_REG = Local_u8_Value; break;
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	80 83       	st	Z, r24
    1604:	02 c0       	rjmp	.+4      	; 0x160a <DIO_enum_SetPortValue+0x80>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    160a:	89 81       	ldd	r24, Y+1	; 0x01
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <DIO_enum_TogglePort>:

/* Function to toggle the port value */
DIO_Errors DIO_enum_TogglePort(u8 Local_u8_Port)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	00 d0       	rcall	.+0      	; 0x1622 <DIO_enum_TogglePort+0x6>
    1622:	00 d0       	rcall	.+0      	; 0x1624 <DIO_enum_TogglePort+0x8>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = DIO_OK;
    162a:	85 e0       	ldi	r24, 0x05	; 5
    162c:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Port)
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	3c 83       	std	Y+4, r19	; 0x04
    1636:	2b 83       	std	Y+3, r18	; 0x03
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	81 30       	cpi	r24, 0x01	; 1
    163e:	91 05       	cpc	r25, r1
    1640:	e9 f0       	breq	.+58     	; 0x167c <DIO_enum_TogglePort+0x60>
    1642:	2b 81       	ldd	r18, Y+3	; 0x03
    1644:	3c 81       	ldd	r19, Y+4	; 0x04
    1646:	22 30       	cpi	r18, 0x02	; 2
    1648:	31 05       	cpc	r19, r1
    164a:	2c f4       	brge	.+10     	; 0x1656 <DIO_enum_TogglePort+0x3a>
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	9c 81       	ldd	r25, Y+4	; 0x04
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	61 f0       	breq	.+24     	; 0x166c <DIO_enum_TogglePort+0x50>
    1654:	2b c0       	rjmp	.+86     	; 0x16ac <DIO_enum_TogglePort+0x90>
    1656:	2b 81       	ldd	r18, Y+3	; 0x03
    1658:	3c 81       	ldd	r19, Y+4	; 0x04
    165a:	22 30       	cpi	r18, 0x02	; 2
    165c:	31 05       	cpc	r19, r1
    165e:	b1 f0       	breq	.+44     	; 0x168c <DIO_enum_TogglePort+0x70>
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	83 30       	cpi	r24, 0x03	; 3
    1666:	91 05       	cpc	r25, r1
    1668:	c9 f0       	breq	.+50     	; 0x169c <DIO_enum_TogglePort+0x80>
    166a:	20 c0       	rjmp	.+64     	; 0x16ac <DIO_enum_TogglePort+0x90>
	{
		case DIO_PORTA: TOG_REG(DIO_PORTA_u8_REG); break;
    166c:	ab e3       	ldi	r26, 0x3B	; 59
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	eb e3       	ldi	r30, 0x3B	; 59
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	80 95       	com	r24
    1678:	8c 93       	st	X, r24
    167a:	1a c0       	rjmp	.+52     	; 0x16b0 <DIO_enum_TogglePort+0x94>
		case DIO_PORTB: TOG_REG(DIO_PORTB_u8_REG); break;
    167c:	a8 e3       	ldi	r26, 0x38	; 56
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	80 95       	com	r24
    1688:	8c 93       	st	X, r24
    168a:	12 c0       	rjmp	.+36     	; 0x16b0 <DIO_enum_TogglePort+0x94>
		case DIO_PORTC: TOG_REG(DIO_PORTC_u8_REG); break;
    168c:	a5 e3       	ldi	r26, 0x35	; 53
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	80 95       	com	r24
    1698:	8c 93       	st	X, r24
    169a:	0a c0       	rjmp	.+20     	; 0x16b0 <DIO_enum_TogglePort+0x94>
		case DIO_PORTD: TOG_REG(DIO_PORTD_u8_REG); break;
    169c:	a2 e3       	ldi	r26, 0x32	; 50
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e2 e3       	ldi	r30, 0x32	; 50
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	80 95       	com	r24
    16a8:	8c 93       	st	X, r24
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_enum_TogglePort+0x94>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	cf 91       	pop	r28
    16bc:	df 91       	pop	r29
    16be:	08 95       	ret

000016c0 <DIO_enum_GetPortValue>:

/* Function to get the port value */
DIO_Errors DIO_enum_GetPortValue(u8 Local_u8_Port,u8 * Local_u8Ptr_PortValue)
{
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <DIO_enum_GetPortValue+0x6>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_enum_GetPortValue+0x8>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_enum_GetPortValue+0xa>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	8a 83       	std	Y+2, r24	; 0x02
    16d0:	7c 83       	std	Y+4, r23	; 0x04
    16d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_ErrorState = DIO_OK;
    16d4:	85 e0       	ldi	r24, 0x05	; 5
    16d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_u8_Port)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3e 83       	std	Y+6, r19	; 0x06
    16e0:	2d 83       	std	Y+5, r18	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	e1 f0       	breq	.+56     	; 0x1724 <DIO_enum_GetPortValue+0x64>
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_enum_GetPortValue+0x40>
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_enum_GetPortValue+0x56>
    16fe:	27 c0       	rjmp	.+78     	; 0x174e <DIO_enum_GetPortValue+0x8e>
    1700:	2d 81       	ldd	r18, Y+5	; 0x05
    1702:	3e 81       	ldd	r19, Y+6	; 0x06
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	a1 f0       	breq	.+40     	; 0x1732 <DIO_enum_GetPortValue+0x72>
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	b1 f0       	breq	.+44     	; 0x1740 <DIO_enum_GetPortValue+0x80>
    1714:	1c c0       	rjmp	.+56     	; 0x174e <DIO_enum_GetPortValue+0x8e>
	{
		case DIO_PORTA: *Local_u8Ptr_PortValue = DIO_PINA_u8_REG; break;
    1716:	e9 e3       	ldi	r30, 0x39	; 57
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	eb 81       	ldd	r30, Y+3	; 0x03
    171e:	fc 81       	ldd	r31, Y+4	; 0x04
    1720:	80 83       	st	Z, r24
    1722:	17 c0       	rjmp	.+46     	; 0x1752 <DIO_enum_GetPortValue+0x92>
		case DIO_PORTB: *Local_u8Ptr_PortValue = DIO_PINB_u8_REG; break;
    1724:	e6 e3       	ldi	r30, 0x36	; 54
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	eb 81       	ldd	r30, Y+3	; 0x03
    172c:	fc 81       	ldd	r31, Y+4	; 0x04
    172e:	80 83       	st	Z, r24
    1730:	10 c0       	rjmp	.+32     	; 0x1752 <DIO_enum_GetPortValue+0x92>
		case DIO_PORTC: *Local_u8Ptr_PortValue = DIO_PINC_u8_REG; break;
    1732:	e3 e3       	ldi	r30, 0x33	; 51
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	eb 81       	ldd	r30, Y+3	; 0x03
    173a:	fc 81       	ldd	r31, Y+4	; 0x04
    173c:	80 83       	st	Z, r24
    173e:	09 c0       	rjmp	.+18     	; 0x1752 <DIO_enum_GetPortValue+0x92>
		case DIO_PORTD: *Local_u8Ptr_PortValue = DIO_PIND_u8_REG; break;
    1740:	e0 e3       	ldi	r30, 0x30	; 48
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	eb 81       	ldd	r30, Y+3	; 0x03
    1748:	fc 81       	ldd	r31, Y+4	; 0x04
    174a:	80 83       	st	Z, r24
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_enum_GetPortValue+0x92>
		/* report error the port is incorrect */
		default: Local_u8_ErrorState = DIO_PORT_NUM_INCORRECT; break;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
}
    1754:	26 96       	adiw	r28, 0x06	; 6
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	de bf       	out	0x3e, r29	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	cd bf       	out	0x3d, r28	; 61
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GI_void_Enable>:

#include "GI_Interface.h"
#include "GI_Registers.h"

void GI_void_Enable()
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_SREG, SREG_I);
    176e:	af e5       	ldi	r26, 0x5F	; 95
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ef e5       	ldi	r30, 0x5F	; 95
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 68       	ori	r24, 0x80	; 128
    177a:	8c 93       	st	X, r24
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <GI_void_Disable>:
void GI_void_Disable()
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_SREG, SREG_I);
    178a:	af e5       	ldi	r26, 0x5F	; 95
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ef e5       	ldi	r30, 0x5F	; 95
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8f 77       	andi	r24, 0x7F	; 127
    1796:	8c 93       	st	X, r24
}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <LCD_void_4Bit_Init>:
#include "LCD_Config.h"
#include "LCD_Private.h"


void LCD_void_4Bit_Init()
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	e8 97       	sbiw	r28, 0x38	; 56
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_OUTPUT);
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	41 e0       	ldi	r20, 0x01	; 1
    17b8:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_OUTPUT);
    17bc:	82 e0       	ldi	r24, 0x02	; 2
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_OUTPUT);
    17c6:	82 e0       	ldi	r24, 0x02	; 2
    17c8:	62 e0       	ldi	r22, 0x02	; 2
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>

	DIO_enum_SetPinDirection(LCD_DATA_PORT, LCD_DATA_D4, DIO_PIN_OUTPUT);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	64 e0       	ldi	r22, 0x04	; 4
    17d4:	41 e0       	ldi	r20, 0x01	; 1
    17d6:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_DATA_PORT, LCD_DATA_D5, DIO_PIN_OUTPUT);
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	65 e0       	ldi	r22, 0x05	; 5
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_DATA_PORT, LCD_DATA_D6, DIO_PIN_OUTPUT);
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	66 e0       	ldi	r22, 0x06	; 6
    17e8:	41 e0       	ldi	r20, 0x01	; 1
    17ea:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_DATA_PORT, LCD_DATA_D7, DIO_PIN_OUTPUT);
    17ee:	82 e0       	ldi	r24, 0x02	; 2
    17f0:	67 e0       	ldi	r22, 0x07	; 7
    17f2:	41 e0       	ldi	r20, 0x01	; 1
    17f4:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a0 e2       	ldi	r26, 0x20	; 32
    17fe:	b2 e4       	ldi	r27, 0x42	; 66
    1800:	8d ab       	std	Y+53, r24	; 0x35
    1802:	9e ab       	std	Y+54, r25	; 0x36
    1804:	af ab       	std	Y+55, r26	; 0x37
    1806:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1808:	6d a9       	ldd	r22, Y+53	; 0x35
    180a:	7e a9       	ldd	r23, Y+54	; 0x36
    180c:	8f a9       	ldd	r24, Y+55	; 0x37
    180e:	98 ad       	ldd	r25, Y+56	; 0x38
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	4a e7       	ldi	r20, 0x7A	; 122
    1816:	53 e4       	ldi	r21, 0x43	; 67
    1818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181c:	dc 01       	movw	r26, r24
    181e:	cb 01       	movw	r24, r22
    1820:	89 ab       	std	Y+49, r24	; 0x31
    1822:	9a ab       	std	Y+50, r25	; 0x32
    1824:	ab ab       	std	Y+51, r26	; 0x33
    1826:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1828:	69 a9       	ldd	r22, Y+49	; 0x31
    182a:	7a a9       	ldd	r23, Y+50	; 0x32
    182c:	8b a9       	ldd	r24, Y+51	; 0x33
    182e:	9c a9       	ldd	r25, Y+52	; 0x34
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	40 e8       	ldi	r20, 0x80	; 128
    1836:	5f e3       	ldi	r21, 0x3F	; 63
    1838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183c:	88 23       	and	r24, r24
    183e:	2c f4       	brge	.+10     	; 0x184a <LCD_void_4Bit_Init+0xac>
		__ticks = 1;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	98 ab       	std	Y+48, r25	; 0x30
    1846:	8f a7       	std	Y+47, r24	; 0x2f
    1848:	3f c0       	rjmp	.+126    	; 0x18c8 <LCD_void_4Bit_Init+0x12a>
	else if (__tmp > 65535)
    184a:	69 a9       	ldd	r22, Y+49	; 0x31
    184c:	7a a9       	ldd	r23, Y+50	; 0x32
    184e:	8b a9       	ldd	r24, Y+51	; 0x33
    1850:	9c a9       	ldd	r25, Y+52	; 0x34
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	3f ef       	ldi	r19, 0xFF	; 255
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	57 e4       	ldi	r21, 0x47	; 71
    185a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	4c f5       	brge	.+82     	; 0x18b4 <LCD_void_4Bit_Init+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1862:	6d a9       	ldd	r22, Y+53	; 0x35
    1864:	7e a9       	ldd	r23, Y+54	; 0x36
    1866:	8f a9       	ldd	r24, Y+55	; 0x37
    1868:	98 ad       	ldd	r25, Y+56	; 0x38
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e2       	ldi	r20, 0x20	; 32
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1876:	dc 01       	movw	r26, r24
    1878:	cb 01       	movw	r24, r22
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	98 ab       	std	Y+48, r25	; 0x30
    1888:	8f a7       	std	Y+47, r24	; 0x2f
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <LCD_void_4Bit_Init+0x10c>
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9e a7       	std	Y+46, r25	; 0x2e
    1892:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1894:	8d a5       	ldd	r24, Y+45	; 0x2d
    1896:	9e a5       	ldd	r25, Y+46	; 0x2e
    1898:	01 97       	sbiw	r24, 0x01	; 1
    189a:	f1 f7       	brne	.-4      	; 0x1898 <LCD_void_4Bit_Init+0xfa>
    189c:	9e a7       	std	Y+46, r25	; 0x2e
    189e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18a2:	98 a9       	ldd	r25, Y+48	; 0x30
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	98 ab       	std	Y+48, r25	; 0x30
    18a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ac:	98 a9       	ldd	r25, Y+48	; 0x30
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	69 f7       	brne	.-38     	; 0x188c <LCD_void_4Bit_Init+0xee>
    18b2:	14 c0       	rjmp	.+40     	; 0x18dc <LCD_void_4Bit_Init+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b4:	69 a9       	ldd	r22, Y+49	; 0x31
    18b6:	7a a9       	ldd	r23, Y+50	; 0x32
    18b8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ba:	9c a9       	ldd	r25, Y+52	; 0x34
    18bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	98 ab       	std	Y+48, r25	; 0x30
    18c6:	8f a7       	std	Y+47, r24	; 0x2f
    18c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18ca:	98 a9       	ldd	r25, Y+48	; 0x30
    18cc:	9c a7       	std	Y+44, r25	; 0x2c
    18ce:	8b a7       	std	Y+43, r24	; 0x2b
    18d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    18d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <LCD_void_4Bit_Init+0x136>
    18d8:	9c a7       	std	Y+44, r25	; 0x2c
    18da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_void_4Bit_WriteCommand(0x33);
    18dc:	83 e3       	ldi	r24, 0x33	; 51
    18de:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
	LCD_void_4Bit_WriteCommand(0x32);
    18e2:	82 e3       	ldi	r24, 0x32	; 50
    18e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
	LCD_void_4Bit_WriteCommand(0x28);
    18e8:	88 e2       	ldi	r24, 0x28	; 40
    18ea:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a0 e8       	ldi	r26, 0x80	; 128
    18f4:	bf e3       	ldi	r27, 0x3F	; 63
    18f6:	8f a3       	std	Y+39, r24	; 0x27
    18f8:	98 a7       	std	Y+40, r25	; 0x28
    18fa:	a9 a7       	std	Y+41, r26	; 0x29
    18fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1900:	78 a5       	ldd	r23, Y+40	; 0x28
    1902:	89 a5       	ldd	r24, Y+41	; 0x29
    1904:	9a a5       	ldd	r25, Y+42	; 0x2a
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4a e7       	ldi	r20, 0x7A	; 122
    190c:	53 e4       	ldi	r21, 0x43	; 67
    190e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	8b a3       	std	Y+35, r24	; 0x23
    1918:	9c a3       	std	Y+36, r25	; 0x24
    191a:	ad a3       	std	Y+37, r26	; 0x25
    191c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    191e:	6b a1       	ldd	r22, Y+35	; 0x23
    1920:	7c a1       	ldd	r23, Y+36	; 0x24
    1922:	8d a1       	ldd	r24, Y+37	; 0x25
    1924:	9e a1       	ldd	r25, Y+38	; 0x26
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	40 e8       	ldi	r20, 0x80	; 128
    192c:	5f e3       	ldi	r21, 0x3F	; 63
    192e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1932:	88 23       	and	r24, r24
    1934:	2c f4       	brge	.+10     	; 0x1940 <LCD_void_4Bit_Init+0x1a2>
		__ticks = 1;
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	9a a3       	std	Y+34, r25	; 0x22
    193c:	89 a3       	std	Y+33, r24	; 0x21
    193e:	3f c0       	rjmp	.+126    	; 0x19be <LCD_void_4Bit_Init+0x220>
	else if (__tmp > 65535)
    1940:	6b a1       	ldd	r22, Y+35	; 0x23
    1942:	7c a1       	ldd	r23, Y+36	; 0x24
    1944:	8d a1       	ldd	r24, Y+37	; 0x25
    1946:	9e a1       	ldd	r25, Y+38	; 0x26
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	3f ef       	ldi	r19, 0xFF	; 255
    194c:	4f e7       	ldi	r20, 0x7F	; 127
    194e:	57 e4       	ldi	r21, 0x47	; 71
    1950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1954:	18 16       	cp	r1, r24
    1956:	4c f5       	brge	.+82     	; 0x19aa <LCD_void_4Bit_Init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1958:	6f a1       	ldd	r22, Y+39	; 0x27
    195a:	78 a5       	ldd	r23, Y+40	; 0x28
    195c:	89 a5       	ldd	r24, Y+41	; 0x29
    195e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e2       	ldi	r20, 0x20	; 32
    1966:	51 e4       	ldi	r21, 0x41	; 65
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9a a3       	std	Y+34, r25	; 0x22
    197e:	89 a3       	std	Y+33, r24	; 0x21
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <LCD_void_4Bit_Init+0x202>
    1982:	89 e1       	ldi	r24, 0x19	; 25
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	98 a3       	std	Y+32, r25	; 0x20
    1988:	8f 8f       	std	Y+31, r24	; 0x1f
    198a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198c:	98 a1       	ldd	r25, Y+32	; 0x20
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <LCD_void_4Bit_Init+0x1f0>
    1992:	98 a3       	std	Y+32, r25	; 0x20
    1994:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1996:	89 a1       	ldd	r24, Y+33	; 0x21
    1998:	9a a1       	ldd	r25, Y+34	; 0x22
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	9a a3       	std	Y+34, r25	; 0x22
    199e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	89 a1       	ldd	r24, Y+33	; 0x21
    19a2:	9a a1       	ldd	r25, Y+34	; 0x22
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	69 f7       	brne	.-38     	; 0x1982 <LCD_void_4Bit_Init+0x1e4>
    19a8:	14 c0       	rjmp	.+40     	; 0x19d2 <LCD_void_4Bit_Init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19aa:	6b a1       	ldd	r22, Y+35	; 0x23
    19ac:	7c a1       	ldd	r23, Y+36	; 0x24
    19ae:	8d a1       	ldd	r24, Y+37	; 0x25
    19b0:	9e a1       	ldd	r25, Y+38	; 0x26
    19b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	9a a3       	std	Y+34, r25	; 0x22
    19bc:	89 a3       	std	Y+33, r24	; 0x21
    19be:	89 a1       	ldd	r24, Y+33	; 0x21
    19c0:	9a a1       	ldd	r25, Y+34	; 0x22
    19c2:	9e 8f       	std	Y+30, r25	; 0x1e
    19c4:	8d 8f       	std	Y+29, r24	; 0x1d
    19c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <LCD_void_4Bit_Init+0x22c>
    19ce:	9e 8f       	std	Y+30, r25	; 0x1e
    19d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_void_4Bit_WriteCommand(0x0E);
    19d2:	8e e0       	ldi	r24, 0x0E	; 14
    19d4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 e8       	ldi	r26, 0x80	; 128
    19de:	bf e3       	ldi	r27, 0x3F	; 63
    19e0:	89 8f       	std	Y+25, r24	; 0x19
    19e2:	9a 8f       	std	Y+26, r25	; 0x1a
    19e4:	ab 8f       	std	Y+27, r26	; 0x1b
    19e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a e7       	ldi	r20, 0x7A	; 122
    19f6:	53 e4       	ldi	r21, 0x43	; 67
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8d 8b       	std	Y+21, r24	; 0x15
    1a02:	9e 8b       	std	Y+22, r25	; 0x16
    1a04:	af 8b       	std	Y+23, r26	; 0x17
    1a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <LCD_void_4Bit_Init+0x28c>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9c 8b       	std	Y+20, r25	; 0x14
    1a26:	8b 8b       	std	Y+19, r24	; 0x13
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <LCD_void_4Bit_Init+0x30a>
	else if (__tmp > 65535)
    1a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a30:	98 8d       	ldd	r25, Y+24	; 0x18
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <LCD_void_4Bit_Init+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	69 8d       	ldd	r22, Y+25	; 0x19
    1a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9c 8b       	std	Y+20, r25	; 0x14
    1a68:	8b 8b       	std	Y+19, r24	; 0x13
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_void_4Bit_Init+0x2ec>
    1a6c:	89 e1       	ldi	r24, 0x19	; 25
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9a 8b       	std	Y+18, r25	; 0x12
    1a72:	89 8b       	std	Y+17, r24	; 0x11
    1a74:	89 89       	ldd	r24, Y+17	; 0x11
    1a76:	9a 89       	ldd	r25, Y+18	; 0x12
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_void_4Bit_Init+0x2da>
    1a7c:	9a 8b       	std	Y+18, r25	; 0x12
    1a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8b 89       	ldd	r24, Y+19	; 0x13
    1a82:	9c 89       	ldd	r25, Y+20	; 0x14
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9c 8b       	std	Y+20, r25	; 0x14
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <LCD_void_4Bit_Init+0x2ce>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <LCD_void_4Bit_Init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6d 89       	ldd	r22, Y+21	; 0x15
    1a96:	7e 89       	ldd	r23, Y+22	; 0x16
    1a98:	8f 89       	ldd	r24, Y+23	; 0x17
    1a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	98 8b       	std	Y+16, r25	; 0x10
    1aae:	8f 87       	std	Y+15, r24	; 0x0f
    1ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab2:	98 89       	ldd	r25, Y+16	; 0x10
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_void_4Bit_Init+0x316>
    1ab8:	98 8b       	std	Y+16, r25	; 0x10
    1aba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_void_4Bit_WriteCommand(0x01);
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e0       	ldi	r26, 0x00	; 0
    1ac8:	b0 e4       	ldi	r27, 0x40	; 64
    1aca:	8b 87       	std	Y+11, r24	; 0x0b
    1acc:	9c 87       	std	Y+12, r25	; 0x0c
    1ace:	ad 87       	std	Y+13, r26	; 0x0d
    1ad0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	4a e7       	ldi	r20, 0x7A	; 122
    1ae0:	53 e4       	ldi	r21, 0x43	; 67
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8f 83       	std	Y+7, r24	; 0x07
    1aec:	98 87       	std	Y+8, r25	; 0x08
    1aee:	a9 87       	std	Y+9, r26	; 0x09
    1af0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	40 e8       	ldi	r20, 0x80	; 128
    1b00:	5f e3       	ldi	r21, 0x3F	; 63
    1b02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b06:	88 23       	and	r24, r24
    1b08:	2c f4       	brge	.+10     	; 0x1b14 <LCD_void_4Bit_Init+0x376>
		__ticks = 1;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e 83       	std	Y+6, r25	; 0x06
    1b10:	8d 83       	std	Y+5, r24	; 0x05
    1b12:	3f c0       	rjmp	.+126    	; 0x1b92 <LCD_void_4Bit_Init+0x3f4>
	else if (__tmp > 65535)
    1b14:	6f 81       	ldd	r22, Y+7	; 0x07
    1b16:	78 85       	ldd	r23, Y+8	; 0x08
    1b18:	89 85       	ldd	r24, Y+9	; 0x09
    1b1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	4f e7       	ldi	r20, 0x7F	; 127
    1b22:	57 e4       	ldi	r21, 0x47	; 71
    1b24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b28:	18 16       	cp	r1, r24
    1b2a:	4c f5       	brge	.+82     	; 0x1b7e <LCD_void_4Bit_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	40 e2       	ldi	r20, 0x20	; 32
    1b3a:	51 e4       	ldi	r21, 0x41	; 65
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	0f c0       	rjmp	.+30     	; 0x1b74 <LCD_void_4Bit_Init+0x3d6>
    1b56:	89 e1       	ldi	r24, 0x19	; 25
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	8b 83       	std	Y+3, r24	; 0x03
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <LCD_void_4Bit_Init+0x3c4>
    1b66:	9c 83       	std	Y+4, r25	; 0x04
    1b68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	01 97       	sbiw	r24, 0x01	; 1
    1b70:	9e 83       	std	Y+6, r25	; 0x06
    1b72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	00 97       	sbiw	r24, 0x00	; 0
    1b7a:	69 f7       	brne	.-38     	; 0x1b56 <LCD_void_4Bit_Init+0x3b8>
    1b7c:	14 c0       	rjmp	.+40     	; 0x1ba6 <LCD_void_4Bit_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	9a 83       	std	Y+2, r25	; 0x02
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	89 81       	ldd	r24, Y+1	; 0x01
    1b9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9e:	01 97       	sbiw	r24, 0x01	; 1
    1ba0:	f1 f7       	brne	.-4      	; 0x1b9e <LCD_void_4Bit_Init+0x400>
    1ba2:	9a 83       	std	Y+2, r25	; 0x02
    1ba4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1ba6:	e8 96       	adiw	r28, 0x38	; 56
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <LCD_void_4Bit_WriteCommand>:

void LCD_void_4Bit_WriteCommand(u8 Local_u8_command)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
    1bc0:	6d 97       	sbiw	r28, 0x1d	; 29
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
    1bcc:	8d 8f       	std	Y+29, r24	; 0x1d
	/* For instructions (Set RS pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_LOW);
    1bce:	82 e0       	ldi	r24, 0x02	; 2
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	40 e0       	ldi	r20, 0x00	; 0
    1bd4:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write operation (Set RW pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_LOW);
    1bd8:	82 e0       	ldi	r24, 0x02	; 2
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	40 e0       	ldi	r20, 0x00	; 0
    1bde:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write upper nibble on Data port (D4 - D7) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D4,GET_BIT(Local_u8_command, 4));
    1be2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be4:	82 95       	swap	r24
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	98 2f       	mov	r25, r24
    1bea:	91 70       	andi	r25, 0x01	; 1
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	64 e0       	ldi	r22, 0x04	; 4
    1bf0:	49 2f       	mov	r20, r25
    1bf2:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D5,GET_BIT(Local_u8_command, 5));
    1bf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bf8:	82 95       	swap	r24
    1bfa:	86 95       	lsr	r24
    1bfc:	87 70       	andi	r24, 0x07	; 7
    1bfe:	98 2f       	mov	r25, r24
    1c00:	91 70       	andi	r25, 0x01	; 1
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	65 e0       	ldi	r22, 0x05	; 5
    1c06:	49 2f       	mov	r20, r25
    1c08:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D6,GET_BIT(Local_u8_command, 6));
    1c0c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c0e:	82 95       	swap	r24
    1c10:	86 95       	lsr	r24
    1c12:	86 95       	lsr	r24
    1c14:	83 70       	andi	r24, 0x03	; 3
    1c16:	98 2f       	mov	r25, r24
    1c18:	91 70       	andi	r25, 0x01	; 1
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	66 e0       	ldi	r22, 0x06	; 6
    1c1e:	49 2f       	mov	r20, r25
    1c20:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D7,GET_BIT(Local_u8_command, 7));
    1c24:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c26:	98 2f       	mov	r25, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	99 27       	eor	r25, r25
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	67 e0       	ldi	r22, 0x07	; 7
    1c32:	49 2f       	mov	r20, r25
    1c34:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	62 e0       	ldi	r22, 0x02	; 2
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a0 e8       	ldi	r26, 0x80	; 128
    1c48:	bf e3       	ldi	r27, 0x3F	; 63
    1c4a:	89 8f       	std	Y+25, r24	; 0x19
    1c4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1c4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1c50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	69 8d       	ldd	r22, Y+25	; 0x19
    1c54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	53 e4       	ldi	r21, 0x43	; 67
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8d 8b       	std	Y+21, r24	; 0x15
    1c6c:	9e 8b       	std	Y+22, r25	; 0x16
    1c6e:	af 8b       	std	Y+23, r26	; 0x17
    1c70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c72:	6d 89       	ldd	r22, Y+21	; 0x15
    1c74:	7e 89       	ldd	r23, Y+22	; 0x16
    1c76:	8f 89       	ldd	r24, Y+23	; 0x17
    1c78:	98 8d       	ldd	r25, Y+24	; 0x18
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <LCD_void_4Bit_WriteCommand+0xdc>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9c 8b       	std	Y+20, r25	; 0x14
    1c90:	8b 8b       	std	Y+19, r24	; 0x13
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <LCD_void_4Bit_WriteCommand+0x15a>
	else if (__tmp > 65535)
    1c94:	6d 89       	ldd	r22, Y+21	; 0x15
    1c96:	7e 89       	ldd	r23, Y+22	; 0x16
    1c98:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <LCD_void_4Bit_WriteCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	69 8d       	ldd	r22, Y+25	; 0x19
    1cae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9c 8b       	std	Y+20, r25	; 0x14
    1cd2:	8b 8b       	std	Y+19, r24	; 0x13
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <LCD_void_4Bit_WriteCommand+0x13c>
    1cd6:	89 e1       	ldi	r24, 0x19	; 25
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	9a 8b       	std	Y+18, r25	; 0x12
    1cdc:	89 8b       	std	Y+17, r24	; 0x11
    1cde:	89 89       	ldd	r24, Y+17	; 0x11
    1ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <LCD_void_4Bit_WriteCommand+0x12a>
    1ce6:	9a 8b       	std	Y+18, r25	; 0x12
    1ce8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9c 8b       	std	Y+20, r25	; 0x14
    1cf2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf6:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <LCD_void_4Bit_WriteCommand+0x11e>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <LCD_void_4Bit_WriteCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1d00:	7e 89       	ldd	r23, Y+22	; 0x16
    1d02:	8f 89       	ldd	r24, Y+23	; 0x17
    1d04:	98 8d       	ldd	r25, Y+24	; 0x18
    1d06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9c 8b       	std	Y+20, r25	; 0x14
    1d10:	8b 8b       	std	Y+19, r24	; 0x13
    1d12:	8b 89       	ldd	r24, Y+19	; 0x13
    1d14:	9c 89       	ldd	r25, Y+20	; 0x14
    1d16:	98 8b       	std	Y+16, r25	; 0x10
    1d18:	8f 87       	std	Y+15, r24	; 0x0f
    1d1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d1c:	98 89       	ldd	r25, Y+16	; 0x10
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <LCD_void_4Bit_WriteCommand+0x166>
    1d22:	98 8b       	std	Y+16, r25	; 0x10
    1d24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	62 e0       	ldi	r22, 0x02	; 2
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write lower nibble on Data port (D4 - D7) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D4,GET_BIT(Local_u8_command, 0));
    1d30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d32:	98 2f       	mov	r25, r24
    1d34:	91 70       	andi	r25, 0x01	; 1
    1d36:	82 e0       	ldi	r24, 0x02	; 2
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D5,GET_BIT(Local_u8_command, 1));
    1d40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d42:	86 95       	lsr	r24
    1d44:	98 2f       	mov	r25, r24
    1d46:	91 70       	andi	r25, 0x01	; 1
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	65 e0       	ldi	r22, 0x05	; 5
    1d4c:	49 2f       	mov	r20, r25
    1d4e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D6,GET_BIT(Local_u8_command, 2));
    1d52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d54:	86 95       	lsr	r24
    1d56:	86 95       	lsr	r24
    1d58:	98 2f       	mov	r25, r24
    1d5a:	91 70       	andi	r25, 0x01	; 1
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	66 e0       	ldi	r22, 0x06	; 6
    1d60:	49 2f       	mov	r20, r25
    1d62:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_CONTROL_PORT,LCD_DATA_D7,GET_BIT(Local_u8_command, 3));
    1d66:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d68:	86 95       	lsr	r24
    1d6a:	86 95       	lsr	r24
    1d6c:	86 95       	lsr	r24
    1d6e:	98 2f       	mov	r25, r24
    1d70:	91 70       	andi	r25, 0x01	; 1
    1d72:	82 e0       	ldi	r24, 0x02	; 2
    1d74:	67 e0       	ldi	r22, 0x07	; 7
    1d76:	49 2f       	mov	r20, r25
    1d78:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	62 e0       	ldi	r22, 0x02	; 2
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e8       	ldi	r26, 0x80	; 128
    1d8c:	bf e3       	ldi	r27, 0x3F	; 63
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a e7       	ldi	r20, 0x7A	; 122
    1da4:	53 e4       	ldi	r21, 0x43	; 67
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <LCD_void_4Bit_WriteCommand+0x220>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <LCD_void_4Bit_WriteCommand+0x29e>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <LCD_void_4Bit_WriteCommand+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_void_4Bit_WriteCommand+0x280>
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_void_4Bit_WriteCommand+0x26e>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_void_4Bit_WriteCommand+0x262>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <LCD_void_4Bit_WriteCommand+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_void_4Bit_WriteCommand+0x2aa>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	62 e0       	ldi	r22, 0x02	; 2
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>

}
    1e74:	6d 96       	adiw	r28, 0x1d	; 29
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <LCD_void_4Bit_WriteCharacter>:

void LCD_void_4Bit_WriteCharacter(u8 Local_u8_Char)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	6d 97       	sbiw	r28, 0x1d	; 29
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	8d 8f       	std	Y+29, r24	; 0x1d
	/* For instructions (Set RS pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_HIGH);
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write operation (Set RW pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_LOW);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	61 e0       	ldi	r22, 0x01	; 1
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write upper nibble on Data port (D4 - D7) */
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(Local_u8_Char, 4));
    1eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb2:	82 95       	swap	r24
    1eb4:	8f 70       	andi	r24, 0x0F	; 15
    1eb6:	98 2f       	mov	r25, r24
    1eb8:	91 70       	andi	r25, 0x01	; 1
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	64 e0       	ldi	r22, 0x04	; 4
    1ebe:	49 2f       	mov	r20, r25
    1ec0:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(Local_u8_Char, 5));
    1ec4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ec6:	82 95       	swap	r24
    1ec8:	86 95       	lsr	r24
    1eca:	87 70       	andi	r24, 0x07	; 7
    1ecc:	98 2f       	mov	r25, r24
    1ece:	91 70       	andi	r25, 0x01	; 1
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	65 e0       	ldi	r22, 0x05	; 5
    1ed4:	49 2f       	mov	r20, r25
    1ed6:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(Local_u8_Char, 6));
    1eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1edc:	82 95       	swap	r24
    1ede:	86 95       	lsr	r24
    1ee0:	86 95       	lsr	r24
    1ee2:	83 70       	andi	r24, 0x03	; 3
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	91 70       	andi	r25, 0x01	; 1
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	66 e0       	ldi	r22, 0x06	; 6
    1eec:	49 2f       	mov	r20, r25
    1eee:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(Local_u8_Char, 7));
    1ef2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef4:	98 2f       	mov	r25, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	99 27       	eor	r25, r25
    1efa:	99 1f       	adc	r25, r25
    1efc:	82 e0       	ldi	r24, 0x02	; 2
    1efe:	67 e0       	ldi	r22, 0x07	; 7
    1f00:	49 2f       	mov	r20, r25
    1f02:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    1f06:	82 e0       	ldi	r24, 0x02	; 2
    1f08:	62 e0       	ldi	r22, 0x02	; 2
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e8       	ldi	r26, 0x80	; 128
    1f16:	bf e3       	ldi	r27, 0x3F	; 63
    1f18:	89 8f       	std	Y+25, r24	; 0x19
    1f1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	69 8d       	ldd	r22, Y+25	; 0x19
    1f22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a e7       	ldi	r20, 0x7A	; 122
    1f2e:	53 e4       	ldi	r21, 0x43	; 67
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8d 8b       	std	Y+21, r24	; 0x15
    1f3a:	9e 8b       	std	Y+22, r25	; 0x16
    1f3c:	af 8b       	std	Y+23, r26	; 0x17
    1f3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <LCD_void_4Bit_WriteCharacter+0xdc>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9c 8b       	std	Y+20, r25	; 0x14
    1f5e:	8b 8b       	std	Y+19, r24	; 0x13
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <LCD_void_4Bit_WriteCharacter+0x15a>
	else if (__tmp > 65535)
    1f62:	6d 89       	ldd	r22, Y+21	; 0x15
    1f64:	7e 89       	ldd	r23, Y+22	; 0x16
    1f66:	8f 89       	ldd	r24, Y+23	; 0x17
    1f68:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <LCD_void_4Bit_WriteCharacter+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9c 8b       	std	Y+20, r25	; 0x14
    1fa0:	8b 8b       	std	Y+19, r24	; 0x13
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <LCD_void_4Bit_WriteCharacter+0x13c>
    1fa4:	89 e1       	ldi	r24, 0x19	; 25
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	9a 8b       	std	Y+18, r25	; 0x12
    1faa:	89 8b       	std	Y+17, r24	; 0x11
    1fac:	89 89       	ldd	r24, Y+17	; 0x11
    1fae:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <LCD_void_4Bit_WriteCharacter+0x12a>
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fba:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <LCD_void_4Bit_WriteCharacter+0x11e>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <LCD_void_4Bit_WriteCharacter+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fce:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9c 8b       	std	Y+20, r25	; 0x14
    1fde:	8b 8b       	std	Y+19, r24	; 0x13
    1fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe4:	98 8b       	std	Y+16, r25	; 0x10
    1fe6:	8f 87       	std	Y+15, r24	; 0x0f
    1fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fea:	98 89       	ldd	r25, Y+16	; 0x10
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_void_4Bit_WriteCharacter+0x166>
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write lower nibble on Data port (D4 - D7) */
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D4,GET_BIT(Local_u8_Char, 0));
    1ffe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2000:	98 2f       	mov	r25, r24
    2002:	91 70       	andi	r25, 0x01	; 1
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	64 e0       	ldi	r22, 0x04	; 4
    2008:	49 2f       	mov	r20, r25
    200a:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D5,GET_BIT(Local_u8_Char, 1));
    200e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2010:	86 95       	lsr	r24
    2012:	98 2f       	mov	r25, r24
    2014:	91 70       	andi	r25, 0x01	; 1
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	65 e0       	ldi	r22, 0x05	; 5
    201a:	49 2f       	mov	r20, r25
    201c:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D6,GET_BIT(Local_u8_Char, 2));
    2020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2022:	86 95       	lsr	r24
    2024:	86 95       	lsr	r24
    2026:	98 2f       	mov	r25, r24
    2028:	91 70       	andi	r25, 0x01	; 1
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	66 e0       	ldi	r22, 0x06	; 6
    202e:	49 2f       	mov	r20, r25
    2030:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	DIO_enum_SetPinValue(LCD_DATA_PORT,LCD_DATA_D7,GET_BIT(Local_u8_Char, 3));
    2034:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2036:	86 95       	lsr	r24
    2038:	86 95       	lsr	r24
    203a:	86 95       	lsr	r24
    203c:	98 2f       	mov	r25, r24
    203e:	91 70       	andi	r25, 0x01	; 1
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	67 e0       	ldi	r22, 0x07	; 7
    2044:	49 2f       	mov	r20, r25
    2046:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    204a:	82 e0       	ldi	r24, 0x02	; 2
    204c:	62 e0       	ldi	r22, 0x02	; 2
    204e:	41 e0       	ldi	r20, 0x01	; 1
    2050:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    2054:	80 e0       	ldi	r24, 0x00	; 0
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a0 e8       	ldi	r26, 0x80	; 128
    205a:	bf e3       	ldi	r27, 0x3F	; 63
    205c:	8b 87       	std	Y+11, r24	; 0x0b
    205e:	9c 87       	std	Y+12, r25	; 0x0c
    2060:	ad 87       	std	Y+13, r26	; 0x0d
    2062:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2064:	6b 85       	ldd	r22, Y+11	; 0x0b
    2066:	7c 85       	ldd	r23, Y+12	; 0x0c
    2068:	8d 85       	ldd	r24, Y+13	; 0x0d
    206a:	9e 85       	ldd	r25, Y+14	; 0x0e
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a e7       	ldi	r20, 0x7A	; 122
    2072:	53 e4       	ldi	r21, 0x43	; 67
    2074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	8f 83       	std	Y+7, r24	; 0x07
    207e:	98 87       	std	Y+8, r25	; 0x08
    2080:	a9 87       	std	Y+9, r26	; 0x09
    2082:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	2c f4       	brge	.+10     	; 0x20a6 <LCD_void_4Bit_WriteCharacter+0x220>
		__ticks = 1;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	3f c0       	rjmp	.+126    	; 0x2124 <LCD_void_4Bit_WriteCharacter+0x29e>
	else if (__tmp > 65535)
    20a6:	6f 81       	ldd	r22, Y+7	; 0x07
    20a8:	78 85       	ldd	r23, Y+8	; 0x08
    20aa:	89 85       	ldd	r24, Y+9	; 0x09
    20ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	4c f5       	brge	.+82     	; 0x2110 <LCD_void_4Bit_WriteCharacter+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20be:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e2       	ldi	r20, 0x20	; 32
    20cc:	51 e4       	ldi	r21, 0x41	; 65
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	bc 01       	movw	r22, r24
    20d8:	cd 01       	movw	r24, r26
    20da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
    20e6:	0f c0       	rjmp	.+30     	; 0x2106 <LCD_void_4Bit_WriteCharacter+0x280>
    20e8:	89 e1       	ldi	r24, 0x19	; 25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9c 83       	std	Y+4, r25	; 0x04
    20ee:	8b 83       	std	Y+3, r24	; 0x03
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_void_4Bit_WriteCharacter+0x26e>
    20f8:	9c 83       	std	Y+4, r25	; 0x04
    20fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	00 97       	sbiw	r24, 0x00	; 0
    210c:	69 f7       	brne	.-38     	; 0x20e8 <LCD_void_4Bit_WriteCharacter+0x262>
    210e:	14 c0       	rjmp	.+40     	; 0x2138 <LCD_void_4Bit_WriteCharacter+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e 83       	std	Y+6, r25	; 0x06
    2122:	8d 83       	std	Y+5, r24	; 0x05
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	9a 83       	std	Y+2, r25	; 0x02
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	9a 81       	ldd	r25, Y+2	; 0x02
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_void_4Bit_WriteCharacter+0x2aa>
    2134:	9a 83       	std	Y+2, r25	; 0x02
    2136:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>

}
    2142:	6d 96       	adiw	r28, 0x1d	; 29
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <LCD_void_4Bit_WriteString>:

void LCD_void_4Bit_WriteString(u8 * Local_u8Ptr_ArrOfChar)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <LCD_void_4Bit_WriteString+0x6>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	9b 83       	std	Y+3, r25	; 0x03
    2162:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0;
    2164:	19 82       	std	Y+1, r1	; 0x01
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <LCD_void_4Bit_WriteString+0x30>
	while(Local_u8Ptr_ArrOfChar[Local_u8_Counter] != '\0')
	{
		LCD_void_4Bit_WriteCharacter(Local_u8Ptr_ArrOfChar[Local_u8_Counter]);
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	fc 01       	movw	r30, r24
    2174:	e2 0f       	add	r30, r18
    2176:	f3 1f       	adc	r31, r19
    2178:	80 81       	ld	r24, Z
    217a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_void_4Bit_WriteCharacter>
		Local_u8_Counter++;
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	8f 5f       	subi	r24, 0xFF	; 255
    2182:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_void_4Bit_WriteString(u8 * Local_u8Ptr_ArrOfChar)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8Ptr_ArrOfChar[Local_u8_Counter] != '\0')
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	fc 01       	movw	r30, r24
    2190:	e2 0f       	add	r30, r18
    2192:	f3 1f       	adc	r31, r19
    2194:	80 81       	ld	r24, Z
    2196:	88 23       	and	r24, r24
    2198:	39 f7       	brne	.-50     	; 0x2168 <LCD_void_4Bit_WriteString+0x14>
	{
		LCD_void_4Bit_WriteCharacter(Local_u8Ptr_ArrOfChar[Local_u8_Counter]);
		Local_u8_Counter++;
	}
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <LCD_void_SetCursor>:

void LCD_void_SetCursor(u8 Local_u8_Raw, u8 Local_u8_Col)
{
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <LCD_void_SetCursor+0x6>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <LCD_void_SetCursor+0x8>
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	8a 83       	std	Y+2, r24	; 0x02
    21b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Address = 0;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	if(Local_u8_Col < 16)
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	80 31       	cpi	r24, 0x10	; 16
    21be:	88 f5       	brcc	.+98     	; 0x2222 <LCD_void_SetCursor+0x7c>
	{
		switch(Local_u8_Raw)
    21c0:	8a 81       	ldd	r24, Y+2	; 0x02
    21c2:	28 2f       	mov	r18, r24
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	3d 83       	std	Y+5, r19	; 0x05
    21c8:	2c 83       	std	Y+4, r18	; 0x04
    21ca:	8c 81       	ldd	r24, Y+4	; 0x04
    21cc:	9d 81       	ldd	r25, Y+5	; 0x05
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	91 05       	cpc	r25, r1
    21d2:	c1 f0       	breq	.+48     	; 0x2204 <LCD_void_SetCursor+0x5e>
    21d4:	2c 81       	ldd	r18, Y+4	; 0x04
    21d6:	3d 81       	ldd	r19, Y+5	; 0x05
    21d8:	22 30       	cpi	r18, 0x02	; 2
    21da:	31 05       	cpc	r19, r1
    21dc:	2c f4       	brge	.+10     	; 0x21e8 <LCD_void_SetCursor+0x42>
    21de:	8c 81       	ldd	r24, Y+4	; 0x04
    21e0:	9d 81       	ldd	r25, Y+5	; 0x05
    21e2:	00 97       	sbiw	r24, 0x00	; 0
    21e4:	61 f0       	breq	.+24     	; 0x21fe <LCD_void_SetCursor+0x58>
    21e6:	19 c0       	rjmp	.+50     	; 0x221a <LCD_void_SetCursor+0x74>
    21e8:	2c 81       	ldd	r18, Y+4	; 0x04
    21ea:	3d 81       	ldd	r19, Y+5	; 0x05
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	69 f0       	breq	.+26     	; 0x220c <LCD_void_SetCursor+0x66>
    21f2:	8c 81       	ldd	r24, Y+4	; 0x04
    21f4:	9d 81       	ldd	r25, Y+5	; 0x05
    21f6:	83 30       	cpi	r24, 0x03	; 3
    21f8:	91 05       	cpc	r25, r1
    21fa:	61 f0       	breq	.+24     	; 0x2214 <LCD_void_SetCursor+0x6e>
    21fc:	0e c0       	rjmp	.+28     	; 0x221a <LCD_void_SetCursor+0x74>
		{


		case 0:Local_u8_Address = Local_u8_Col;break;
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	89 83       	std	Y+1, r24	; 0x01
    2202:	0b c0       	rjmp	.+22     	; 0x221a <LCD_void_SetCursor+0x74>

		/* LCD_LINE_2 = LCD_LINE_1 + 0x40  that mean it can be written in second line after 40 locations */
		case 1:Local_u8_Address = Local_u8_Col + 0x40;break;
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	80 5c       	subi	r24, 0xC0	; 192
    2208:	89 83       	std	Y+1, r24	; 0x01
    220a:	07 c0       	rjmp	.+14     	; 0x221a <LCD_void_SetCursor+0x74>
		case 2:Local_u8_Address = Local_u8_Col + 0x94;break;
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	8c 56       	subi	r24, 0x6C	; 108
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	03 c0       	rjmp	.+6      	; 0x221a <LCD_void_SetCursor+0x74>
		case 3:Local_u8_Address = Local_u8_Col + 0xD4;break;
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	8c 52       	subi	r24, 0x2C	; 44
    2218:	89 83       	std	Y+1, r24	; 0x01

		default:break;
		}
		/* Set bit number 7 for set DDRAM address command then send the command */
				/* LCD_LINE_1 = 10000000  that mean bit number 7 will be 1 */
		LCD_void_4Bit_WriteCommand(Local_u8_Address | 0x80);
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	80 68       	ori	r24, 0x80	; 128
    221e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
	}
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <LCD_void_4Bit_WriteCustomCharacter>:

void LCD_void_4Bit_WriteCustomCharacter(u8 * Local_u8_Char, u8 Local_u8_CharNumber)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <LCD_void_4Bit_WriteCustomCharacter+0x6>
    2238:	00 d0       	rcall	.+0      	; 0x223a <LCD_void_4Bit_WriteCustomCharacter+0x8>
    223a:	0f 92       	push	r0
    223c:	cd b7       	in	r28, 0x3d	; 61
    223e:	de b7       	in	r29, 0x3e	; 62
    2240:	9c 83       	std	Y+4, r25	; 0x04
    2242:	8b 83       	std	Y+3, r24	; 0x03
    2244:	6d 83       	std	Y+5, r22	; 0x05
	/* calculate the CGRAM Address, each block consist of 8 bytes */
	u8 Local_u8_CGRAM_Address = Local_u8_CharNumber * 8;
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	88 2f       	mov	r24, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	8a 83       	std	Y+2, r24	; 0x02
	/* to Access CGRAM, Set Bit 6 to one  */
	LCD_void_4Bit_WriteCommand(Local_u8_CGRAM_Address + LCD_CGRAM);
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	80 5c       	subi	r24, 0xC0	; 192
    225e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
	/*write data in CGRAM. CGRAM has 8 locations. each locations consist of 8 bytes. */
	for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    2262:	19 82       	std	Y+1, r1	; 0x01
    2264:	0e c0       	rjmp	.+28     	; 0x2282 <LCD_void_4Bit_WriteCustomCharacter+0x50>
	{
		LCD_void_4Bit_WriteCharacter(Local_u8_Char[Local_u8_counter]);
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	fc 01       	movw	r30, r24
    2272:	e2 0f       	add	r30, r18
    2274:	f3 1f       	adc	r31, r19
    2276:	80 81       	ld	r24, Z
    2278:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_void_4Bit_WriteCharacter>
	/* calculate the CGRAM Address, each block consist of 8 bytes */
	u8 Local_u8_CGRAM_Address = Local_u8_CharNumber * 8;
	/* to Access CGRAM, Set Bit 6 to one  */
	LCD_void_4Bit_WriteCommand(Local_u8_CGRAM_Address + LCD_CGRAM);
	/*write data in CGRAM. CGRAM has 8 locations. each locations consist of 8 bytes. */
	for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	89 81       	ldd	r24, Y+1	; 0x01
    2284:	88 30       	cpi	r24, 0x08	; 8
    2286:	78 f3       	brcs	.-34     	; 0x2266 <LCD_void_4Bit_WriteCustomCharacter+0x34>
	{
		LCD_void_4Bit_WriteCharacter(Local_u8_Char[Local_u8_counter]);
	}
	// to access DDRAM
	LCD_void_4Bit_WriteCommand(LCD_DDRAM);
    2288:	80 e8       	ldi	r24, 0x80	; 128
    228a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <LCD_void_4Bit_WriteCommand>
	/* Write the custom character,Send its location from 0 to 7*/
	LCD_void_4Bit_WriteCharacter(Local_u8_CharNumber);
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_void_4Bit_WriteCharacter>
}
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_void_8Bit_Init>:


void LCD_void_8Bit_Init()
{
    22a4:	0f 93       	push	r16
    22a6:	1f 93       	push	r17
    22a8:	df 93       	push	r29
    22aa:	cf 93       	push	r28
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	c6 54       	subi	r28, 0x46	; 70
    22b2:	d0 40       	sbci	r29, 0x00	; 0
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_OUTPUT);
    22be:	82 e0       	ldi	r24, 0x02	; 2
    22c0:	60 e0       	ldi	r22, 0x00	; 0
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_OUTPUT);
    22c8:	82 e0       	ldi	r24, 0x02	; 2
    22ca:	61 e0       	ldi	r22, 0x01	; 1
    22cc:	41 e0       	ldi	r20, 0x01	; 1
    22ce:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_OUTPUT);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	62 e0       	ldi	r22, 0x02	; 2
    22d6:	41 e0       	ldi	r20, 0x01	; 1
    22d8:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	6f ef       	ldi	r22, 0xFF	; 255
    22e0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <DIO_enum_SetPortDirection>
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 5b       	subi	r30, 0xBD	; 189
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a0 e2       	ldi	r26, 0x20	; 32
    22f0:	b2 e4       	ldi	r27, 0x42	; 66
    22f2:	80 83       	st	Z, r24
    22f4:	91 83       	std	Z+1, r25	; 0x01
    22f6:	a2 83       	std	Z+2, r26	; 0x02
    22f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	8e 01       	movw	r16, r28
    22fc:	01 5c       	subi	r16, 0xC1	; 193
    22fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2300:	fe 01       	movw	r30, r28
    2302:	ed 5b       	subi	r30, 0xBD	; 189
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	60 81       	ld	r22, Z
    2308:	71 81       	ldd	r23, Z+1	; 0x01
    230a:	82 81       	ldd	r24, Z+2	; 0x02
    230c:	93 81       	ldd	r25, Z+3	; 0x03
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	53 e4       	ldi	r21, 0x43	; 67
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	f8 01       	movw	r30, r16
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	a2 83       	std	Z+2, r26	; 0x02
    2326:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2328:	fe 01       	movw	r30, r28
    232a:	ff 96       	adiw	r30, 0x3f	; 63
    232c:	60 81       	ld	r22, Z
    232e:	71 81       	ldd	r23, Z+1	; 0x01
    2330:	82 81       	ldd	r24, Z+2	; 0x02
    2332:	93 81       	ldd	r25, Z+3	; 0x03
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_void_8Bit_Init+0xaa>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e af       	std	Y+62, r25	; 0x3e
    234a:	8d af       	std	Y+61, r24	; 0x3d
    234c:	46 c0       	rjmp	.+140    	; 0x23da <LCD_void_8Bit_Init+0x136>
	else if (__tmp > 65535)
    234e:	fe 01       	movw	r30, r28
    2350:	ff 96       	adiw	r30, 0x3f	; 63
    2352:	60 81       	ld	r22, Z
    2354:	71 81       	ldd	r23, Z+1	; 0x01
    2356:	82 81       	ldd	r24, Z+2	; 0x02
    2358:	93 81       	ldd	r25, Z+3	; 0x03
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	64 f5       	brge	.+88     	; 0x23c2 <LCD_void_8Bit_Init+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	fe 01       	movw	r30, r28
    236c:	ed 5b       	subi	r30, 0xBD	; 189
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e2       	ldi	r20, 0x20	; 32
    237e:	51 e4       	ldi	r21, 0x41	; 65
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	bc 01       	movw	r22, r24
    238a:	cd 01       	movw	r24, r26
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e af       	std	Y+62, r25	; 0x3e
    2396:	8d af       	std	Y+61, r24	; 0x3d
    2398:	0f c0       	rjmp	.+30     	; 0x23b8 <LCD_void_8Bit_Init+0x114>
    239a:	89 e1       	ldi	r24, 0x19	; 25
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	9c af       	std	Y+60, r25	; 0x3c
    23a0:	8b af       	std	Y+59, r24	; 0x3b
    23a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    23a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_void_8Bit_Init+0x102>
    23aa:	9c af       	std	Y+60, r25	; 0x3c
    23ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    23b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	9e af       	std	Y+62, r25	; 0x3e
    23b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	69 f7       	brne	.-38     	; 0x239a <LCD_void_8Bit_Init+0xf6>
    23c0:	16 c0       	rjmp	.+44     	; 0x23ee <LCD_void_8Bit_Init+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23c2:	fe 01       	movw	r30, r28
    23c4:	ff 96       	adiw	r30, 0x3f	; 63
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	9e af       	std	Y+62, r25	; 0x3e
    23d8:	8d af       	std	Y+61, r24	; 0x3d
    23da:	8d ad       	ldd	r24, Y+61	; 0x3d
    23dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    23de:	9a af       	std	Y+58, r25	; 0x3a
    23e0:	89 af       	std	Y+57, r24	; 0x39
    23e2:	89 ad       	ldd	r24, Y+57	; 0x39
    23e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_void_8Bit_Init+0x142>
    23ea:	9a af       	std	Y+58, r25	; 0x3a
    23ec:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(40);
	LCD_void_8Bit_WriteCommand(LCD_FUNCTION_SET);
    23ee:	88 e3       	ldi	r24, 0x38	; 56
    23f0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e8       	ldi	r26, 0x80	; 128
    23fa:	bf e3       	ldi	r27, 0x3F	; 63
    23fc:	8d ab       	std	Y+53, r24	; 0x35
    23fe:	9e ab       	std	Y+54, r25	; 0x36
    2400:	af ab       	std	Y+55, r26	; 0x37
    2402:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6d a9       	ldd	r22, Y+53	; 0x35
    2406:	7e a9       	ldd	r23, Y+54	; 0x36
    2408:	8f a9       	ldd	r24, Y+55	; 0x37
    240a:	98 ad       	ldd	r25, Y+56	; 0x38
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a e7       	ldi	r20, 0x7A	; 122
    2412:	53 e4       	ldi	r21, 0x43	; 67
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	89 ab       	std	Y+49, r24	; 0x31
    241e:	9a ab       	std	Y+50, r25	; 0x32
    2420:	ab ab       	std	Y+51, r26	; 0x33
    2422:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2424:	69 a9       	ldd	r22, Y+49	; 0x31
    2426:	7a a9       	ldd	r23, Y+50	; 0x32
    2428:	8b a9       	ldd	r24, Y+51	; 0x33
    242a:	9c a9       	ldd	r25, Y+52	; 0x34
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <LCD_void_8Bit_Init+0x1a2>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	98 ab       	std	Y+48, r25	; 0x30
    2442:	8f a7       	std	Y+47, r24	; 0x2f
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <LCD_void_8Bit_Init+0x220>
	else if (__tmp > 65535)
    2446:	69 a9       	ldd	r22, Y+49	; 0x31
    2448:	7a a9       	ldd	r23, Y+50	; 0x32
    244a:	8b a9       	ldd	r24, Y+51	; 0x33
    244c:	9c a9       	ldd	r25, Y+52	; 0x34
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <LCD_void_8Bit_Init+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6d a9       	ldd	r22, Y+53	; 0x35
    2460:	7e a9       	ldd	r23, Y+54	; 0x36
    2462:	8f a9       	ldd	r24, Y+55	; 0x37
    2464:	98 ad       	ldd	r25, Y+56	; 0x38
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	98 ab       	std	Y+48, r25	; 0x30
    2484:	8f a7       	std	Y+47, r24	; 0x2f
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <LCD_void_8Bit_Init+0x202>
    2488:	89 e1       	ldi	r24, 0x19	; 25
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9e a7       	std	Y+46, r25	; 0x2e
    248e:	8d a7       	std	Y+45, r24	; 0x2d
    2490:	8d a5       	ldd	r24, Y+45	; 0x2d
    2492:	9e a5       	ldd	r25, Y+46	; 0x2e
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <LCD_void_8Bit_Init+0x1f0>
    2498:	9e a7       	std	Y+46, r25	; 0x2e
    249a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8f a5       	ldd	r24, Y+47	; 0x2f
    249e:	98 a9       	ldd	r25, Y+48	; 0x30
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	98 ab       	std	Y+48, r25	; 0x30
    24a4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a8:	98 a9       	ldd	r25, Y+48	; 0x30
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <LCD_void_8Bit_Init+0x1e4>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <LCD_void_8Bit_Init+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	69 a9       	ldd	r22, Y+49	; 0x31
    24b2:	7a a9       	ldd	r23, Y+50	; 0x32
    24b4:	8b a9       	ldd	r24, Y+51	; 0x33
    24b6:	9c a9       	ldd	r25, Y+52	; 0x34
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
    24c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c6:	98 a9       	ldd	r25, Y+48	; 0x30
    24c8:	9c a7       	std	Y+44, r25	; 0x2c
    24ca:	8b a7       	std	Y+43, r24	; 0x2b
    24cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <LCD_void_8Bit_Init+0x22c>
    24d4:	9c a7       	std	Y+44, r25	; 0x2c
    24d6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_void_8Bit_WriteCommand(LCD_DISPLAY_ON_OFF_CONTROL);
    24d8:	8f e0       	ldi	r24, 0x0F	; 15
    24da:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e8       	ldi	r26, 0x80	; 128
    24e4:	bf e3       	ldi	r27, 0x3F	; 63
    24e6:	8f a3       	std	Y+39, r24	; 0x27
    24e8:	98 a7       	std	Y+40, r25	; 0x28
    24ea:	a9 a7       	std	Y+41, r26	; 0x29
    24ec:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	6f a1       	ldd	r22, Y+39	; 0x27
    24f0:	78 a5       	ldd	r23, Y+40	; 0x28
    24f2:	89 a5       	ldd	r24, Y+41	; 0x29
    24f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a e7       	ldi	r20, 0x7A	; 122
    24fc:	53 e4       	ldi	r21, 0x43	; 67
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8b a3       	std	Y+35, r24	; 0x23
    2508:	9c a3       	std	Y+36, r25	; 0x24
    250a:	ad a3       	std	Y+37, r26	; 0x25
    250c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    250e:	6b a1       	ldd	r22, Y+35	; 0x23
    2510:	7c a1       	ldd	r23, Y+36	; 0x24
    2512:	8d a1       	ldd	r24, Y+37	; 0x25
    2514:	9e a1       	ldd	r25, Y+38	; 0x26
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <LCD_void_8Bit_Init+0x28c>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9a a3       	std	Y+34, r25	; 0x22
    252c:	89 a3       	std	Y+33, r24	; 0x21
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <LCD_void_8Bit_Init+0x30a>
	else if (__tmp > 65535)
    2530:	6b a1       	ldd	r22, Y+35	; 0x23
    2532:	7c a1       	ldd	r23, Y+36	; 0x24
    2534:	8d a1       	ldd	r24, Y+37	; 0x25
    2536:	9e a1       	ldd	r25, Y+38	; 0x26
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <LCD_void_8Bit_Init+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	6f a1       	ldd	r22, Y+39	; 0x27
    254a:	78 a5       	ldd	r23, Y+40	; 0x28
    254c:	89 a5       	ldd	r24, Y+41	; 0x29
    254e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9a a3       	std	Y+34, r25	; 0x22
    256e:	89 a3       	std	Y+33, r24	; 0x21
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <LCD_void_8Bit_Init+0x2ec>
    2572:	89 e1       	ldi	r24, 0x19	; 25
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	98 a3       	std	Y+32, r25	; 0x20
    2578:	8f 8f       	std	Y+31, r24	; 0x1f
    257a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    257c:	98 a1       	ldd	r25, Y+32	; 0x20
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_void_8Bit_Init+0x2da>
    2582:	98 a3       	std	Y+32, r25	; 0x20
    2584:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	89 a1       	ldd	r24, Y+33	; 0x21
    2588:	9a a1       	ldd	r25, Y+34	; 0x22
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9a a3       	std	Y+34, r25	; 0x22
    258e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	89 a1       	ldd	r24, Y+33	; 0x21
    2592:	9a a1       	ldd	r25, Y+34	; 0x22
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <LCD_void_8Bit_Init+0x2ce>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <LCD_void_8Bit_Init+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	6b a1       	ldd	r22, Y+35	; 0x23
    259c:	7c a1       	ldd	r23, Y+36	; 0x24
    259e:	8d a1       	ldd	r24, Y+37	; 0x25
    25a0:	9e a1       	ldd	r25, Y+38	; 0x26
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
    25ae:	89 a1       	ldd	r24, Y+33	; 0x21
    25b0:	9a a1       	ldd	r25, Y+34	; 0x22
    25b2:	9e 8f       	std	Y+30, r25	; 0x1e
    25b4:	8d 8f       	std	Y+29, r24	; 0x1d
    25b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_void_8Bit_Init+0x316>
    25be:	9e 8f       	std	Y+30, r25	; 0x1e
    25c0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_void_8Bit_WriteCommand(LCD_DISPLAY_CLEAR);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e4       	ldi	r27, 0x40	; 64
    25d0:	89 8f       	std	Y+25, r24	; 0x19
    25d2:	9a 8f       	std	Y+26, r25	; 0x1a
    25d4:	ab 8f       	std	Y+27, r26	; 0x1b
    25d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	69 8d       	ldd	r22, Y+25	; 0x19
    25da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	4a e7       	ldi	r20, 0x7A	; 122
    25e6:	53 e4       	ldi	r21, 0x43	; 67
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	8d 8b       	std	Y+21, r24	; 0x15
    25f2:	9e 8b       	std	Y+22, r25	; 0x16
    25f4:	af 8b       	std	Y+23, r26	; 0x17
    25f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25f8:	6d 89       	ldd	r22, Y+21	; 0x15
    25fa:	7e 89       	ldd	r23, Y+22	; 0x16
    25fc:	8f 89       	ldd	r24, Y+23	; 0x17
    25fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e8       	ldi	r20, 0x80	; 128
    2606:	5f e3       	ldi	r21, 0x3F	; 63
    2608:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260c:	88 23       	and	r24, r24
    260e:	2c f4       	brge	.+10     	; 0x261a <LCD_void_8Bit_Init+0x376>
		__ticks = 1;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	9c 8b       	std	Y+20, r25	; 0x14
    2616:	8b 8b       	std	Y+19, r24	; 0x13
    2618:	3f c0       	rjmp	.+126    	; 0x2698 <LCD_void_8Bit_Init+0x3f4>
	else if (__tmp > 65535)
    261a:	6d 89       	ldd	r22, Y+21	; 0x15
    261c:	7e 89       	ldd	r23, Y+22	; 0x16
    261e:	8f 89       	ldd	r24, Y+23	; 0x17
    2620:	98 8d       	ldd	r25, Y+24	; 0x18
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3f ef       	ldi	r19, 0xFF	; 255
    2626:	4f e7       	ldi	r20, 0x7F	; 127
    2628:	57 e4       	ldi	r21, 0x47	; 71
    262a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262e:	18 16       	cp	r1, r24
    2630:	4c f5       	brge	.+82     	; 0x2684 <LCD_void_8Bit_Init+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2632:	69 8d       	ldd	r22, Y+25	; 0x19
    2634:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2636:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2638:	9c 8d       	ldd	r25, Y+28	; 0x1c
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	bc 01       	movw	r22, r24
    264c:	cd 01       	movw	r24, r26
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9c 8b       	std	Y+20, r25	; 0x14
    2658:	8b 8b       	std	Y+19, r24	; 0x13
    265a:	0f c0       	rjmp	.+30     	; 0x267a <LCD_void_8Bit_Init+0x3d6>
    265c:	89 e1       	ldi	r24, 0x19	; 25
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	9a 8b       	std	Y+18, r25	; 0x12
    2662:	89 8b       	std	Y+17, r24	; 0x11
    2664:	89 89       	ldd	r24, Y+17	; 0x11
    2666:	9a 89       	ldd	r25, Y+18	; 0x12
    2668:	01 97       	sbiw	r24, 0x01	; 1
    266a:	f1 f7       	brne	.-4      	; 0x2668 <LCD_void_8Bit_Init+0x3c4>
    266c:	9a 8b       	std	Y+18, r25	; 0x12
    266e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2670:	8b 89       	ldd	r24, Y+19	; 0x13
    2672:	9c 89       	ldd	r25, Y+20	; 0x14
    2674:	01 97       	sbiw	r24, 0x01	; 1
    2676:	9c 8b       	std	Y+20, r25	; 0x14
    2678:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267a:	8b 89       	ldd	r24, Y+19	; 0x13
    267c:	9c 89       	ldd	r25, Y+20	; 0x14
    267e:	00 97       	sbiw	r24, 0x00	; 0
    2680:	69 f7       	brne	.-38     	; 0x265c <LCD_void_8Bit_Init+0x3b8>
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <LCD_void_8Bit_Init+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2684:	6d 89       	ldd	r22, Y+21	; 0x15
    2686:	7e 89       	ldd	r23, Y+22	; 0x16
    2688:	8f 89       	ldd	r24, Y+23	; 0x17
    268a:	98 8d       	ldd	r25, Y+24	; 0x18
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
    2698:	8b 89       	ldd	r24, Y+19	; 0x13
    269a:	9c 89       	ldd	r25, Y+20	; 0x14
    269c:	98 8b       	std	Y+16, r25	; 0x10
    269e:	8f 87       	std	Y+15, r24	; 0x0f
    26a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a2:	98 89       	ldd	r25, Y+16	; 0x10
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_void_8Bit_Init+0x400>
    26a8:	98 8b       	std	Y+16, r25	; 0x10
    26aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_void_8Bit_WriteCommand(LCD_ENTRY_MODE_SET);
    26ac:	86 e0       	ldi	r24, 0x06	; 6
    26ae:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e8       	ldi	r26, 0x80	; 128
    26b8:	bf e3       	ldi	r27, 0x3F	; 63
    26ba:	8b 87       	std	Y+11, r24	; 0x0b
    26bc:	9c 87       	std	Y+12, r25	; 0x0c
    26be:	ad 87       	std	Y+13, r26	; 0x0d
    26c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4a e7       	ldi	r20, 0x7A	; 122
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	8f 83       	std	Y+7, r24	; 0x07
    26dc:	98 87       	std	Y+8, r25	; 0x08
    26de:	a9 87       	std	Y+9, r26	; 0x09
    26e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26e2:	6f 81       	ldd	r22, Y+7	; 0x07
    26e4:	78 85       	ldd	r23, Y+8	; 0x08
    26e6:	89 85       	ldd	r24, Y+9	; 0x09
    26e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_void_8Bit_Init+0x460>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	3f c0       	rjmp	.+126    	; 0x2782 <LCD_void_8Bit_Init+0x4de>
	else if (__tmp > 65535)
    2704:	6f 81       	ldd	r22, Y+7	; 0x07
    2706:	78 85       	ldd	r23, Y+8	; 0x08
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	3f ef       	ldi	r19, 0xFF	; 255
    2710:	4f e7       	ldi	r20, 0x7F	; 127
    2712:	57 e4       	ldi	r21, 0x47	; 71
    2714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2718:	18 16       	cp	r1, r24
    271a:	4c f5       	brge	.+82     	; 0x276e <LCD_void_8Bit_Init+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    271c:	6b 85       	ldd	r22, Y+11	; 0x0b
    271e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2720:	8d 85       	ldd	r24, Y+13	; 0x0d
    2722:	9e 85       	ldd	r25, Y+14	; 0x0e
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e2       	ldi	r20, 0x20	; 32
    272a:	51 e4       	ldi	r21, 0x41	; 65
    272c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	bc 01       	movw	r22, r24
    2736:	cd 01       	movw	r24, r26
    2738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <LCD_void_8Bit_Init+0x4c0>
    2746:	89 e1       	ldi	r24, 0x19	; 25
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	8b 83       	std	Y+3, r24	; 0x03
    274e:	8b 81       	ldd	r24, Y+3	; 0x03
    2750:	9c 81       	ldd	r25, Y+4	; 0x04
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_void_8Bit_Init+0x4ae>
    2756:	9c 83       	std	Y+4, r25	; 0x04
    2758:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275a:	8d 81       	ldd	r24, Y+5	; 0x05
    275c:	9e 81       	ldd	r25, Y+6	; 0x06
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	69 f7       	brne	.-38     	; 0x2746 <LCD_void_8Bit_Init+0x4a2>
    276c:	14 c0       	rjmp	.+40     	; 0x2796 <LCD_void_8Bit_Init+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    276e:	6f 81       	ldd	r22, Y+7	; 0x07
    2770:	78 85       	ldd	r23, Y+8	; 0x08
    2772:	89 85       	ldd	r24, Y+9	; 0x09
    2774:	9a 85       	ldd	r25, Y+10	; 0x0a
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	8d 81       	ldd	r24, Y+5	; 0x05
    2784:	9e 81       	ldd	r25, Y+6	; 0x06
    2786:	9a 83       	std	Y+2, r25	; 0x02
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <LCD_void_8Bit_Init+0x4ea>
    2792:	9a 83       	std	Y+2, r25	; 0x02
    2794:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    2796:	ca 5b       	subi	r28, 0xBA	; 186
    2798:	df 4f       	sbci	r29, 0xFF	; 255
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	de bf       	out	0x3e, r29	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	cd bf       	out	0x3d, r28	; 61
    27a4:	cf 91       	pop	r28
    27a6:	df 91       	pop	r29
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	08 95       	ret

000027ae <LCD_void_8Bit_WriteCommand>:

void LCD_void_8Bit_WriteCommand(u8 Local_u8_command)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	6d 97       	sbiw	r28, 0x1d	; 29
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	8d 8f       	std	Y+29, r24	; 0x1d
	/* For instructions (Set RS pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_LOW);
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write operation (Set RW pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_LOW);
    27ce:	82 e0       	ldi	r24, 0x02	; 2
    27d0:	61 e0       	ldi	r22, 0x01	; 1
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write Command on Data port (D0 - D7) */
	DIO_enum_SetPortValue(LCD_DATA_PORT,Local_u8_command);
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    27dc:	0e 94 c5 0a 	call	0x158a	; 0x158a <DIO_enum_SetPortValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    27e0:	82 e0       	ldi	r24, 0x02	; 2
    27e2:	62 e0       	ldi	r22, 0x02	; 2
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e8       	ldi	r26, 0x80	; 128
    27f0:	bf e3       	ldi	r27, 0x3F	; 63
    27f2:	89 8f       	std	Y+25, r24	; 0x19
    27f4:	9a 8f       	std	Y+26, r25	; 0x1a
    27f6:	ab 8f       	std	Y+27, r26	; 0x1b
    27f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	69 8d       	ldd	r22, Y+25	; 0x19
    27fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2800:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e7       	ldi	r20, 0x7A	; 122
    2808:	53 e4       	ldi	r21, 0x43	; 67
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	8d 8b       	std	Y+21, r24	; 0x15
    2814:	9e 8b       	std	Y+22, r25	; 0x16
    2816:	af 8b       	std	Y+23, r26	; 0x17
    2818:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281a:	6d 89       	ldd	r22, Y+21	; 0x15
    281c:	7e 89       	ldd	r23, Y+22	; 0x16
    281e:	8f 89       	ldd	r24, Y+23	; 0x17
    2820:	98 8d       	ldd	r25, Y+24	; 0x18
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e8       	ldi	r20, 0x80	; 128
    2828:	5f e3       	ldi	r21, 0x3F	; 63
    282a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282e:	88 23       	and	r24, r24
    2830:	2c f4       	brge	.+10     	; 0x283c <LCD_void_8Bit_WriteCommand+0x8e>
		__ticks = 1;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	3f c0       	rjmp	.+126    	; 0x28ba <LCD_void_8Bit_WriteCommand+0x10c>
	else if (__tmp > 65535)
    283c:	6d 89       	ldd	r22, Y+21	; 0x15
    283e:	7e 89       	ldd	r23, Y+22	; 0x16
    2840:	8f 89       	ldd	r24, Y+23	; 0x17
    2842:	98 8d       	ldd	r25, Y+24	; 0x18
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	3f ef       	ldi	r19, 0xFF	; 255
    2848:	4f e7       	ldi	r20, 0x7F	; 127
    284a:	57 e4       	ldi	r21, 0x47	; 71
    284c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2850:	18 16       	cp	r1, r24
    2852:	4c f5       	brge	.+82     	; 0x28a6 <LCD_void_8Bit_WriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2854:	69 8d       	ldd	r22, Y+25	; 0x19
    2856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	40 e2       	ldi	r20, 0x20	; 32
    2862:	51 e4       	ldi	r21, 0x41	; 65
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	bc 01       	movw	r22, r24
    286e:	cd 01       	movw	r24, r26
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
    287c:	0f c0       	rjmp	.+30     	; 0x289c <LCD_void_8Bit_WriteCommand+0xee>
    287e:	89 e1       	ldi	r24, 0x19	; 25
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	9a 8b       	std	Y+18, r25	; 0x12
    2884:	89 8b       	std	Y+17, r24	; 0x11
    2886:	89 89       	ldd	r24, Y+17	; 0x11
    2888:	9a 89       	ldd	r25, Y+18	; 0x12
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	f1 f7       	brne	.-4      	; 0x288a <LCD_void_8Bit_WriteCommand+0xdc>
    288e:	9a 8b       	std	Y+18, r25	; 0x12
    2890:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2892:	8b 89       	ldd	r24, Y+19	; 0x13
    2894:	9c 89       	ldd	r25, Y+20	; 0x14
    2896:	01 97       	sbiw	r24, 0x01	; 1
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289c:	8b 89       	ldd	r24, Y+19	; 0x13
    289e:	9c 89       	ldd	r25, Y+20	; 0x14
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	69 f7       	brne	.-38     	; 0x287e <LCD_void_8Bit_WriteCommand+0xd0>
    28a4:	14 c0       	rjmp	.+40     	; 0x28ce <LCD_void_8Bit_WriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9c 8b       	std	Y+20, r25	; 0x14
    28b8:	8b 8b       	std	Y+19, r24	; 0x13
    28ba:	8b 89       	ldd	r24, Y+19	; 0x13
    28bc:	9c 89       	ldd	r25, Y+20	; 0x14
    28be:	98 8b       	std	Y+16, r25	; 0x10
    28c0:	8f 87       	std	Y+15, r24	; 0x0f
    28c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c4:	98 89       	ldd	r25, Y+16	; 0x10
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_void_8Bit_WriteCommand+0x118>
    28ca:	98 8b       	std	Y+16, r25	; 0x10
    28cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	62 e0       	ldi	r22, 0x02	; 2
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	8b 87       	std	Y+11, r24	; 0x0b
    28e2:	9c 87       	std	Y+12, r25	; 0x0c
    28e4:	ad 87       	std	Y+13, r26	; 0x0d
    28e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	4a e7       	ldi	r20, 0x7A	; 122
    28f6:	53 e4       	ldi	r21, 0x43	; 67
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	8f 83       	std	Y+7, r24	; 0x07
    2902:	98 87       	std	Y+8, r25	; 0x08
    2904:	a9 87       	std	Y+9, r26	; 0x09
    2906:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2908:	6f 81       	ldd	r22, Y+7	; 0x07
    290a:	78 85       	ldd	r23, Y+8	; 0x08
    290c:	89 85       	ldd	r24, Y+9	; 0x09
    290e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291c:	88 23       	and	r24, r24
    291e:	2c f4       	brge	.+10     	; 0x292a <LCD_void_8Bit_WriteCommand+0x17c>
		__ticks = 1;
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	3f c0       	rjmp	.+126    	; 0x29a8 <LCD_void_8Bit_WriteCommand+0x1fa>
	else if (__tmp > 65535)
    292a:	6f 81       	ldd	r22, Y+7	; 0x07
    292c:	78 85       	ldd	r23, Y+8	; 0x08
    292e:	89 85       	ldd	r24, Y+9	; 0x09
    2930:	9a 85       	ldd	r25, Y+10	; 0x0a
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	3f ef       	ldi	r19, 0xFF	; 255
    2936:	4f e7       	ldi	r20, 0x7F	; 127
    2938:	57 e4       	ldi	r21, 0x47	; 71
    293a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293e:	18 16       	cp	r1, r24
    2940:	4c f5       	brge	.+82     	; 0x2994 <LCD_void_8Bit_WriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e2       	ldi	r20, 0x20	; 32
    2950:	51 e4       	ldi	r21, 0x41	; 65
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	bc 01       	movw	r22, r24
    295c:	cd 01       	movw	r24, r26
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	9e 83       	std	Y+6, r25	; 0x06
    2968:	8d 83       	std	Y+5, r24	; 0x05
    296a:	0f c0       	rjmp	.+30     	; 0x298a <LCD_void_8Bit_WriteCommand+0x1dc>
    296c:	89 e1       	ldi	r24, 0x19	; 25
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	8b 81       	ldd	r24, Y+3	; 0x03
    2976:	9c 81       	ldd	r25, Y+4	; 0x04
    2978:	01 97       	sbiw	r24, 0x01	; 1
    297a:	f1 f7       	brne	.-4      	; 0x2978 <LCD_void_8Bit_WriteCommand+0x1ca>
    297c:	9c 83       	std	Y+4, r25	; 0x04
    297e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2980:	8d 81       	ldd	r24, Y+5	; 0x05
    2982:	9e 81       	ldd	r25, Y+6	; 0x06
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	69 f7       	brne	.-38     	; 0x296c <LCD_void_8Bit_WriteCommand+0x1be>
    2992:	14 c0       	rjmp	.+40     	; 0x29bc <LCD_void_8Bit_WriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	9a 83       	std	Y+2, r25	; 0x02
    29ae:	89 83       	std	Y+1, r24	; 0x01
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	01 97       	sbiw	r24, 0x01	; 1
    29b6:	f1 f7       	brne	.-4      	; 0x29b4 <LCD_void_8Bit_WriteCommand+0x206>
    29b8:	9a 83       	std	Y+2, r25	; 0x02
    29ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	62 e0       	ldi	r22, 0x02	; 2
    29c0:	41 e0       	ldi	r20, 0x01	; 1
    29c2:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>

}
    29c6:	6d 96       	adiw	r28, 0x1d	; 29
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	cf 91       	pop	r28
    29d4:	df 91       	pop	r29
    29d6:	08 95       	ret

000029d8 <LCD_void_8Bit_WriteCharacter>:

void LCD_void_8Bit_WriteCharacter(u8 Local_u8_Char)
{
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	6d 97       	sbiw	r28, 0x1d	; 29
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	8d 8f       	std	Y+29, r24	; 0x1d
	/* For Data (Set RS pin to High) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RS, DIO_PIN_HIGH);
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	60 e0       	ldi	r22, 0x00	; 0
    29f2:	41 e0       	ldi	r20, 0x01	; 1
    29f4:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write operation (Set RW pin to LOW) */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_RW, DIO_PIN_LOW);
    29f8:	82 e0       	ldi	r24, 0x02	; 2
    29fa:	61 e0       	ldi	r22, 0x01	; 1
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
	/* Write Command on Data port (D0 - D7) */
	DIO_enum_SetPortValue(LCD_DATA_PORT,Local_u8_Char);
    2a02:	82 e0       	ldi	r24, 0x02	; 2
    2a04:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2a06:	0e 94 c5 0a 	call	0x158a	; 0x158a <DIO_enum_SetPortValue>
	/* make falling edge on EN pin to enable Writing */
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    2a0a:	82 e0       	ldi	r24, 0x02	; 2
    2a0c:	62 e0       	ldi	r22, 0x02	; 2
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    2a14:	80 e0       	ldi	r24, 0x00	; 0
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	a0 e8       	ldi	r26, 0x80	; 128
    2a1a:	bf e3       	ldi	r27, 0x3F	; 63
    2a1c:	89 8f       	std	Y+25, r24	; 0x19
    2a1e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a20:	ab 8f       	std	Y+27, r26	; 0x1b
    2a22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a24:	69 8d       	ldd	r22, Y+25	; 0x19
    2a26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a2c:	20 e0       	ldi	r18, 0x00	; 0
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	4a e7       	ldi	r20, 0x7A	; 122
    2a32:	53 e4       	ldi	r21, 0x43	; 67
    2a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	8d 8b       	std	Y+21, r24	; 0x15
    2a3e:	9e 8b       	std	Y+22, r25	; 0x16
    2a40:	af 8b       	std	Y+23, r26	; 0x17
    2a42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a44:	6d 89       	ldd	r22, Y+21	; 0x15
    2a46:	7e 89       	ldd	r23, Y+22	; 0x16
    2a48:	8f 89       	ldd	r24, Y+23	; 0x17
    2a4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	30 e0       	ldi	r19, 0x00	; 0
    2a50:	40 e8       	ldi	r20, 0x80	; 128
    2a52:	5f e3       	ldi	r21, 0x3F	; 63
    2a54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a58:	88 23       	and	r24, r24
    2a5a:	2c f4       	brge	.+10     	; 0x2a66 <LCD_void_8Bit_WriteCharacter+0x8e>
		__ticks = 1;
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
    2a64:	3f c0       	rjmp	.+126    	; 0x2ae4 <LCD_void_8Bit_WriteCharacter+0x10c>
	else if (__tmp > 65535)
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	3f ef       	ldi	r19, 0xFF	; 255
    2a72:	4f e7       	ldi	r20, 0x7F	; 127
    2a74:	57 e4       	ldi	r21, 0x47	; 71
    2a76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a7a:	18 16       	cp	r1, r24
    2a7c:	4c f5       	brge	.+82     	; 0x2ad0 <LCD_void_8Bit_WriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9c 8b       	std	Y+20, r25	; 0x14
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <LCD_void_8Bit_WriteCharacter+0xee>
    2aa8:	89 e1       	ldi	r24, 0x19	; 25
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	9a 8b       	std	Y+18, r25	; 0x12
    2aae:	89 8b       	std	Y+17, r24	; 0x11
    2ab0:	89 89       	ldd	r24, Y+17	; 0x11
    2ab2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_void_8Bit_WriteCharacter+0xdc>
    2ab8:	9a 8b       	std	Y+18, r25	; 0x12
    2aba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8b 89       	ldd	r24, Y+19	; 0x13
    2abe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9c 8b       	std	Y+20, r25	; 0x14
    2ac4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <LCD_void_8Bit_WriteCharacter+0xd0>
    2ace:	14 c0       	rjmp	.+40     	; 0x2af8 <LCD_void_8Bit_WriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	9c 8b       	std	Y+20, r25	; 0x14
    2ae2:	8b 8b       	std	Y+19, r24	; 0x13
    2ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae8:	98 8b       	std	Y+16, r25	; 0x10
    2aea:	8f 87       	std	Y+15, r24	; 0x0f
    2aec:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aee:	98 89       	ldd	r25, Y+16	; 0x10
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <LCD_void_8Bit_WriteCharacter+0x118>
    2af4:	98 8b       	std	Y+16, r25	; 0x10
    2af6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_LOW);
    2af8:	82 e0       	ldi	r24, 0x02	; 2
    2afa:	62 e0       	ldi	r22, 0x02	; 2
    2afc:	40 e0       	ldi	r20, 0x00	; 0
    2afe:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	a0 e8       	ldi	r26, 0x80	; 128
    2b08:	bf e3       	ldi	r27, 0x3F	; 63
    2b0a:	8b 87       	std	Y+11, r24	; 0x0b
    2b0c:	9c 87       	std	Y+12, r25	; 0x0c
    2b0e:	ad 87       	std	Y+13, r26	; 0x0d
    2b10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4a e7       	ldi	r20, 0x7A	; 122
    2b20:	53 e4       	ldi	r21, 0x43	; 67
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	8f 83       	std	Y+7, r24	; 0x07
    2b2c:	98 87       	std	Y+8, r25	; 0x08
    2b2e:	a9 87       	std	Y+9, r26	; 0x09
    2b30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b32:	6f 81       	ldd	r22, Y+7	; 0x07
    2b34:	78 85       	ldd	r23, Y+8	; 0x08
    2b36:	89 85       	ldd	r24, Y+9	; 0x09
    2b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 e8       	ldi	r20, 0x80	; 128
    2b40:	5f e3       	ldi	r21, 0x3F	; 63
    2b42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b46:	88 23       	and	r24, r24
    2b48:	2c f4       	brge	.+10     	; 0x2b54 <LCD_void_8Bit_WriteCharacter+0x17c>
		__ticks = 1;
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9e 83       	std	Y+6, r25	; 0x06
    2b50:	8d 83       	std	Y+5, r24	; 0x05
    2b52:	3f c0       	rjmp	.+126    	; 0x2bd2 <LCD_void_8Bit_WriteCharacter+0x1fa>
	else if (__tmp > 65535)
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	3f ef       	ldi	r19, 0xFF	; 255
    2b60:	4f e7       	ldi	r20, 0x7F	; 127
    2b62:	57 e4       	ldi	r21, 0x47	; 71
    2b64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b68:	18 16       	cp	r1, r24
    2b6a:	4c f5       	brge	.+82     	; 0x2bbe <LCD_void_8Bit_WriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e2       	ldi	r20, 0x20	; 32
    2b7a:	51 e4       	ldi	r21, 0x41	; 65
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	9e 83       	std	Y+6, r25	; 0x06
    2b92:	8d 83       	std	Y+5, r24	; 0x05
    2b94:	0f c0       	rjmp	.+30     	; 0x2bb4 <LCD_void_8Bit_WriteCharacter+0x1dc>
    2b96:	89 e1       	ldi	r24, 0x19	; 25
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	9c 83       	std	Y+4, r25	; 0x04
    2b9c:	8b 83       	std	Y+3, r24	; 0x03
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_void_8Bit_WriteCharacter+0x1ca>
    2ba6:	9c 83       	std	Y+4, r25	; 0x04
    2ba8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bac:	9e 81       	ldd	r25, Y+6	; 0x06
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	9e 83       	std	Y+6, r25	; 0x06
    2bb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb8:	00 97       	sbiw	r24, 0x00	; 0
    2bba:	69 f7       	brne	.-38     	; 0x2b96 <LCD_void_8Bit_WriteCharacter+0x1be>
    2bbc:	14 c0       	rjmp	.+40     	; 0x2be6 <LCD_void_8Bit_WriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbe:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc0:	78 85       	ldd	r23, Y+8	; 0x08
    2bc2:	89 85       	ldd	r24, Y+9	; 0x09
    2bc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	9a 83       	std	Y+2, r25	; 0x02
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	f1 f7       	brne	.-4      	; 0x2bde <LCD_void_8Bit_WriteCharacter+0x206>
    2be2:	9a 83       	std	Y+2, r25	; 0x02
    2be4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enum_SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_PIN_HIGH);
    2be6:	82 e0       	ldi	r24, 0x02	; 2
    2be8:	62 e0       	ldi	r22, 0x02	; 2
    2bea:	41 e0       	ldi	r20, 0x01	; 1
    2bec:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
}
    2bf0:	6d 96       	adiw	r28, 0x1d	; 29
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	08 95       	ret

00002c02 <LCD_void_8Bit_WriteString>:

void LCD_void_8Bit_WriteString(u8 * Local_u8Ptr_ArrOfChar)
{
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <LCD_void_8Bit_WriteString+0x6>
    2c08:	0f 92       	push	r0
    2c0a:	cd b7       	in	r28, 0x3d	; 61
    2c0c:	de b7       	in	r29, 0x3e	; 62
    2c0e:	9b 83       	std	Y+3, r25	; 0x03
    2c10:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0;
    2c12:	19 82       	std	Y+1, r1	; 0x01
    2c14:	0e c0       	rjmp	.+28     	; 0x2c32 <LCD_void_8Bit_WriteString+0x30>
	while(Local_u8Ptr_ArrOfChar[Local_u8_Counter] != '\0')
	{
		LCD_void_8Bit_WriteCharacter(Local_u8Ptr_ArrOfChar[Local_u8_Counter]);
    2c16:	89 81       	ldd	r24, Y+1	; 0x01
    2c18:	28 2f       	mov	r18, r24
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c20:	fc 01       	movw	r30, r24
    2c22:	e2 0f       	add	r30, r18
    2c24:	f3 1f       	adc	r31, r19
    2c26:	80 81       	ld	r24, Z
    2c28:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_void_8Bit_WriteCharacter>
		Local_u8_Counter++;
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	8f 5f       	subi	r24, 0xFF	; 255
    2c30:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_void_8Bit_WriteString(u8 * Local_u8Ptr_ArrOfChar)
{
	u8 Local_u8_Counter = 0;
	while(Local_u8Ptr_ArrOfChar[Local_u8_Counter] != '\0')
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	28 2f       	mov	r18, r24
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	e2 0f       	add	r30, r18
    2c40:	f3 1f       	adc	r31, r19
    2c42:	80 81       	ld	r24, Z
    2c44:	88 23       	and	r24, r24
    2c46:	39 f7       	brne	.-50     	; 0x2c16 <LCD_void_8Bit_WriteString+0x14>
	{
		LCD_void_8Bit_WriteCharacter(Local_u8Ptr_ArrOfChar[Local_u8_Counter]);
		Local_u8_Counter++;
	}
}
    2c48:	0f 90       	pop	r0
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <LCD_void_8Bit_WriteCustomCharacter>:

void LCD_void_8Bit_WriteCustomCharacter(u8 * Local_u8_Char,  u8 Local_u8_CharNumber)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	00 d0       	rcall	.+0      	; 0x2c5a <LCD_void_8Bit_WriteCustomCharacter+0x6>
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <LCD_void_8Bit_WriteCustomCharacter+0x8>
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <LCD_void_8Bit_WriteCustomCharacter+0xa>
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	9d 83       	std	Y+5, r25	; 0x05
    2c64:	8c 83       	std	Y+4, r24	; 0x04
    2c66:	6e 83       	std	Y+6, r22	; 0x06
	/* calculate the CGRAM Address, each block consist of 8 bytes */
	u8 Local_u8_CGRAM_Address = Local_u8_CharNumber * 8;
    2c68:	8e 81       	ldd	r24, Y+6	; 0x06
    2c6a:	88 2f       	mov	r24, r24
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	88 0f       	add	r24, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	8b 83       	std	Y+3, r24	; 0x03
	/* to Access CGRAM, Set Bit 6 to one  */
	LCD_void_8Bit_WriteCommand(Local_u8_CGRAM_Address + LCD_CGRAM);
    2c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7e:	80 5c       	subi	r24, 0xC0	; 192
    2c80:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
	/* write data in CGRAM. CGRAM has 8 locations. each locations consist of 8 bytes.*/
	for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    2c84:	1a 82       	std	Y+2, r1	; 0x02
    2c86:	16 c0       	rjmp	.+44     	; 0x2cb4 <LCD_void_8Bit_WriteCustomCharacter+0x60>
	{
		for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    2c88:	19 82       	std	Y+1, r1	; 0x01
    2c8a:	0e c0       	rjmp	.+28     	; 0x2ca8 <LCD_void_8Bit_WriteCustomCharacter+0x54>
		{
			LCD_void_8Bit_WriteCharacter(Local_u8_Char[Local_u8_counter]);
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	8c 81       	ldd	r24, Y+4	; 0x04
    2c94:	9d 81       	ldd	r25, Y+5	; 0x05
    2c96:	fc 01       	movw	r30, r24
    2c98:	e2 0f       	add	r30, r18
    2c9a:	f3 1f       	adc	r31, r19
    2c9c:	80 81       	ld	r24, Z
    2c9e:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_void_8Bit_WriteCharacter>
	/* to Access CGRAM, Set Bit 6 to one  */
	LCD_void_8Bit_WriteCommand(Local_u8_CGRAM_Address + LCD_CGRAM);
	/* write data in CGRAM. CGRAM has 8 locations. each locations consist of 8 bytes.*/
	for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
	{
		for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    2ca2:	89 81       	ldd	r24, Y+1	; 0x01
    2ca4:	8f 5f       	subi	r24, 0xFF	; 255
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	88 30       	cpi	r24, 0x08	; 8
    2cac:	78 f3       	brcs	.-34     	; 0x2c8c <LCD_void_8Bit_WriteCustomCharacter+0x38>
	/* calculate the CGRAM Address, each block consist of 8 bytes */
	u8 Local_u8_CGRAM_Address = Local_u8_CharNumber * 8;
	/* to Access CGRAM, Set Bit 6 to one  */
	LCD_void_8Bit_WriteCommand(Local_u8_CGRAM_Address + LCD_CGRAM);
	/* write data in CGRAM. CGRAM has 8 locations. each locations consist of 8 bytes.*/
	for(u8 Local_u8_counter = 0; Local_u8_counter<8 ; Local_u8_counter++)
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	8f 5f       	subi	r24, 0xFF	; 255
    2cb2:	8a 83       	std	Y+2, r24	; 0x02
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	88 30       	cpi	r24, 0x08	; 8
    2cb8:	38 f3       	brcs	.-50     	; 0x2c88 <LCD_void_8Bit_WriteCustomCharacter+0x34>
			LCD_void_8Bit_WriteCharacter(Local_u8_Char[Local_u8_counter]);
		}

	}
	/* to access DDRAM */
	LCD_void_8Bit_WriteCommand(LCD_DDRAM);
    2cba:	80 e8       	ldi	r24, 0x80	; 128
    2cbc:	0e 94 d7 13 	call	0x27ae	; 0x27ae <LCD_void_8Bit_WriteCommand>
	/* Write the custom character,Send its location from 0 to 7*/
	LCD_void_8Bit_WriteCharacter(Local_u8_CharNumber);
    2cc0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc2:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <LCD_void_8Bit_WriteCharacter>
}
    2cc6:	26 96       	adiw	r28, 0x06	; 6
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <LCD_void_4Bit_Display_int>:

void LCD_void_4Bit_Display_int(s16 number)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	29 97       	sbiw	r28, 0x09	; 9
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	99 87       	std	Y+9, r25	; 0x09
    2cee:	88 87       	std	Y+8, r24	; 0x08
	u8 reserved[4];
	u8 LastDigit = 0;
    2cf0:	1b 82       	std	Y+3, r1	; 0x03
	u8 i = 0;
    2cf2:	1a 82       	std	Y+2, r1	; 0x02
	if(number < 0)
    2cf4:	88 85       	ldd	r24, Y+8	; 0x08
    2cf6:	99 85       	ldd	r25, Y+9	; 0x09
    2cf8:	99 23       	and	r25, r25
    2cfa:	54 f4       	brge	.+20     	; 0x2d10 <LCD_void_4Bit_Display_int+0x38>
	{
		LCD_void_4Bit_WriteCharacter('-');
    2cfc:	8d e2       	ldi	r24, 0x2D	; 45
    2cfe:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_void_4Bit_WriteCharacter>
		number *= -1;
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	99 85       	ldd	r25, Y+9	; 0x09
    2d06:	90 95       	com	r25
    2d08:	81 95       	neg	r24
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	99 87       	std	Y+9, r25	; 0x09
    2d0e:	88 87       	std	Y+8, r24	; 0x08
	}
	if (number == 0)
    2d10:	88 85       	ldd	r24, Y+8	; 0x08
    2d12:	99 85       	ldd	r25, Y+9	; 0x09
    2d14:	00 97       	sbiw	r24, 0x00	; 0
    2d16:	19 f5       	brne	.+70     	; 0x2d5e <LCD_void_4Bit_Display_int+0x86>
	{
		i = 1;
    2d18:	81 e0       	ldi	r24, 0x01	; 1
    2d1a:	8a 83       	std	Y+2, r24	; 0x02
		reserved[0] = 0;
    2d1c:	1c 82       	std	Y+4, r1	; 0x04
    2d1e:	1f c0       	rjmp	.+62     	; 0x2d5e <LCD_void_4Bit_Display_int+0x86>
	}
	while(number != 0)
	{
	LastDigit = number % 10;
    2d20:	88 85       	ldd	r24, Y+8	; 0x08
    2d22:	99 85       	ldd	r25, Y+9	; 0x09
    2d24:	2a e0       	ldi	r18, 0x0A	; 10
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	b9 01       	movw	r22, r18
    2d2a:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    2d2e:	8b 83       	std	Y+3, r24	; 0x03
	reserved[i] = LastDigit;
    2d30:	8a 81       	ldd	r24, Y+2	; 0x02
    2d32:	28 2f       	mov	r18, r24
    2d34:	30 e0       	ldi	r19, 0x00	; 0
    2d36:	ce 01       	movw	r24, r28
    2d38:	04 96       	adiw	r24, 0x04	; 4
    2d3a:	fc 01       	movw	r30, r24
    2d3c:	e2 0f       	add	r30, r18
    2d3e:	f3 1f       	adc	r31, r19
    2d40:	8b 81       	ldd	r24, Y+3	; 0x03
    2d42:	80 83       	st	Z, r24
	number /= 10;
    2d44:	88 85       	ldd	r24, Y+8	; 0x08
    2d46:	99 85       	ldd	r25, Y+9	; 0x09
    2d48:	2a e0       	ldi	r18, 0x0A	; 10
    2d4a:	30 e0       	ldi	r19, 0x00	; 0
    2d4c:	b9 01       	movw	r22, r18
    2d4e:	0e 94 58 1f 	call	0x3eb0	; 0x3eb0 <__divmodhi4>
    2d52:	cb 01       	movw	r24, r22
    2d54:	99 87       	std	Y+9, r25	; 0x09
    2d56:	88 87       	std	Y+8, r24	; 0x08
	i++;
    2d58:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	8a 83       	std	Y+2, r24	; 0x02
	if (number == 0)
	{
		i = 1;
		reserved[0] = 0;
	}
	while(number != 0)
    2d5e:	88 85       	ldd	r24, Y+8	; 0x08
    2d60:	99 85       	ldd	r25, Y+9	; 0x09
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	e9 f6       	brne	.-70     	; 0x2d20 <LCD_void_4Bit_Display_int+0x48>
	LastDigit = number % 10;
	reserved[i] = LastDigit;
	number /= 10;
	i++;
	}
	for(s8 j = (i - 1); j >= 0; j-- )
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	81 50       	subi	r24, 0x01	; 1
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	11 c0       	rjmp	.+34     	; 0x2d90 <LCD_void_4Bit_Display_int+0xb8>
	{
		LCD_void_4Bit_WriteCharacter(reserved[j]+'0');
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	28 2f       	mov	r18, r24
    2d72:	33 27       	eor	r19, r19
    2d74:	27 fd       	sbrc	r18, 7
    2d76:	30 95       	com	r19
    2d78:	ce 01       	movw	r24, r28
    2d7a:	04 96       	adiw	r24, 0x04	; 4
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	e2 0f       	add	r30, r18
    2d80:	f3 1f       	adc	r31, r19
    2d82:	80 81       	ld	r24, Z
    2d84:	80 5d       	subi	r24, 0xD0	; 208
    2d86:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_void_4Bit_WriteCharacter>
	LastDigit = number % 10;
	reserved[i] = LastDigit;
	number /= 10;
	i++;
	}
	for(s8 j = (i - 1); j >= 0; j-- )
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	81 50       	subi	r24, 0x01	; 1
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	88 23       	and	r24, r24
    2d94:	64 f7       	brge	.-40     	; 0x2d6e <LCD_void_4Bit_Display_int+0x96>
	{
		LCD_void_4Bit_WriteCharacter(reserved[j]+'0');
	}
}
    2d96:	29 96       	adiw	r28, 0x09	; 9
    2d98:	0f b6       	in	r0, 0x3f	; 63
    2d9a:	f8 94       	cli
    2d9c:	de bf       	out	0x3e, r29	; 62
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	cd bf       	out	0x3d, r28	; 61
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <LED_voidLEDInit>:
#include "DIO_Interface.h"

#include "LED_interface.h"

void LED_voidLEDInit(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin)
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	00 d0       	rcall	.+0      	; 0x2dae <LED_voidLEDInit+0x6>
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	89 83       	std	Y+1, r24	; 0x01
    2db4:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enum_SetPinDirection(Copy_u8LEDPort, Copy_u8LEDPin, DIO_PIN_OUTPUT);
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dba:	41 e0       	ldi	r20, 0x01	; 1
    2dbc:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
}
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <LED_voidTurnOn>:

void LED_voidTurnOn(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <LED_voidTurnOn+0x6>
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	89 83       	std	Y+1, r24	; 0x01
    2dd6:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enum_SetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, DIO_PIN_HIGH);
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	6a 81       	ldd	r22, Y+2	; 0x02
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <LED_voidTurnOff>:


void LED_voidTurnOff(u8 Copy_u8LEDPort, u8 Copy_u8LEDPin)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <LED_voidTurnOff+0x6>
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enum_SetPinValue(Copy_u8LEDPort, Copy_u8LEDPin, DIO_PIN_LOW);
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	6a 81       	ldd	r22, Y+2	; 0x02
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 4c 08 	call	0x1098	; 0x1098 <DIO_enum_SetPinValue>
}
    2e04:	0f 90       	pop	r0
    2e06:	0f 90       	pop	r0
    2e08:	cf 91       	pop	r28
    2e0a:	df 91       	pop	r29
    2e0c:	08 95       	ret

00002e0e <PIR_voidIRInit>:
#include "DIO_Interface.h"

#include "PIR_interface.h"

void PIR_voidIRInit(u8 Copy_u8PIRPort, u8 Copy_u8PIRPin)
{
    2e0e:	df 93       	push	r29
    2e10:	cf 93       	push	r28
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <PIR_voidIRInit+0x6>
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enum_SetPinDirection(Copy_u8PIRPort, Copy_u8PIRPin, DIO_PIN_INPUT);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	cf 91       	pop	r28
    2e2c:	df 91       	pop	r29
    2e2e:	08 95       	ret

00002e30 <PIR_voidGetIRValue>:

void PIR_voidGetIRValue(u8 Copy_u8PIRPort, u8 Copy_u8PIRPin, u8* Copy_pu8IRValue)
{
    2e30:	df 93       	push	r29
    2e32:	cf 93       	push	r28
    2e34:	00 d0       	rcall	.+0      	; 0x2e36 <PIR_voidGetIRValue+0x6>
    2e36:	00 d0       	rcall	.+0      	; 0x2e38 <PIR_voidGetIRValue+0x8>
    2e38:	cd b7       	in	r28, 0x3d	; 61
    2e3a:	de b7       	in	r29, 0x3e	; 62
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	6a 83       	std	Y+2, r22	; 0x02
    2e40:	5c 83       	std	Y+4, r21	; 0x04
    2e42:	4b 83       	std	Y+3, r20	; 0x03
	DIO_enum_GetPinValue(Copy_u8PIRPort, Copy_u8PIRPin, Copy_pu8IRValue);
    2e44:	2b 81       	ldd	r18, Y+3	; 0x03
    2e46:	3c 81       	ldd	r19, Y+4	; 0x04
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	6a 81       	ldd	r22, Y+2	; 0x02
    2e4c:	a9 01       	movw	r20, r18
    2e4e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <DIO_enum_GetPinValue>
}
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	cf 91       	pop	r28
    2e5c:	df 91       	pop	r29
    2e5e:	08 95       	ret

00002e60 <Servo_voidInit>:

#include "Servo_interface.h"
#include "Servo_config.h"

void Servo_voidInit()
{
    2e60:	df 93       	push	r29
    2e62:	cf 93       	push	r28
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
#if SERVO_CHANNEL == SERVO_CHANNEL_A
	DIO_enum_SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	65 e0       	ldi	r22, 0x05	; 5
    2e6c:	41 e0       	ldi	r20, 0x01	; 1
    2e6e:	0e 94 3a 07 	call	0xe74	; 0xe74 <DIO_enum_SetPinDirection>
	DIO_enum_SetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_OUTPUT);
#elif SERVO_CHANNEL == SERVO_CHANNEL_A_B
	DIO_enum_SetPinDirection(DIO_PORTD, DIO_PIN5, DIO_PIN_OUTPUT);
	DIO_enum_SetPinDirection(DIO_PORTD, DIO_PIN4, DIO_PIN_OUTPUT);
#endif
	Timer1_void_Init();
    2e72:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <Timer1_void_Init>
	Timer1_void_SetICR1_Reg(19999);
    2e76:	8f e1       	ldi	r24, 0x1F	; 31
    2e78:	9e e4       	ldi	r25, 0x4E	; 78
    2e7a:	0e 94 16 1c 	call	0x382c	; 0x382c <Timer1_void_SetICR1_Reg>
	Timer1_voidSetprescalerby8();
    2e7e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <Timer1_voidSetprescalerby8>
}
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <Servo_void_Operate>:
void Servo_void_Operate(u8 Local_u8Angel, u8 Copy_u8Channel)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <Servo_void_Operate+0x6>
    2e8e:	00 d0       	rcall	.+0      	; 0x2e90 <Servo_void_Operate+0x8>
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	8b 83       	std	Y+3, r24	; 0x03
    2e96:	6c 83       	std	Y+4, r22	; 0x04
	u16 Local_u16OCR1 = ((Local_u8Angel * 1000UL) / 180) + 999;
    2e98:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9a:	88 2f       	mov	r24, r24
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	28 ee       	ldi	r18, 0xE8	; 232
    2ea4:	33 e0       	ldi	r19, 0x03	; 3
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__mulsi3>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	24 eb       	ldi	r18, 0xB4	; 180
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	50 e0       	ldi	r21, 0x00	; 0
    2ebe:	bc 01       	movw	r22, r24
    2ec0:	cd 01       	movw	r24, r26
    2ec2:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <__udivmodsi4>
    2ec6:	da 01       	movw	r26, r20
    2ec8:	c9 01       	movw	r24, r18
    2eca:	89 51       	subi	r24, 0x19	; 25
    2ecc:	9c 4f       	sbci	r25, 0xFC	; 252
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
	Timer1_void_SetOCR1_Reg(Local_u16OCR1, Copy_u8Channel);
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	6c 81       	ldd	r22, Y+4	; 0x04
    2ed8:	0e 94 28 1c 	call	0x3850	; 0x3850 <Timer1_void_SetOCR1_Reg>
}
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	0f 90       	pop	r0
    2ee2:	0f 90       	pop	r0
    2ee4:	cf 91       	pop	r28
    2ee6:	df 91       	pop	r29
    2ee8:	08 95       	ret

00002eea <Timer0_void_Init>:

u32 GLOBAL_u32_NUM_OVF = 0;
u32 GLOBAL_u32_PRELOAD = 0;
static void (*Global_PF_Timer0)(void) = NULL;
void Timer0_void_Init()
{
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE == OVERFLOW_MODE
	/* Waveform Generation Mode */
	CLR_BIT(TIMER_TCCR0_u8_REG, TCCR0_WGM00);
    2ef2:	a3 e5       	ldi	r26, 0x53	; 83
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	e3 e5       	ldi	r30, 0x53	; 83
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	8f 7b       	andi	r24, 0xBF	; 191
    2efe:	8c 93       	st	X, r24
	CLR_BIT(TIMER_TCCR0_u8_REG, TCCR0_WGM01);
    2f00:	a3 e5       	ldi	r26, 0x53	; 83
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e3 e5       	ldi	r30, 0x53	; 83
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	87 7f       	andi	r24, 0xF7	; 247
    2f0c:	8c 93       	st	X, r24
	/* Peripheral Interrupt is enabled */
	SET_BIT(TIMER_TIMSK_u8_REG, TIMSK_TOIE0);
    2f0e:	a9 e5       	ldi	r26, 0x59	; 89
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e9 e5       	ldi	r30, 0x59	; 89
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	81 60       	ori	r24, 0x01	; 1
    2f1a:	8c 93       	st	X, r24
	SET_BIT(TIMER_TCCR0_u8_REG, TCCR0_COM00);
	SET_BIT(TIMER_TCCR0_u8_REG, TCCR0_COM01);
#endif

#endif
}
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <TIMER0_void_SetPrescaler>:

/* function to set prescaler */
void TIMER0_void_SetPrescaler()
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
#if  PRESCALAR == No_PRESCALING
	SET_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS00);
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS01);
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS02);
#elif PRESCALAR == DIVIDION_BY_8
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS00);
    2f2a:	a3 e5       	ldi	r26, 0x53	; 83
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	e3 e5       	ldi	r30, 0x53	; 83
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	8e 7f       	andi	r24, 0xFE	; 254
    2f36:	8c 93       	st	X, r24
	SET_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS01);
    2f38:	a3 e5       	ldi	r26, 0x53	; 83
    2f3a:	b0 e0       	ldi	r27, 0x00	; 0
    2f3c:	e3 e5       	ldi	r30, 0x53	; 83
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	80 81       	ld	r24, Z
    2f42:	82 60       	ori	r24, 0x02	; 2
    2f44:	8c 93       	st	X, r24
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS02);
    2f46:	a3 e5       	ldi	r26, 0x53	; 83
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	e3 e5       	ldi	r30, 0x53	; 83
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	80 81       	ld	r24, Z
    2f50:	8b 7f       	andi	r24, 0xFB	; 251
    2f52:	8c 93       	st	X, r24
	SET_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS00);
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS01);
	SET_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS02);

#endif
}
    2f54:	cf 91       	pop	r28
    2f56:	df 91       	pop	r29
    2f58:	08 95       	ret

00002f5a <TIMER0_void_StopTimer>:

void TIMER0_void_StopTimer()
{
    2f5a:	df 93       	push	r29
    2f5c:	cf 93       	push	r28
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS00);
    2f62:	a3 e5       	ldi	r26, 0x53	; 83
    2f64:	b0 e0       	ldi	r27, 0x00	; 0
    2f66:	e3 e5       	ldi	r30, 0x53	; 83
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	8e 7f       	andi	r24, 0xFE	; 254
    2f6e:	8c 93       	st	X, r24
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS01);
    2f70:	a3 e5       	ldi	r26, 0x53	; 83
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	e3 e5       	ldi	r30, 0x53	; 83
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	80 81       	ld	r24, Z
    2f7a:	8d 7f       	andi	r24, 0xFD	; 253
    2f7c:	8c 93       	st	X, r24
	CLR_BIT (TIMER_TCCR0_u8_REG, TCCR0_CS02);
    2f7e:	a3 e5       	ldi	r26, 0x53	; 83
    2f80:	b0 e0       	ldi	r27, 0x00	; 0
    2f82:	e3 e5       	ldi	r30, 0x53	; 83
    2f84:	f0 e0       	ldi	r31, 0x00	; 0
    2f86:	80 81       	ld	r24, Z
    2f88:	8b 7f       	andi	r24, 0xFB	; 251
    2f8a:	8c 93       	st	X, r24
}
    2f8c:	cf 91       	pop	r28
    2f8e:	df 91       	pop	r29
    2f90:	08 95       	ret

00002f92 <TIMER0_void_SetCompareValue>:

void TIMER0_void_SetCompareValue(u8 A_u8_CompareValue)
{
    2f92:	df 93       	push	r29
    2f94:	cf 93       	push	r28
    2f96:	0f 92       	push	r0
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	TIMER_OCR0_u8_REG = A_u8_CompareValue;
    2f9e:	ec e5       	ldi	r30, 0x5C	; 92
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	80 83       	st	Z, r24
}
    2fa6:	0f 90       	pop	r0
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <TIMER0_void_AsynchronousStartTimer>:

void TIMER0_void_AsynchronousStartTimer(f32 A_f32_TIME_ms, void (*TIMER0_PF_Function)(void))
{
    2fae:	ef 92       	push	r14
    2fb0:	ff 92       	push	r15
    2fb2:	0f 93       	push	r16
    2fb4:	1f 93       	push	r17
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	6e 97       	sbiw	r28, 0x1e	; 30
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	69 8f       	std	Y+25, r22	; 0x19
    2fcc:	7a 8f       	std	Y+26, r23	; 0x1a
    2fce:	8b 8f       	std	Y+27, r24	; 0x1b
    2fd0:	9c 8f       	std	Y+28, r25	; 0x1c
    2fd2:	5e 8f       	std	Y+30, r21	; 0x1e
    2fd4:	4d 8f       	std	Y+29, r20	; 0x1d
#if TIMER0_MODE == OVERFLOW_MODE
	/* set the function address to callback */
	Global_PF_Timer0 = TIMER0_PF_Function;
    2fd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fda:	90 93 b5 01 	sts	0x01B5, r25
    2fde:	80 93 b4 01 	sts	0x01B4, r24
	/* Convert the number to microsec. */
	f32 Local_f32_TIME_US = A_f32_TIME_ms * 1000;
    2fe2:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fe6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fea:	20 e0       	ldi	r18, 0x00	; 0
    2fec:	30 e0       	ldi	r19, 0x00	; 0
    2fee:	4a e7       	ldi	r20, 0x7A	; 122
    2ff0:	54 e4       	ldi	r21, 0x44	; 68
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	8d 8b       	std	Y+21, r24	; 0x15
    2ffc:	9e 8b       	std	Y+22, r25	; 0x16
    2ffe:	af 8b       	std	Y+23, r26	; 0x17
    3000:	b8 8f       	std	Y+24, r27	; 0x18
	/* get the tick time in microsec. */
	f32 Local_f32_TICK_TIME = (f32)PRESCALAR  / SYSTEM_CLCK;
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	a0 e8       	ldi	r26, 0x80	; 128
    3008:	bf e3       	ldi	r27, 0x3F	; 63
    300a:	89 8b       	std	Y+17, r24	; 0x11
    300c:	9a 8b       	std	Y+18, r25	; 0x12
    300e:	ab 8b       	std	Y+19, r26	; 0x13
    3010:	bc 8b       	std	Y+20, r27	; 0x14
	/* over flow time. */
	f32 Local_f32_OVF_TIME = Local_f32_TICK_TIME * RESOLUTION;
    3012:	69 89       	ldd	r22, Y+17	; 0x11
    3014:	7a 89       	ldd	r23, Y+18	; 0x12
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	53 e4       	ldi	r21, 0x43	; 67
    3022:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	8d 87       	std	Y+13, r24	; 0x0d
    302c:	9e 87       	std	Y+14, r25	; 0x0e
    302e:	af 87       	std	Y+15, r26	; 0x0f
    3030:	b8 8b       	std	Y+16, r27	; 0x10
	/* no. of over flow.  */
	f32 Local_f32_NUM_OVF = Local_f32_TIME_US / Local_f32_OVF_TIME;
    3032:	6d 89       	ldd	r22, Y+21	; 0x15
    3034:	7e 89       	ldd	r23, Y+22	; 0x16
    3036:	8f 89       	ldd	r24, Y+23	; 0x17
    3038:	98 8d       	ldd	r25, Y+24	; 0x18
    303a:	2d 85       	ldd	r18, Y+13	; 0x0d
    303c:	3e 85       	ldd	r19, Y+14	; 0x0e
    303e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3040:	58 89       	ldd	r21, Y+16	; 0x10
    3042:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	89 87       	std	Y+9, r24	; 0x09
    304c:	9a 87       	std	Y+10, r25	; 0x0a
    304e:	ab 87       	std	Y+11, r26	; 0x0b
    3050:	bc 87       	std	Y+12, r27	; 0x0c
	GLOBAL_u32_NUM_OVF = Local_f32_NUM_OVF;
    3052:	69 85       	ldd	r22, Y+9	; 0x09
    3054:	7a 85       	ldd	r23, Y+10	; 0x0a
    3056:	8b 85       	ldd	r24, Y+11	; 0x0b
    3058:	9c 85       	ldd	r25, Y+12	; 0x0c
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	80 93 ac 01 	sts	0x01AC, r24
    3066:	90 93 ad 01 	sts	0x01AD, r25
    306a:	a0 93 ae 01 	sts	0x01AE, r26
    306e:	b0 93 af 01 	sts	0x01AF, r27
	/* preload fraction. */
	f32 Local_f32_Preload_Fraction = Local_f32_NUM_OVF - GLOBAL_u32_NUM_OVF;
    3072:	80 91 ac 01 	lds	r24, 0x01AC
    3076:	90 91 ad 01 	lds	r25, 0x01AD
    307a:	a0 91 ae 01 	lds	r26, 0x01AE
    307e:	b0 91 af 01 	lds	r27, 0x01AF
    3082:	bc 01       	movw	r22, r24
    3084:	cd 01       	movw	r24, r26
    3086:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    308a:	9b 01       	movw	r18, r22
    308c:	ac 01       	movw	r20, r24
    308e:	69 85       	ldd	r22, Y+9	; 0x09
    3090:	7a 85       	ldd	r23, Y+10	; 0x0a
    3092:	8b 85       	ldd	r24, Y+11	; 0x0b
    3094:	9c 85       	ldd	r25, Y+12	; 0x0c
    3096:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	9e 83       	std	Y+6, r25	; 0x06
    30a2:	af 83       	std	Y+7, r26	; 0x07
    30a4:	b8 87       	std	Y+8, r27	; 0x08
	/* the part of resolution needed for the fraction of desired time. */
	u32 FRACTION_TICKS = Local_f32_Preload_Fraction * RESOLUTION;
    30a6:	6d 81       	ldd	r22, Y+5	; 0x05
    30a8:	7e 81       	ldd	r23, Y+6	; 0x06
    30aa:	8f 81       	ldd	r24, Y+7	; 0x07
    30ac:	98 85       	ldd	r25, Y+8	; 0x08
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e8       	ldi	r20, 0x80	; 128
    30b4:	53 e4       	ldi	r21, 0x43	; 67
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	9a 83       	std	Y+2, r25	; 0x02
    30ce:	ab 83       	std	Y+3, r26	; 0x03
    30d0:	bc 83       	std	Y+4, r27	; 0x04
	/* the preload that the system will start count from it. */
	GLOBAL_u32_PRELOAD = RESOLUTION - FRACTION_TICKS;
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	31 e0       	ldi	r19, 0x01	; 1
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	89 81       	ldd	r24, Y+1	; 0x01
    30dc:	9a 81       	ldd	r25, Y+2	; 0x02
    30de:	ab 81       	ldd	r26, Y+3	; 0x03
    30e0:	bc 81       	ldd	r27, Y+4	; 0x04
    30e2:	79 01       	movw	r14, r18
    30e4:	8a 01       	movw	r16, r20
    30e6:	e8 1a       	sub	r14, r24
    30e8:	f9 0a       	sbc	r15, r25
    30ea:	0a 0b       	sbc	r16, r26
    30ec:	1b 0b       	sbc	r17, r27
    30ee:	d8 01       	movw	r26, r16
    30f0:	c7 01       	movw	r24, r14
    30f2:	80 93 b0 01 	sts	0x01B0, r24
    30f6:	90 93 b1 01 	sts	0x01B1, r25
    30fa:	a0 93 b2 01 	sts	0x01B2, r26
    30fe:	b0 93 b3 01 	sts	0x01B3, r27
	/* set the clock to start the timer */
	TIMER0_void_SetPrescaler();
    3102:	0e 94 91 17 	call	0x2f22	; 0x2f22 <TIMER0_void_SetPrescaler>
	GLOBAL_u32_PRELOAD = RESOLUTION - FRACTION_TICKS;
	/* set the clock to start the timer */
	TIMER0_void_SetPrescaler();
#endif

}
    3106:	6e 96       	adiw	r28, 0x1e	; 30
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	f8 94       	cli
    310c:	de bf       	out	0x3e, r29	; 62
    310e:	0f be       	out	0x3f, r0	; 63
    3110:	cd bf       	out	0x3d, r28	; 61
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	1f 91       	pop	r17
    3118:	0f 91       	pop	r16
    311a:	ff 90       	pop	r15
    311c:	ef 90       	pop	r14
    311e:	08 95       	ret

00003120 <TIMER0_void_BusyWaitStartTimer>:


void TIMER0_void_BusyWaitStartTimer(f32 A_f32_TIME_ms)
{
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	a0 97       	sbiw	r28, 0x20	; 32
    3132:	0f b6       	in	r0, 0x3f	; 63
    3134:	f8 94       	cli
    3136:	de bf       	out	0x3e, r29	; 62
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	cd bf       	out	0x3d, r28	; 61
    313c:	6d 8f       	std	Y+29, r22	; 0x1d
    313e:	7e 8f       	std	Y+30, r23	; 0x1e
    3140:	8f 8f       	std	Y+31, r24	; 0x1f
    3142:	98 a3       	std	Y+32, r25	; 0x20
#if TIMER0_MODE == OVERFLOW_MODE
	/* Peripheral Interrupt is disabled */
	CLR_BIT(TIMER_TIMSK_u8_REG, TIMSK_TOIE0);
    3144:	a9 e5       	ldi	r26, 0x59	; 89
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e9 e5       	ldi	r30, 0x59	; 89
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	8e 7f       	andi	r24, 0xFE	; 254
    3150:	8c 93       	st	X, r24
	/* Convert the number to microsec. */
	f32 Local_f32_TIME_US = A_f32_TIME_ms * 1000;
    3152:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3154:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3156:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3158:	98 a1       	ldd	r25, Y+32	; 0x20
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	54 e4       	ldi	r21, 0x44	; 68
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	89 8f       	std	Y+25, r24	; 0x19
    316c:	9a 8f       	std	Y+26, r25	; 0x1a
    316e:	ab 8f       	std	Y+27, r26	; 0x1b
    3170:	bc 8f       	std	Y+28, r27	; 0x1c
	/* get the tick time in microsec. */
	f32 Local_f32_TICK_TIME = (f32)PRESCALAR  / SYSTEM_CLCK;
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	a0 e8       	ldi	r26, 0x80	; 128
    3178:	bf e3       	ldi	r27, 0x3F	; 63
    317a:	8d 8b       	std	Y+21, r24	; 0x15
    317c:	9e 8b       	std	Y+22, r25	; 0x16
    317e:	af 8b       	std	Y+23, r26	; 0x17
    3180:	b8 8f       	std	Y+24, r27	; 0x18
	/* over flow time. */
	f32 Local_f32_OVF_TIME = Local_f32_TICK_TIME * RESOLUTION;
    3182:	6d 89       	ldd	r22, Y+21	; 0x15
    3184:	7e 89       	ldd	r23, Y+22	; 0x16
    3186:	8f 89       	ldd	r24, Y+23	; 0x17
    3188:	98 8d       	ldd	r25, Y+24	; 0x18
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	40 e8       	ldi	r20, 0x80	; 128
    3190:	53 e4       	ldi	r21, 0x43	; 67
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	89 8b       	std	Y+17, r24	; 0x11
    319c:	9a 8b       	std	Y+18, r25	; 0x12
    319e:	ab 8b       	std	Y+19, r26	; 0x13
    31a0:	bc 8b       	std	Y+20, r27	; 0x14
	/* no. of over flow.  */
	f32 Local_f32_NUM_OVF = Local_f32_TIME_US / Local_f32_OVF_TIME;
    31a2:	69 8d       	ldd	r22, Y+25	; 0x19
    31a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31aa:	29 89       	ldd	r18, Y+17	; 0x11
    31ac:	3a 89       	ldd	r19, Y+18	; 0x12
    31ae:	4b 89       	ldd	r20, Y+19	; 0x13
    31b0:	5c 89       	ldd	r21, Y+20	; 0x14
    31b2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	8d 87       	std	Y+13, r24	; 0x0d
    31bc:	9e 87       	std	Y+14, r25	; 0x0e
    31be:	af 87       	std	Y+15, r26	; 0x0f
    31c0:	b8 8b       	std	Y+16, r27	; 0x10
	GLOBAL_u32_NUM_OVF = Local_f32_NUM_OVF;
    31c2:	6d 85       	ldd	r22, Y+13	; 0x0d
    31c4:	7e 85       	ldd	r23, Y+14	; 0x0e
    31c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c8:	98 89       	ldd	r25, Y+16	; 0x10
    31ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	80 93 ac 01 	sts	0x01AC, r24
    31d6:	90 93 ad 01 	sts	0x01AD, r25
    31da:	a0 93 ae 01 	sts	0x01AE, r26
    31de:	b0 93 af 01 	sts	0x01AF, r27
	/* preload fraction. */
	f32 Local_f32_Preload_Fraction = Local_f32_NUM_OVF - GLOBAL_u32_NUM_OVF;
    31e2:	80 91 ac 01 	lds	r24, 0x01AC
    31e6:	90 91 ad 01 	lds	r25, 0x01AD
    31ea:	a0 91 ae 01 	lds	r26, 0x01AE
    31ee:	b0 91 af 01 	lds	r27, 0x01AF
    31f2:	bc 01       	movw	r22, r24
    31f4:	cd 01       	movw	r24, r26
    31f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    31fa:	9b 01       	movw	r18, r22
    31fc:	ac 01       	movw	r20, r24
    31fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    3200:	7e 85       	ldd	r23, Y+14	; 0x0e
    3202:	8f 85       	ldd	r24, Y+15	; 0x0f
    3204:	98 89       	ldd	r25, Y+16	; 0x10
    3206:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	89 87       	std	Y+9, r24	; 0x09
    3210:	9a 87       	std	Y+10, r25	; 0x0a
    3212:	ab 87       	std	Y+11, r26	; 0x0b
    3214:	bc 87       	std	Y+12, r27	; 0x0c
	/* the part of resolution needed for the fraction of desired time. */
	u32 FRACTION_TICKS = Local_f32_Preload_Fraction * RESOLUTION;
    3216:	69 85       	ldd	r22, Y+9	; 0x09
    3218:	7a 85       	ldd	r23, Y+10	; 0x0a
    321a:	8b 85       	ldd	r24, Y+11	; 0x0b
    321c:	9c 85       	ldd	r25, Y+12	; 0x0c
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	40 e8       	ldi	r20, 0x80	; 128
    3224:	53 e4       	ldi	r21, 0x43	; 67
    3226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	bc 01       	movw	r22, r24
    3230:	cd 01       	movw	r24, r26
    3232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3236:	dc 01       	movw	r26, r24
    3238:	cb 01       	movw	r24, r22
    323a:	8d 83       	std	Y+5, r24	; 0x05
    323c:	9e 83       	std	Y+6, r25	; 0x06
    323e:	af 83       	std	Y+7, r26	; 0x07
    3240:	b8 87       	std	Y+8, r27	; 0x08
	/* the preload that the system will start count from it. */
	GLOBAL_u32_PRELOAD = RESOLUTION - FRACTION_TICKS;
    3242:	20 e0       	ldi	r18, 0x00	; 0
    3244:	31 e0       	ldi	r19, 0x01	; 1
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	50 e0       	ldi	r21, 0x00	; 0
    324a:	8d 81       	ldd	r24, Y+5	; 0x05
    324c:	9e 81       	ldd	r25, Y+6	; 0x06
    324e:	af 81       	ldd	r26, Y+7	; 0x07
    3250:	b8 85       	ldd	r27, Y+8	; 0x08
    3252:	79 01       	movw	r14, r18
    3254:	8a 01       	movw	r16, r20
    3256:	e8 1a       	sub	r14, r24
    3258:	f9 0a       	sbc	r15, r25
    325a:	0a 0b       	sbc	r16, r26
    325c:	1b 0b       	sbc	r17, r27
    325e:	d8 01       	movw	r26, r16
    3260:	c7 01       	movw	r24, r14
    3262:	80 93 b0 01 	sts	0x01B0, r24
    3266:	90 93 b1 01 	sts	0x01B1, r25
    326a:	a0 93 b2 01 	sts	0x01B2, r26
    326e:	b0 93 b3 01 	sts	0x01B3, r27
	/* set the clock to start the timer */
	TIMER0_void_SetPrescaler();
    3272:	0e 94 91 17 	call	0x2f22	; 0x2f22 <TIMER0_void_SetPrescaler>
	
	/*Busy wait until the flag is rised */
	u32 Local_u32_Counter = 0;
    3276:	19 82       	std	Y+1, r1	; 0x01
    3278:	1a 82       	std	Y+2, r1	; 0x02
    327a:	1b 82       	std	Y+3, r1	; 0x03
    327c:	1c 82       	std	Y+4, r1	; 0x04
    327e:	1b c0       	rjmp	.+54     	; 0x32b6 <TIMER0_void_BusyWaitStartTimer+0x196>
	while(Local_u32_Counter < GLOBAL_u32_NUM_OVF)
	{
		while(GET_BIT(TIMER_TIFR_u8_REG,TIFR_TOV0) == 0);
    3280:	e8 e5       	ldi	r30, 0x58	; 88
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	88 2f       	mov	r24, r24
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	81 70       	andi	r24, 0x01	; 1
    328c:	90 70       	andi	r25, 0x00	; 0
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	b9 f3       	breq	.-18     	; 0x3280 <TIMER0_void_BusyWaitStartTimer+0x160>
		Local_u32_Counter++;
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	9a 81       	ldd	r25, Y+2	; 0x02
    3296:	ab 81       	ldd	r26, Y+3	; 0x03
    3298:	bc 81       	ldd	r27, Y+4	; 0x04
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	a1 1d       	adc	r26, r1
    329e:	b1 1d       	adc	r27, r1
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	ab 83       	std	Y+3, r26	; 0x03
    32a6:	bc 83       	std	Y+4, r27	; 0x04
		SET_BIT(TIMER_TIFR_u8_REG,TIFR_TOV0);
    32a8:	a8 e5       	ldi	r26, 0x58	; 88
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	e8 e5       	ldi	r30, 0x58	; 88
    32ae:	f0 e0       	ldi	r31, 0x00	; 0
    32b0:	80 81       	ld	r24, Z
    32b2:	81 60       	ori	r24, 0x01	; 1
    32b4:	8c 93       	st	X, r24
	/* set the clock to start the timer */
	TIMER0_void_SetPrescaler();
	
	/*Busy wait until the flag is rised */
	u32 Local_u32_Counter = 0;
	while(Local_u32_Counter < GLOBAL_u32_NUM_OVF)
    32b6:	20 91 ac 01 	lds	r18, 0x01AC
    32ba:	30 91 ad 01 	lds	r19, 0x01AD
    32be:	40 91 ae 01 	lds	r20, 0x01AE
    32c2:	50 91 af 01 	lds	r21, 0x01AF
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	ab 81       	ldd	r26, Y+3	; 0x03
    32cc:	bc 81       	ldd	r27, Y+4	; 0x04
    32ce:	82 17       	cp	r24, r18
    32d0:	93 07       	cpc	r25, r19
    32d2:	a4 07       	cpc	r26, r20
    32d4:	b5 07       	cpc	r27, r21
    32d6:	a0 f2       	brcs	.-88     	; 0x3280 <TIMER0_void_BusyWaitStartTimer+0x160>
		while(GET_BIT(TIMER_TIFR_u8_REG,TIFR_TOV0) == 0);
		Local_u32_Counter++;
		SET_BIT(TIMER_TIFR_u8_REG,TIFR_TOV0);
	}
	/* Stop timer */
	TIMER0_void_StopTimer();
    32d8:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <TIMER0_void_StopTimer>
	}
	/* Stop timer */
	TIMER0_void_StopTimer();
#endif

}
    32dc:	a0 96       	adiw	r28, 0x20	; 32
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	ff 90       	pop	r15
    32f2:	ef 90       	pop	r14
    32f4:	08 95       	ret

000032f6 <TIMER0_void_SetPWM>:



void TIMER0_void_SetPWM(u32 Duty_Cycle)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <TIMER0_void_SetPWM+0x6>
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <TIMER0_void_SetPWM+0x8>
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62
    3302:	69 83       	std	Y+1, r22	; 0x01
    3304:	7a 83       	std	Y+2, r23	; 0x02
    3306:	8b 83       	std	Y+3, r24	; 0x03
    3308:	9c 83       	std	Y+4, r25	; 0x04
	TIMER_OCR0_u8_REG = (u8) ((RESOLUTION - 1) - (((f32)Duty_Cycle / 100.0) * (RESOLUTION - 1)));
#endif
	//#elif TIMER0_MODE == PHASE_CORRECT_MODE
	TIMER0_void_SetPrescaler();
#endif
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	08 95       	ret

00003318 <__vector_11>:

#if TIMER0_MODE == OVERFLOW_MODE
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    3318:	1f 92       	push	r1
    331a:	0f 92       	push	r0
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	0f 92       	push	r0
    3320:	11 24       	eor	r1, r1
    3322:	2f 93       	push	r18
    3324:	3f 93       	push	r19
    3326:	4f 93       	push	r20
    3328:	5f 93       	push	r21
    332a:	6f 93       	push	r22
    332c:	7f 93       	push	r23
    332e:	8f 93       	push	r24
    3330:	9f 93       	push	r25
    3332:	af 93       	push	r26
    3334:	bf 93       	push	r27
    3336:	ef 93       	push	r30
    3338:	ff 93       	push	r31
    333a:	df 93       	push	r29
    333c:	cf 93       	push	r28
    333e:	cd b7       	in	r28, 0x3d	; 61
    3340:	de b7       	in	r29, 0x3e	; 62
	static u32 local_u32_Counter = 0;
	local_u32_Counter++;
    3342:	80 91 b6 01 	lds	r24, 0x01B6
    3346:	90 91 b7 01 	lds	r25, 0x01B7
    334a:	a0 91 b8 01 	lds	r26, 0x01B8
    334e:	b0 91 b9 01 	lds	r27, 0x01B9
    3352:	01 96       	adiw	r24, 0x01	; 1
    3354:	a1 1d       	adc	r26, r1
    3356:	b1 1d       	adc	r27, r1
    3358:	80 93 b6 01 	sts	0x01B6, r24
    335c:	90 93 b7 01 	sts	0x01B7, r25
    3360:	a0 93 b8 01 	sts	0x01B8, r26
    3364:	b0 93 b9 01 	sts	0x01B9, r27

	if (local_u32_Counter == GLOBAL_u32_NUM_OVF)
    3368:	20 91 b6 01 	lds	r18, 0x01B6
    336c:	30 91 b7 01 	lds	r19, 0x01B7
    3370:	40 91 b8 01 	lds	r20, 0x01B8
    3374:	50 91 b9 01 	lds	r21, 0x01B9
    3378:	80 91 ac 01 	lds	r24, 0x01AC
    337c:	90 91 ad 01 	lds	r25, 0x01AD
    3380:	a0 91 ae 01 	lds	r26, 0x01AE
    3384:	b0 91 af 01 	lds	r27, 0x01AF
    3388:	28 17       	cp	r18, r24
    338a:	39 07       	cpc	r19, r25
    338c:	4a 07       	cpc	r20, r26
    338e:	5b 07       	cpc	r21, r27
    3390:	f1 f4       	brne	.+60     	; 0x33ce <__vector_11+0xb6>
	{
		/*reset the system*/
		local_u32_Counter = 0;
    3392:	10 92 b6 01 	sts	0x01B6, r1
    3396:	10 92 b7 01 	sts	0x01B7, r1
    339a:	10 92 b8 01 	sts	0x01B8, r1
    339e:	10 92 b9 01 	sts	0x01B9, r1
		TIMER_TCNT0_u8_REG = GLOBAL_u32_PRELOAD;
    33a2:	e2 e5       	ldi	r30, 0x52	; 82
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 91 b0 01 	lds	r24, 0x01B0
    33aa:	90 91 b1 01 	lds	r25, 0x01B1
    33ae:	a0 91 b2 01 	lds	r26, 0x01B2
    33b2:	b0 91 b3 01 	lds	r27, 0x01B3
    33b6:	80 83       	st	Z, r24
		if(Global_PF_Timer0 != NULL)
    33b8:	80 91 b4 01 	lds	r24, 0x01B4
    33bc:	90 91 b5 01 	lds	r25, 0x01B5
    33c0:	00 97       	sbiw	r24, 0x00	; 0
    33c2:	29 f0       	breq	.+10     	; 0x33ce <__vector_11+0xb6>
		{
			Global_PF_Timer0();
    33c4:	e0 91 b4 01 	lds	r30, 0x01B4
    33c8:	f0 91 b5 01 	lds	r31, 0x01B5
    33cc:	09 95       	icall
		}
	}
}
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	ff 91       	pop	r31
    33d4:	ef 91       	pop	r30
    33d6:	bf 91       	pop	r27
    33d8:	af 91       	pop	r26
    33da:	9f 91       	pop	r25
    33dc:	8f 91       	pop	r24
    33de:	7f 91       	pop	r23
    33e0:	6f 91       	pop	r22
    33e2:	5f 91       	pop	r21
    33e4:	4f 91       	pop	r20
    33e6:	3f 91       	pop	r19
    33e8:	2f 91       	pop	r18
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0
    33f0:	1f 90       	pop	r1
    33f2:	18 95       	reti

000033f4 <Timer1_void_Init>:
#include "Timer1_private.h"
#include "Timer1_config.h"


void Timer1_void_Init()
{
    33f4:	df 93       	push	r29
    33f6:	cf 93       	push	r28
    33f8:	cd b7       	in	r28, 0x3d	; 61
    33fa:	de b7       	in	r29, 0x3e	; 62
	/* Select Fast PWM Mode, Mode 14 */
	CLR_BIT(TIMER_u8_TCCR1A_REG, TCCR1A_WGM10);
    33fc:	af e4       	ldi	r26, 0x4F	; 79
    33fe:	b0 e0       	ldi	r27, 0x00	; 0
    3400:	ef e4       	ldi	r30, 0x4F	; 79
    3402:	f0 e0       	ldi	r31, 0x00	; 0
    3404:	80 81       	ld	r24, Z
    3406:	8e 7f       	andi	r24, 0xFE	; 254
    3408:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1A_REG, TCCR1A_WGM11);
    340a:	af e4       	ldi	r26, 0x4F	; 79
    340c:	b0 e0       	ldi	r27, 0x00	; 0
    340e:	ef e4       	ldi	r30, 0x4F	; 79
    3410:	f0 e0       	ldi	r31, 0x00	; 0
    3412:	80 81       	ld	r24, Z
    3414:	82 60       	ori	r24, 0x02	; 2
    3416:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG, TCCR1B_WGM12);
    3418:	ae e4       	ldi	r26, 0x4E	; 78
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	ee e4       	ldi	r30, 0x4E	; 78
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	80 81       	ld	r24, Z
    3422:	88 60       	ori	r24, 0x08	; 8
    3424:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG, TCCR1B_WGM13);
    3426:	ae e4       	ldi	r26, 0x4E	; 78
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	ee e4       	ldi	r30, 0x4E	; 78
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	80 61       	ori	r24, 0x10	; 16
    3432:	8c 93       	st	X, r24

	/* Non inverting mode configuration */
#if PWM_OUTPUT == TIMER1_CHANAL_A
	CLR_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1A0);
    3434:	af e4       	ldi	r26, 0x4F	; 79
    3436:	b0 e0       	ldi	r27, 0x00	; 0
    3438:	ef e4       	ldi	r30, 0x4F	; 79
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 81       	ld	r24, Z
    343e:	8f 7b       	andi	r24, 0xBF	; 191
    3440:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1A1);
    3442:	af e4       	ldi	r26, 0x4F	; 79
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	ef e4       	ldi	r30, 0x4F	; 79
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	80 68       	ori	r24, 0x80	; 128
    344e:	8c 93       	st	X, r24
	CLR_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1A0);
	SET_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1A1);
	CLR_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1B0);
	SET_BIT(TIMER_u8_TCCR1A_REG,TCCR1A_COM1B1);
#endif    
}
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <Timer1_voidSetprescalerby8>:

void Timer1_voidSetprescalerby8()
{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	cd b7       	in	r28, 0x3d	; 61
    345c:	de b7       	in	r29, 0x3e	; 62
	/* Set prescaler to divide by 8 */
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS10);
    345e:	ae e4       	ldi	r26, 0x4E	; 78
    3460:	b0 e0       	ldi	r27, 0x00	; 0
    3462:	ee e4       	ldi	r30, 0x4E	; 78
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	80 81       	ld	r24, Z
    3468:	8e 7f       	andi	r24, 0xFE	; 254
    346a:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS11);
    346c:	ae e4       	ldi	r26, 0x4E	; 78
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	ee e4       	ldi	r30, 0x4E	; 78
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	82 60       	ori	r24, 0x02	; 2
    3478:	8c 93       	st	X, r24
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS12);
    347a:	ae e4       	ldi	r26, 0x4E	; 78
    347c:	b0 e0       	ldi	r27, 0x00	; 0
    347e:	ee e4       	ldi	r30, 0x4E	; 78
    3480:	f0 e0       	ldi	r31, 0x00	; 0
    3482:	80 81       	ld	r24, Z
    3484:	8b 7f       	andi	r24, 0xFB	; 251
    3486:	8c 93       	st	X, r24
}
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <Timer1_void_SetPWM>:
void Timer1_void_SetPWM(f32 Copy_u32_DutyCycle, u8 Copy_u8_Chanal)
{
    348e:	cf 92       	push	r12
    3490:	df 92       	push	r13
    3492:	ef 92       	push	r14
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	27 97       	sbiw	r28, 0x07	; 7
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	69 83       	std	Y+1, r22	; 0x01
    34b0:	7a 83       	std	Y+2, r23	; 0x02
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	9c 83       	std	Y+4, r25	; 0x04
    34b6:	4d 83       	std	Y+5, r20	; 0x05
	switch(Copy_u8_Chanal)
    34b8:	8d 81       	ldd	r24, Y+5	; 0x05
    34ba:	28 2f       	mov	r18, r24
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	3f 83       	std	Y+7, r19	; 0x07
    34c0:	2e 83       	std	Y+6, r18	; 0x06
    34c2:	8e 81       	ldd	r24, Y+6	; 0x06
    34c4:	9f 81       	ldd	r25, Y+7	; 0x07
    34c6:	82 30       	cpi	r24, 0x02	; 2
    34c8:	91 05       	cpc	r25, r1
    34ca:	e1 f1       	breq	.+120    	; 0x3544 <Timer1_void_SetPWM+0xb6>
    34cc:	ee 81       	ldd	r30, Y+6	; 0x06
    34ce:	ff 81       	ldd	r31, Y+7	; 0x07
    34d0:	e3 30       	cpi	r30, 0x03	; 3
    34d2:	f1 05       	cpc	r31, r1
    34d4:	09 f4       	brne	.+2      	; 0x34d8 <Timer1_void_SetPWM+0x4a>
    34d6:	66 c0       	rjmp	.+204    	; 0x35a4 <Timer1_void_SetPWM+0x116>
    34d8:	2e 81       	ldd	r18, Y+6	; 0x06
    34da:	3f 81       	ldd	r19, Y+7	; 0x07
    34dc:	21 30       	cpi	r18, 0x01	; 1
    34de:	31 05       	cpc	r19, r1
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <Timer1_void_SetPWM+0x56>
    34e2:	be c0       	rjmp	.+380    	; 0x3660 <Timer1_void_SetPWM+0x1d2>
	{
	case TIMER1_CHANAL_A:
		TIMER_u16_OCR1A_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    34e4:	0f 2e       	mov	r0, r31
    34e6:	fa e4       	ldi	r31, 0x4A	; 74
    34e8:	cf 2e       	mov	r12, r31
    34ea:	dd 24       	eor	r13, r13
    34ec:	f0 2d       	mov	r31, r0
    34ee:	69 81       	ldd	r22, Y+1	; 0x01
    34f0:	7a 81       	ldd	r23, Y+2	; 0x02
    34f2:	8b 81       	ldd	r24, Y+3	; 0x03
    34f4:	9c 81       	ldd	r25, Y+4	; 0x04
    34f6:	20 e0       	ldi	r18, 0x00	; 0
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	48 ec       	ldi	r20, 0xC8	; 200
    34fc:	52 e4       	ldi	r21, 0x42	; 66
    34fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	7c 01       	movw	r14, r24
    3508:	8d 01       	movw	r16, r26
    350a:	e6 e4       	ldi	r30, 0x46	; 70
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
    3510:	91 81       	ldd	r25, Z+1	; 0x01
    3512:	cc 01       	movw	r24, r24
    3514:	a0 e0       	ldi	r26, 0x00	; 0
    3516:	b0 e0       	ldi	r27, 0x00	; 0
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3520:	9b 01       	movw	r18, r22
    3522:	ac 01       	movw	r20, r24
    3524:	c8 01       	movw	r24, r16
    3526:	b7 01       	movw	r22, r14
    3528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	bc 01       	movw	r22, r24
    3532:	cd 01       	movw	r24, r26
    3534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3538:	dc 01       	movw	r26, r24
    353a:	cb 01       	movw	r24, r22
    353c:	f6 01       	movw	r30, r12
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
    3542:	8e c0       	rjmp	.+284    	; 0x3660 <Timer1_void_SetPWM+0x1d2>
		break;

	case TIMER1_CHANAL_B:
		TIMER_u16_OCR1B_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    3544:	0f 2e       	mov	r0, r31
    3546:	f8 e4       	ldi	r31, 0x48	; 72
    3548:	cf 2e       	mov	r12, r31
    354a:	dd 24       	eor	r13, r13
    354c:	f0 2d       	mov	r31, r0
    354e:	69 81       	ldd	r22, Y+1	; 0x01
    3550:	7a 81       	ldd	r23, Y+2	; 0x02
    3552:	8b 81       	ldd	r24, Y+3	; 0x03
    3554:	9c 81       	ldd	r25, Y+4	; 0x04
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	30 e0       	ldi	r19, 0x00	; 0
    355a:	48 ec       	ldi	r20, 0xC8	; 200
    355c:	52 e4       	ldi	r21, 0x42	; 66
    355e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	7c 01       	movw	r14, r24
    3568:	8d 01       	movw	r16, r26
    356a:	e6 e4       	ldi	r30, 0x46	; 70
    356c:	f0 e0       	ldi	r31, 0x00	; 0
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	cc 01       	movw	r24, r24
    3574:	a0 e0       	ldi	r26, 0x00	; 0
    3576:	b0 e0       	ldi	r27, 0x00	; 0
    3578:	bc 01       	movw	r22, r24
    357a:	cd 01       	movw	r24, r26
    357c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3580:	9b 01       	movw	r18, r22
    3582:	ac 01       	movw	r20, r24
    3584:	c8 01       	movw	r24, r16
    3586:	b7 01       	movw	r22, r14
    3588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    358c:	dc 01       	movw	r26, r24
    358e:	cb 01       	movw	r24, r22
    3590:	bc 01       	movw	r22, r24
    3592:	cd 01       	movw	r24, r26
    3594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	f6 01       	movw	r30, r12
    359e:	91 83       	std	Z+1, r25	; 0x01
    35a0:	80 83       	st	Z, r24
    35a2:	5e c0       	rjmp	.+188    	; 0x3660 <Timer1_void_SetPWM+0x1d2>
		break;

	case TIMER1_CHANAL_A_B:
		TIMER_u16_OCR1A_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    35a4:	0f 2e       	mov	r0, r31
    35a6:	fa e4       	ldi	r31, 0x4A	; 74
    35a8:	cf 2e       	mov	r12, r31
    35aa:	dd 24       	eor	r13, r13
    35ac:	f0 2d       	mov	r31, r0
    35ae:	69 81       	ldd	r22, Y+1	; 0x01
    35b0:	7a 81       	ldd	r23, Y+2	; 0x02
    35b2:	8b 81       	ldd	r24, Y+3	; 0x03
    35b4:	9c 81       	ldd	r25, Y+4	; 0x04
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	48 ec       	ldi	r20, 0xC8	; 200
    35bc:	52 e4       	ldi	r21, 0x42	; 66
    35be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	7c 01       	movw	r14, r24
    35c8:	8d 01       	movw	r16, r26
    35ca:	e6 e4       	ldi	r30, 0x46	; 70
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	80 81       	ld	r24, Z
    35d0:	91 81       	ldd	r25, Z+1	; 0x01
    35d2:	cc 01       	movw	r24, r24
    35d4:	a0 e0       	ldi	r26, 0x00	; 0
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    35e0:	9b 01       	movw	r18, r22
    35e2:	ac 01       	movw	r20, r24
    35e4:	c8 01       	movw	r24, r16
    35e6:	b7 01       	movw	r22, r14
    35e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ec:	dc 01       	movw	r26, r24
    35ee:	cb 01       	movw	r24, r22
    35f0:	bc 01       	movw	r22, r24
    35f2:	cd 01       	movw	r24, r26
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f6 01       	movw	r30, r12
    35fe:	91 83       	std	Z+1, r25	; 0x01
    3600:	80 83       	st	Z, r24
		TIMER_u16_OCR1B_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    3602:	0f 2e       	mov	r0, r31
    3604:	f8 e4       	ldi	r31, 0x48	; 72
    3606:	cf 2e       	mov	r12, r31
    3608:	dd 24       	eor	r13, r13
    360a:	f0 2d       	mov	r31, r0
    360c:	69 81       	ldd	r22, Y+1	; 0x01
    360e:	7a 81       	ldd	r23, Y+2	; 0x02
    3610:	8b 81       	ldd	r24, Y+3	; 0x03
    3612:	9c 81       	ldd	r25, Y+4	; 0x04
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	48 ec       	ldi	r20, 0xC8	; 200
    361a:	52 e4       	ldi	r21, 0x42	; 66
    361c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	7c 01       	movw	r14, r24
    3626:	8d 01       	movw	r16, r26
    3628:	e6 e4       	ldi	r30, 0x46	; 70
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	91 81       	ldd	r25, Z+1	; 0x01
    3630:	cc 01       	movw	r24, r24
    3632:	a0 e0       	ldi	r26, 0x00	; 0
    3634:	b0 e0       	ldi	r27, 0x00	; 0
    3636:	bc 01       	movw	r22, r24
    3638:	cd 01       	movw	r24, r26
    363a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    363e:	9b 01       	movw	r18, r22
    3640:	ac 01       	movw	r20, r24
    3642:	c8 01       	movw	r24, r16
    3644:	b7 01       	movw	r22, r14
    3646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	bc 01       	movw	r22, r24
    3650:	cd 01       	movw	r24, r26
    3652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3656:	dc 01       	movw	r26, r24
    3658:	cb 01       	movw	r24, r22
    365a:	f6 01       	movw	r30, r12
    365c:	91 83       	std	Z+1, r25	; 0x01
    365e:	80 83       	st	Z, r24
		break;
	}

	/* Set prescaler to divide by 8 */
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS10);
    3660:	ae e4       	ldi	r26, 0x4E	; 78
    3662:	b0 e0       	ldi	r27, 0x00	; 0
    3664:	ee e4       	ldi	r30, 0x4E	; 78
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	80 81       	ld	r24, Z
    366a:	8e 7f       	andi	r24, 0xFE	; 254
    366c:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS11);
    366e:	ae e4       	ldi	r26, 0x4E	; 78
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	ee e4       	ldi	r30, 0x4E	; 78
    3674:	f0 e0       	ldi	r31, 0x00	; 0
    3676:	80 81       	ld	r24, Z
    3678:	82 60       	ori	r24, 0x02	; 2
    367a:	8c 93       	st	X, r24
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS12);
    367c:	ae e4       	ldi	r26, 0x4E	; 78
    367e:	b0 e0       	ldi	r27, 0x00	; 0
    3680:	ee e4       	ldi	r30, 0x4E	; 78
    3682:	f0 e0       	ldi	r31, 0x00	; 0
    3684:	80 81       	ld	r24, Z
    3686:	8b 7f       	andi	r24, 0xFB	; 251
    3688:	8c 93       	st	X, r24
}
    368a:	27 96       	adiw	r28, 0x07	; 7
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	1f 91       	pop	r17
    369c:	0f 91       	pop	r16
    369e:	ff 90       	pop	r15
    36a0:	ef 90       	pop	r14
    36a2:	df 90       	pop	r13
    36a4:	cf 90       	pop	r12
    36a6:	08 95       	ret

000036a8 <Timer1_void_SetPWMChanal_A>:

void Timer1_void_SetPWMChanal_A(f32 Copy_u32_DutyCycle)
{
    36a8:	cf 92       	push	r12
    36aa:	df 92       	push	r13
    36ac:	ef 92       	push	r14
    36ae:	ff 92       	push	r15
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	00 d0       	rcall	.+0      	; 0x36ba <Timer1_void_SetPWMChanal_A+0x12>
    36ba:	00 d0       	rcall	.+0      	; 0x36bc <Timer1_void_SetPWMChanal_A+0x14>
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
    36c0:	69 83       	std	Y+1, r22	; 0x01
    36c2:	7a 83       	std	Y+2, r23	; 0x02
    36c4:	8b 83       	std	Y+3, r24	; 0x03
    36c6:	9c 83       	std	Y+4, r25	; 0x04
	TIMER_u16_OCR1A_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    36c8:	0f 2e       	mov	r0, r31
    36ca:	fa e4       	ldi	r31, 0x4A	; 74
    36cc:	cf 2e       	mov	r12, r31
    36ce:	dd 24       	eor	r13, r13
    36d0:	f0 2d       	mov	r31, r0
    36d2:	69 81       	ldd	r22, Y+1	; 0x01
    36d4:	7a 81       	ldd	r23, Y+2	; 0x02
    36d6:	8b 81       	ldd	r24, Y+3	; 0x03
    36d8:	9c 81       	ldd	r25, Y+4	; 0x04
    36da:	20 e0       	ldi	r18, 0x00	; 0
    36dc:	30 e0       	ldi	r19, 0x00	; 0
    36de:	48 ec       	ldi	r20, 0xC8	; 200
    36e0:	52 e4       	ldi	r21, 0x42	; 66
    36e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36e6:	dc 01       	movw	r26, r24
    36e8:	cb 01       	movw	r24, r22
    36ea:	7c 01       	movw	r14, r24
    36ec:	8d 01       	movw	r16, r26
    36ee:	e6 e4       	ldi	r30, 0x46	; 70
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 81       	ld	r24, Z
    36f4:	91 81       	ldd	r25, Z+1	; 0x01
    36f6:	cc 01       	movw	r24, r24
    36f8:	a0 e0       	ldi	r26, 0x00	; 0
    36fa:	b0 e0       	ldi	r27, 0x00	; 0
    36fc:	bc 01       	movw	r22, r24
    36fe:	cd 01       	movw	r24, r26
    3700:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3704:	9b 01       	movw	r18, r22
    3706:	ac 01       	movw	r20, r24
    3708:	c8 01       	movw	r24, r16
    370a:	b7 01       	movw	r22, r14
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	f6 01       	movw	r30, r12
    3722:	91 83       	std	Z+1, r25	; 0x01
    3724:	80 83       	st	Z, r24
	/* Set prescaler to divide by 8 */
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS10);
    3726:	ae e4       	ldi	r26, 0x4E	; 78
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	ee e4       	ldi	r30, 0x4E	; 78
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	80 81       	ld	r24, Z
    3730:	8e 7f       	andi	r24, 0xFE	; 254
    3732:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS11);
    3734:	ae e4       	ldi	r26, 0x4E	; 78
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	ee e4       	ldi	r30, 0x4E	; 78
    373a:	f0 e0       	ldi	r31, 0x00	; 0
    373c:	80 81       	ld	r24, Z
    373e:	82 60       	ori	r24, 0x02	; 2
    3740:	8c 93       	st	X, r24
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS12);
    3742:	ae e4       	ldi	r26, 0x4E	; 78
    3744:	b0 e0       	ldi	r27, 0x00	; 0
    3746:	ee e4       	ldi	r30, 0x4E	; 78
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	80 81       	ld	r24, Z
    374c:	8b 7f       	andi	r24, 0xFB	; 251
    374e:	8c 93       	st	X, r24
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	ff 90       	pop	r15
    3762:	ef 90       	pop	r14
    3764:	df 90       	pop	r13
    3766:	cf 90       	pop	r12
    3768:	08 95       	ret

0000376a <Timer1_void_SetPWMChanal_B>:

void Timer1_void_SetPWMChanal_B(f32 Copy_u32_DutyCycle)
{
    376a:	cf 92       	push	r12
    376c:	df 92       	push	r13
    376e:	ef 92       	push	r14
    3770:	ff 92       	push	r15
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <Timer1_void_SetPWMChanal_B+0x12>
    377c:	00 d0       	rcall	.+0      	; 0x377e <Timer1_void_SetPWMChanal_B+0x14>
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	69 83       	std	Y+1, r22	; 0x01
    3784:	7a 83       	std	Y+2, r23	; 0x02
    3786:	8b 83       	std	Y+3, r24	; 0x03
    3788:	9c 83       	std	Y+4, r25	; 0x04
	TIMER_u16_OCR1B_REG = (u16)(((f32)Copy_u32_DutyCycle / 100.0) * TIMER_u16_ICR1_REG);
    378a:	0f 2e       	mov	r0, r31
    378c:	f8 e4       	ldi	r31, 0x48	; 72
    378e:	cf 2e       	mov	r12, r31
    3790:	dd 24       	eor	r13, r13
    3792:	f0 2d       	mov	r31, r0
    3794:	69 81       	ldd	r22, Y+1	; 0x01
    3796:	7a 81       	ldd	r23, Y+2	; 0x02
    3798:	8b 81       	ldd	r24, Y+3	; 0x03
    379a:	9c 81       	ldd	r25, Y+4	; 0x04
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	48 ec       	ldi	r20, 0xC8	; 200
    37a2:	52 e4       	ldi	r21, 0x42	; 66
    37a4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	7c 01       	movw	r14, r24
    37ae:	8d 01       	movw	r16, r26
    37b0:	e6 e4       	ldi	r30, 0x46	; 70
    37b2:	f0 e0       	ldi	r31, 0x00	; 0
    37b4:	80 81       	ld	r24, Z
    37b6:	91 81       	ldd	r25, Z+1	; 0x01
    37b8:	cc 01       	movw	r24, r24
    37ba:	a0 e0       	ldi	r26, 0x00	; 0
    37bc:	b0 e0       	ldi	r27, 0x00	; 0
    37be:	bc 01       	movw	r22, r24
    37c0:	cd 01       	movw	r24, r26
    37c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    37c6:	9b 01       	movw	r18, r22
    37c8:	ac 01       	movw	r20, r24
    37ca:	c8 01       	movw	r24, r16
    37cc:	b7 01       	movw	r22, r14
    37ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d2:	dc 01       	movw	r26, r24
    37d4:	cb 01       	movw	r24, r22
    37d6:	bc 01       	movw	r22, r24
    37d8:	cd 01       	movw	r24, r26
    37da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	f6 01       	movw	r30, r12
    37e4:	91 83       	std	Z+1, r25	; 0x01
    37e6:	80 83       	st	Z, r24
	/* Set prescaler to divide by 8 */
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS10);
    37e8:	ae e4       	ldi	r26, 0x4E	; 78
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	ee e4       	ldi	r30, 0x4E	; 78
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	8e 7f       	andi	r24, 0xFE	; 254
    37f4:	8c 93       	st	X, r24
	SET_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS11);
    37f6:	ae e4       	ldi	r26, 0x4E	; 78
    37f8:	b0 e0       	ldi	r27, 0x00	; 0
    37fa:	ee e4       	ldi	r30, 0x4E	; 78
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	80 81       	ld	r24, Z
    3800:	82 60       	ori	r24, 0x02	; 2
    3802:	8c 93       	st	X, r24
	CLR_BIT(TIMER_u8_TCCR1B_REG,TCCR1B_CS12);
    3804:	ae e4       	ldi	r26, 0x4E	; 78
    3806:	b0 e0       	ldi	r27, 0x00	; 0
    3808:	ee e4       	ldi	r30, 0x4E	; 78
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	80 81       	ld	r24, Z
    380e:	8b 7f       	andi	r24, 0xFB	; 251
    3810:	8c 93       	st	X, r24
}
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	0f 90       	pop	r0
    3818:	0f 90       	pop	r0
    381a:	cf 91       	pop	r28
    381c:	df 91       	pop	r29
    381e:	1f 91       	pop	r17
    3820:	0f 91       	pop	r16
    3822:	ff 90       	pop	r15
    3824:	ef 90       	pop	r14
    3826:	df 90       	pop	r13
    3828:	cf 90       	pop	r12
    382a:	08 95       	ret

0000382c <Timer1_void_SetICR1_Reg>:

void Timer1_void_SetICR1_Reg(u16 Copy_u16_Value)
{
    382c:	df 93       	push	r29
    382e:	cf 93       	push	r28
    3830:	00 d0       	rcall	.+0      	; 0x3832 <Timer1_void_SetICR1_Reg+0x6>
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	9a 83       	std	Y+2, r25	; 0x02
    3838:	89 83       	std	Y+1, r24	; 0x01
	TIMER_u16_ICR1_REG = Copy_u16_Value;
    383a:	e6 e4       	ldi	r30, 0x46	; 70
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	9a 81       	ldd	r25, Y+2	; 0x02
    3842:	91 83       	std	Z+1, r25	; 0x01
    3844:	80 83       	st	Z, r24
}
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	cf 91       	pop	r28
    384c:	df 91       	pop	r29
    384e:	08 95       	ret

00003850 <Timer1_void_SetOCR1_Reg>:

void Timer1_void_SetOCR1_Reg(u16 Copy_u16_Value, u8 Copy_u8_Chanal)
{
    3850:	df 93       	push	r29
    3852:	cf 93       	push	r28
    3854:	00 d0       	rcall	.+0      	; 0x3856 <Timer1_void_SetOCR1_Reg+0x6>
    3856:	00 d0       	rcall	.+0      	; 0x3858 <Timer1_void_SetOCR1_Reg+0x8>
    3858:	0f 92       	push	r0
    385a:	cd b7       	in	r28, 0x3d	; 61
    385c:	de b7       	in	r29, 0x3e	; 62
    385e:	9a 83       	std	Y+2, r25	; 0x02
    3860:	89 83       	std	Y+1, r24	; 0x01
    3862:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_u8_Chanal)
    3864:	8b 81       	ldd	r24, Y+3	; 0x03
    3866:	28 2f       	mov	r18, r24
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	3d 83       	std	Y+5, r19	; 0x05
    386c:	2c 83       	std	Y+4, r18	; 0x04
    386e:	8c 81       	ldd	r24, Y+4	; 0x04
    3870:	9d 81       	ldd	r25, Y+5	; 0x05
    3872:	82 30       	cpi	r24, 0x02	; 2
    3874:	91 05       	cpc	r25, r1
    3876:	89 f0       	breq	.+34     	; 0x389a <Timer1_void_SetOCR1_Reg+0x4a>
    3878:	2c 81       	ldd	r18, Y+4	; 0x04
    387a:	3d 81       	ldd	r19, Y+5	; 0x05
    387c:	23 30       	cpi	r18, 0x03	; 3
    387e:	31 05       	cpc	r19, r1
    3880:	99 f0       	breq	.+38     	; 0x38a8 <Timer1_void_SetOCR1_Reg+0x58>
    3882:	8c 81       	ldd	r24, Y+4	; 0x04
    3884:	9d 81       	ldd	r25, Y+5	; 0x05
    3886:	81 30       	cpi	r24, 0x01	; 1
    3888:	91 05       	cpc	r25, r1
    388a:	d1 f4       	brne	.+52     	; 0x38c0 <Timer1_void_SetOCR1_Reg+0x70>
	{
	case TIMER1_CHANAL_A:
		TIMER_u16_OCR1A_REG = Copy_u16_Value;
    388c:	ea e4       	ldi	r30, 0x4A	; 74
    388e:	f0 e0       	ldi	r31, 0x00	; 0
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	9a 81       	ldd	r25, Y+2	; 0x02
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	13 c0       	rjmp	.+38     	; 0x38c0 <Timer1_void_SetOCR1_Reg+0x70>
		break;

	case TIMER1_CHANAL_B:
		TIMER_u16_OCR1B_REG = Copy_u16_Value;
    389a:	e8 e4       	ldi	r30, 0x48	; 72
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	89 81       	ldd	r24, Y+1	; 0x01
    38a0:	9a 81       	ldd	r25, Y+2	; 0x02
    38a2:	91 83       	std	Z+1, r25	; 0x01
    38a4:	80 83       	st	Z, r24
    38a6:	0c c0       	rjmp	.+24     	; 0x38c0 <Timer1_void_SetOCR1_Reg+0x70>
		break;

	case TIMER1_CHANAL_A_B:
		TIMER_u16_OCR1A_REG = Copy_u16_Value;
    38a8:	ea e4       	ldi	r30, 0x4A	; 74
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	91 83       	std	Z+1, r25	; 0x01
    38b2:	80 83       	st	Z, r24
		TIMER_u16_OCR1B_REG = Copy_u16_Value;
    38b4:	e8 e4       	ldi	r30, 0x48	; 72
    38b6:	f0 e0       	ldi	r31, 0x00	; 0
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	91 83       	std	Z+1, r25	; 0x01
    38be:	80 83       	st	Z, r24
		break;
	}
}
    38c0:	0f 90       	pop	r0
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	0f 90       	pop	r0
    38c8:	0f 90       	pop	r0
    38ca:	cf 91       	pop	r28
    38cc:	df 91       	pop	r29
    38ce:	08 95       	ret

000038d0 <UART_void_Init>:
#include "UART_Registers.h"
#include "UART_Private.h"
#include "UART_Config.h"

void UART_void_Init(void)
{
    38d0:	df 93       	push	r29
    38d2:	cf 93       	push	r28
    38d4:	0f 92       	push	r0
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
	/* UCSRC Reg is byte access so I can't write bit by bit on it */
	u8 Local_u8_UCSRCTemp = 0;
    38da:	19 82       	std	Y+1, r1	; 0x01

	/* set the this bit to write on UCSRC Reg, cuz it shares the same location with another Reg */
	SET_BIT(Local_u8_UCSRCTemp, UCSRC_URSEL);
    38dc:	89 81       	ldd	r24, Y+1	; 0x01
    38de:	80 68       	ori	r24, 0x80	; 128
    38e0:	89 83       	std	Y+1, r24	; 0x01

	/* Asynchronous mode selection */
	/* Note : we can select Synchronous mode by set this bit, in this case the transmitter/receiver relationship is master to slaves */
	CLR_BIT(Local_u8_UCSRCTemp, UCSRC_UMSEL);
    38e2:	89 81       	ldd	r24, Y+1	; 0x01
    38e4:	8f 7b       	andi	r24, 0xBF	; 191
    38e6:	89 83       	std	Y+1, r24	; 0x01

	/* Parity mode selection , it is error checking mechanism */
#if PARITY_MODE == DISABLED
	CLR_BIT(Local_u8_UCSRCTemp, UCSRC_UPM0);
    38e8:	89 81       	ldd	r24, Y+1	; 0x01
    38ea:	8f 7e       	andi	r24, 0xEF	; 239
    38ec:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8_UCSRCTemp, UCSRC_UPM1);
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	8f 7d       	andi	r24, 0xDF	; 223
    38f2:	89 83       	std	Y+1, r24	; 0x01

#endif

	/* Stop bit selection */
#if STOP_BIT == ONE_BIT
	CLR_BIT(Local_u8_UCSRCTemp, UCSRC_USBS);
    38f4:	89 81       	ldd	r24, Y+1	; 0x01
    38f6:	87 7f       	andi	r24, 0xF7	; 247
    38f8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8_UCSRCTemp, UCSRC_UCSZ0);
	SET_BIT(Local_u8_UCSRCTemp, UCSRC_UCSZ1);
	CLR_BIT(UART_u8_UCSRB, UCSRB_UCSZ2);

#elif DATA_SIZE == EIGHT_BIT
	SET_BIT(Local_u8_UCSRCTemp, UCSRC_UCSZ0);
    38fa:	89 81       	ldd	r24, Y+1	; 0x01
    38fc:	82 60       	ori	r24, 0x02	; 2
    38fe:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8_UCSRCTemp, UCSRC_UCSZ1);
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	84 60       	ori	r24, 0x04	; 4
    3904:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UART_u8_UCSRB, UCSRB_UCSZ2);
    3906:	aa e2       	ldi	r26, 0x2A	; 42
    3908:	b0 e0       	ldi	r27, 0x00	; 0
    390a:	ea e2       	ldi	r30, 0x2A	; 42
    390c:	f0 e0       	ldi	r31, 0x00	; 0
    390e:	80 81       	ld	r24, Z
    3910:	8b 7f       	andi	r24, 0xFB	; 251
    3912:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB, UCSRB_UCSZ2);

#endif

	/* assign the value of temporary variable to the register */
	UART_u8_UCSRC = Local_u8_UCSRCTemp;
    3914:	e0 e4       	ldi	r30, 0x40	; 64
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	80 83       	st	Z, r24

	/* Set The BaudRate To Be = 9600bps , u can change it if u want*/
	UART_u8_UBRRL = 51;
    391c:	e9 e2       	ldi	r30, 0x29	; 41
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	83 e3       	ldi	r24, 0x33	; 51
    3922:	80 83       	st	Z, r24

	/* UART receiver Enable */
	SET_BIT(UART_u8_UCSRB, UCSRB_RXEN);
    3924:	aa e2       	ldi	r26, 0x2A	; 42
    3926:	b0 e0       	ldi	r27, 0x00	; 0
    3928:	ea e2       	ldi	r30, 0x2A	; 42
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	80 81       	ld	r24, Z
    392e:	80 61       	ori	r24, 0x10	; 16
    3930:	8c 93       	st	X, r24

	/* UART transmitter Enable */
	SET_BIT(UART_u8_UCSRB, UCSRB_TXEN);
    3932:	aa e2       	ldi	r26, 0x2A	; 42
    3934:	b0 e0       	ldi	r27, 0x00	; 0
    3936:	ea e2       	ldi	r30, 0x2A	; 42
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	80 81       	ld	r24, Z
    393c:	88 60       	ori	r24, 0x08	; 8
    393e:	8c 93       	st	X, r24
}
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <UART_void_SendData>:


void UART_void_SendData(u8 A_u8_Data)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	0f 92       	push	r0
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	89 83       	std	Y+1, r24	; 0x01
	/* busy wait */
	while(GET_BIT(UART_u8_UCSRA, UCSRA_UDRE) == 0);
    3954:	eb e2       	ldi	r30, 0x2B	; 43
    3956:	f0 e0       	ldi	r31, 0x00	; 0
    3958:	80 81       	ld	r24, Z
    395a:	82 95       	swap	r24
    395c:	86 95       	lsr	r24
    395e:	87 70       	andi	r24, 0x07	; 7
    3960:	88 2f       	mov	r24, r24
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	81 70       	andi	r24, 0x01	; 1
    3966:	90 70       	andi	r25, 0x00	; 0
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	a1 f3       	breq	.-24     	; 0x3954 <UART_void_SendData+0xc>
	UART_u8_UDR = A_u8_Data;
    396c:	ec e2       	ldi	r30, 0x2C	; 44
    396e:	f0 e0       	ldi	r31, 0x00	; 0
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	80 83       	st	Z, r24
}
    3974:	0f 90       	pop	r0
    3976:	cf 91       	pop	r28
    3978:	df 91       	pop	r29
    397a:	08 95       	ret

0000397c <UART_void_RecieveData>:

void UART_void_RecieveData(u8 * A_pu8_Data)
{
    397c:	df 93       	push	r29
    397e:	cf 93       	push	r28
    3980:	00 d0       	rcall	.+0      	; 0x3982 <UART_void_RecieveData+0x6>
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	9a 83       	std	Y+2, r25	; 0x02
    3988:	89 83       	std	Y+1, r24	; 0x01
	/* busy wait */
	while(GET_BIT(UART_u8_UCSRA, UCSRA_RXC) == 0);
    398a:	eb e2       	ldi	r30, 0x2B	; 43
    398c:	f0 e0       	ldi	r31, 0x00	; 0
    398e:	80 81       	ld	r24, Z
    3990:	88 23       	and	r24, r24
    3992:	dc f7       	brge	.-10     	; 0x398a <UART_void_RecieveData+0xe>
	*A_pu8_Data = UART_u8_UDR;
    3994:	ec e2       	ldi	r30, 0x2C	; 44
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	80 81       	ld	r24, Z
    399a:	e9 81       	ldd	r30, Y+1	; 0x01
    399c:	fa 81       	ldd	r31, Y+2	; 0x02
    399e:	80 83       	st	Z, r24
}
    39a0:	0f 90       	pop	r0
    39a2:	0f 90       	pop	r0
    39a4:	cf 91       	pop	r28
    39a6:	df 91       	pop	r29
    39a8:	08 95       	ret

000039aa <UART_voidSendString>:

void UART_voidSendString(u8 * A_pu_String)
{
    39aa:	df 93       	push	r29
    39ac:	cf 93       	push	r28
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <UART_voidSendString+0x6>
    39b0:	0f 92       	push	r0
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	9b 83       	std	Y+3, r25	; 0x03
    39b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Counter = 0;
    39ba:	19 82       	std	Y+1, r1	; 0x01
	if (A_pu_String != NULL)
    39bc:	8a 81       	ldd	r24, Y+2	; 0x02
    39be:	9b 81       	ldd	r25, Y+3	; 0x03
    39c0:	00 97       	sbiw	r24, 0x00	; 0
    39c2:	d1 f0       	breq	.+52     	; 0x39f8 <UART_voidSendString+0x4e>
    39c4:	0e c0       	rjmp	.+28     	; 0x39e2 <UART_voidSendString+0x38>
	{
		while(A_pu_String[Local_u8_Counter]!= '\0')
		{
			UART_void_SendData(A_pu_String[Local_u8_Counter]);
    39c6:	89 81       	ldd	r24, Y+1	; 0x01
    39c8:	28 2f       	mov	r18, r24
    39ca:	30 e0       	ldi	r19, 0x00	; 0
    39cc:	8a 81       	ldd	r24, Y+2	; 0x02
    39ce:	9b 81       	ldd	r25, Y+3	; 0x03
    39d0:	fc 01       	movw	r30, r24
    39d2:	e2 0f       	add	r30, r18
    39d4:	f3 1f       	adc	r31, r19
    39d6:	80 81       	ld	r24, Z
    39d8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <UART_void_SendData>
			Local_u8_Counter++;
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	8f 5f       	subi	r24, 0xFF	; 255
    39e0:	89 83       	std	Y+1, r24	; 0x01
void UART_voidSendString(u8 * A_pu_String)
{
	u8 Local_u8_Counter = 0;
	if (A_pu_String != NULL)
	{
		while(A_pu_String[Local_u8_Counter]!= '\0')
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	28 2f       	mov	r18, r24
    39e6:	30 e0       	ldi	r19, 0x00	; 0
    39e8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ea:	9b 81       	ldd	r25, Y+3	; 0x03
    39ec:	fc 01       	movw	r30, r24
    39ee:	e2 0f       	add	r30, r18
    39f0:	f3 1f       	adc	r31, r19
    39f2:	80 81       	ld	r24, Z
    39f4:	88 23       	and	r24, r24
    39f6:	39 f7       	brne	.-50     	; 0x39c6 <UART_voidSendString+0x1c>
		{
			UART_void_SendData(A_pu_String[Local_u8_Counter]);
			Local_u8_Counter++;
		}
	}
}
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	08 95       	ret

00003a04 <UART_voidSendNumber>:

void UART_voidSendNumber(s32 A_s32_Number)
{
    3a04:	df 93       	push	r29
    3a06:	cf 93       	push	r28
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
    3a0c:	2b 97       	sbiw	r28, 0x0b	; 11
    3a0e:	0f b6       	in	r0, 0x3f	; 63
    3a10:	f8 94       	cli
    3a12:	de bf       	out	0x3e, r29	; 62
    3a14:	0f be       	out	0x3f, r0	; 63
    3a16:	cd bf       	out	0x3d, r28	; 61
    3a18:	68 87       	std	Y+8, r22	; 0x08
    3a1a:	79 87       	std	Y+9, r23	; 0x09
    3a1c:	8a 87       	std	Y+10, r24	; 0x0a
    3a1e:	9b 87       	std	Y+11, r25	; 0x0b
	u8 reserved[4];
		u8 LastDigit = 0;
    3a20:	1b 82       	std	Y+3, r1	; 0x03
		u8 i = 0;
    3a22:	1a 82       	std	Y+2, r1	; 0x02
		if(A_s32_Number < 0)
    3a24:	88 85       	ldd	r24, Y+8	; 0x08
    3a26:	99 85       	ldd	r25, Y+9	; 0x09
    3a28:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a2a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a2c:	bb 23       	and	r27, r27
    3a2e:	94 f4       	brge	.+36     	; 0x3a54 <UART_voidSendNumber+0x50>
		{
			UART_void_SendData('-');
    3a30:	8d e2       	ldi	r24, 0x2D	; 45
    3a32:	0e 94 a4 1c 	call	0x3948	; 0x3948 <UART_void_SendData>
			A_s32_Number *= -1;
    3a36:	88 85       	ldd	r24, Y+8	; 0x08
    3a38:	99 85       	ldd	r25, Y+9	; 0x09
    3a3a:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a3c:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a3e:	b0 95       	com	r27
    3a40:	a0 95       	com	r26
    3a42:	90 95       	com	r25
    3a44:	81 95       	neg	r24
    3a46:	9f 4f       	sbci	r25, 0xFF	; 255
    3a48:	af 4f       	sbci	r26, 0xFF	; 255
    3a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a4c:	88 87       	std	Y+8, r24	; 0x08
    3a4e:	99 87       	std	Y+9, r25	; 0x09
    3a50:	aa 87       	std	Y+10, r26	; 0x0a
    3a52:	bb 87       	std	Y+11, r27	; 0x0b
		}
		if (A_s32_Number == 0)
    3a54:	88 85       	ldd	r24, Y+8	; 0x08
    3a56:	99 85       	ldd	r25, Y+9	; 0x09
    3a58:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a5a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a5c:	00 97       	sbiw	r24, 0x00	; 0
    3a5e:	a1 05       	cpc	r26, r1
    3a60:	b1 05       	cpc	r27, r1
    3a62:	91 f5       	brne	.+100    	; 0x3ac8 <UART_voidSendNumber+0xc4>
		{
			i = 1;
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	8a 83       	std	Y+2, r24	; 0x02
			reserved[0] = 0;
    3a68:	1c 82       	std	Y+4, r1	; 0x04
    3a6a:	2e c0       	rjmp	.+92     	; 0x3ac8 <UART_voidSendNumber+0xc4>
		}
		while(A_s32_Number != 0)
		{
		LastDigit = A_s32_Number % 10;
    3a6c:	88 85       	ldd	r24, Y+8	; 0x08
    3a6e:	99 85       	ldd	r25, Y+9	; 0x09
    3a70:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a72:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a74:	2a e0       	ldi	r18, 0x0A	; 10
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	40 e0       	ldi	r20, 0x00	; 0
    3a7a:	50 e0       	ldi	r21, 0x00	; 0
    3a7c:	bc 01       	movw	r22, r24
    3a7e:	cd 01       	movw	r24, r26
    3a80:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <__divmodsi4>
    3a84:	dc 01       	movw	r26, r24
    3a86:	cb 01       	movw	r24, r22
    3a88:	8b 83       	std	Y+3, r24	; 0x03
		reserved[i] = LastDigit;
    3a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8c:	28 2f       	mov	r18, r24
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	ce 01       	movw	r24, r28
    3a92:	04 96       	adiw	r24, 0x04	; 4
    3a94:	fc 01       	movw	r30, r24
    3a96:	e2 0f       	add	r30, r18
    3a98:	f3 1f       	adc	r31, r19
    3a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a9c:	80 83       	st	Z, r24
		A_s32_Number /= 10;
    3a9e:	88 85       	ldd	r24, Y+8	; 0x08
    3aa0:	99 85       	ldd	r25, Y+9	; 0x09
    3aa2:	aa 85       	ldd	r26, Y+10	; 0x0a
    3aa4:	bb 85       	ldd	r27, Y+11	; 0x0b
    3aa6:	2a e0       	ldi	r18, 0x0A	; 10
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	50 e0       	ldi	r21, 0x00	; 0
    3aae:	bc 01       	movw	r22, r24
    3ab0:	cd 01       	movw	r24, r26
    3ab2:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <__divmodsi4>
    3ab6:	da 01       	movw	r26, r20
    3ab8:	c9 01       	movw	r24, r18
    3aba:	88 87       	std	Y+8, r24	; 0x08
    3abc:	99 87       	std	Y+9, r25	; 0x09
    3abe:	aa 87       	std	Y+10, r26	; 0x0a
    3ac0:	bb 87       	std	Y+11, r27	; 0x0b
		i++;
    3ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac4:	8f 5f       	subi	r24, 0xFF	; 255
    3ac6:	8a 83       	std	Y+2, r24	; 0x02
		if (A_s32_Number == 0)
		{
			i = 1;
			reserved[0] = 0;
		}
		while(A_s32_Number != 0)
    3ac8:	88 85       	ldd	r24, Y+8	; 0x08
    3aca:	99 85       	ldd	r25, Y+9	; 0x09
    3acc:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ace:	bb 85       	ldd	r27, Y+11	; 0x0b
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	a1 05       	cpc	r26, r1
    3ad4:	b1 05       	cpc	r27, r1
    3ad6:	51 f6       	brne	.-108    	; 0x3a6c <UART_voidSendNumber+0x68>
		LastDigit = A_s32_Number % 10;
		reserved[i] = LastDigit;
		A_s32_Number /= 10;
		i++;
		}
		for(s8 j = (i - 1); j >= 0; j-- )
    3ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    3ada:	81 50       	subi	r24, 0x01	; 1
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	11 c0       	rjmp	.+34     	; 0x3b02 <UART_voidSendNumber+0xfe>
		{
			UART_void_SendData(reserved[j]+'0');
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	28 2f       	mov	r18, r24
    3ae4:	33 27       	eor	r19, r19
    3ae6:	27 fd       	sbrc	r18, 7
    3ae8:	30 95       	com	r19
    3aea:	ce 01       	movw	r24, r28
    3aec:	04 96       	adiw	r24, 0x04	; 4
    3aee:	fc 01       	movw	r30, r24
    3af0:	e2 0f       	add	r30, r18
    3af2:	f3 1f       	adc	r31, r19
    3af4:	80 81       	ld	r24, Z
    3af6:	80 5d       	subi	r24, 0xD0	; 208
    3af8:	0e 94 a4 1c 	call	0x3948	; 0x3948 <UART_void_SendData>
		LastDigit = A_s32_Number % 10;
		reserved[i] = LastDigit;
		A_s32_Number /= 10;
		i++;
		}
		for(s8 j = (i - 1); j >= 0; j-- )
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	81 50       	subi	r24, 0x01	; 1
    3b00:	89 83       	std	Y+1, r24	; 0x01
    3b02:	89 81       	ldd	r24, Y+1	; 0x01
    3b04:	88 23       	and	r24, r24
    3b06:	64 f7       	brge	.-40     	; 0x3ae0 <UART_voidSendNumber+0xdc>
		{
			UART_void_SendData(reserved[j]+'0');
		}
}
    3b08:	2b 96       	adiw	r28, 0x0b	; 11
    3b0a:	0f b6       	in	r0, 0x3f	; 63
    3b0c:	f8 94       	cli
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	0f be       	out	0x3f, r0	; 63
    3b12:	cd bf       	out	0x3d, r28	; 61
    3b14:	cf 91       	pop	r28
    3b16:	df 91       	pop	r29
    3b18:	08 95       	ret

00003b1a <main>:

void UpdateIRValue(void);
u8 Local_Au8irvalue[2] = {0};

int main()
{
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	0f 92       	push	r0
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8RecieveDate = 0;
    3b24:	19 82       	std	Y+1, r1	; 0x01
	UART_void_Init();
    3b26:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <UART_void_Init>
	GI_void_Enable();
    3b2a:	0e 94 b3 0b 	call	0x1766	; 0x1766 <GI_void_Enable>
	Timer0_void_Init();
    3b2e:	0e 94 75 17 	call	0x2eea	; 0x2eea <Timer0_void_Init>

	LCD_void_4Bit_Init();
    3b32:	0e 94 cf 0b 	call	0x179e	; 0x179e <LCD_void_4Bit_Init>
	LCD_void_SetCursor(0, 4);
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	64 e0       	ldi	r22, 0x04	; 4
    3b3a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
	LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3b3e:	80 e6       	ldi	r24, 0x60	; 96
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

	LCD_void_SetCursor(1, 0);
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	60 e0       	ldi	r22, 0x00	; 0
    3b4a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
	LCD_void_4Bit_WriteString((u8*)"P1: Free");
    3b4e:	8e e6       	ldi	r24, 0x6E	; 110
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

	LCD_void_SetCursor(2, 0);
    3b56:	82 e0       	ldi	r24, 0x02	; 2
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
	LCD_void_4Bit_WriteString((u8*)"P2: Free");
    3b5e:	87 e7       	ldi	r24, 0x77	; 119
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

	LCD_void_SetCursor(3, 0);
    3b66:	83 e0       	ldi	r24, 0x03	; 3
    3b68:	60 e0       	ldi	r22, 0x00	; 0
    3b6a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
	LCD_void_4Bit_WriteString((u8*)"P3: Free");
    3b6e:	80 e8       	ldi	r24, 0x80	; 128
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

	Servo_voidInit();
    3b76:	0e 94 30 17 	call	0x2e60	; 0x2e60 <Servo_voidInit>
	Servo_void_Operate(OPEN_0,SERVO_CHANNEL_A);
    3b7a:	8a e5       	ldi	r24, 0x5A	; 90
    3b7c:	61 e0       	ldi	r22, 0x01	; 1
    3b7e:	0e 94 44 17 	call	0x2e88	; 0x2e88 <Servo_void_Operate>

	PIR_voidIRInit(PIR_PORTA, PIR_PIN0);
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	60 e0       	ldi	r22, 0x00	; 0
    3b86:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PIR_voidIRInit>
	PIR_voidIRInit(PIR_PORTA, PIR_PIN1);
    3b8a:	80 e0       	ldi	r24, 0x00	; 0
    3b8c:	61 e0       	ldi	r22, 0x01	; 1
    3b8e:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <PIR_voidIRInit>

	LED_voidLEDInit(LED_PORTA, LED_PIN2);
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	62 e0       	ldi	r22, 0x02	; 2
    3b96:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LED_voidLEDInit>
	LED_voidLEDInit(LED_PORTA, LED_PIN3);
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	63 e0       	ldi	r22, 0x03	; 3
    3b9e:	0e 94 d4 16 	call	0x2da8	; 0x2da8 <LED_voidLEDInit>

	LED_voidTurnOff(LED_PORTA, LED_PIN2);
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	62 e0       	ldi	r22, 0x02	; 2
    3ba6:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LED_voidTurnOff>
	LED_voidTurnOff(LED_PORTA, LED_PIN3);
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	63 e0       	ldi	r22, 0x03	; 3
    3bae:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LED_voidTurnOff>

	while(1)
	{
		/* recieve park details */
		UART_void_RecieveData(&Local_u8RecieveDate);
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	01 96       	adiw	r24, 0x01	; 1
    3bb6:	0e 94 be 1c 	call	0x397c	; 0x397c <UART_void_RecieveData>
		if(Local_u8RecieveDate == 'E')
    3bba:	89 81       	ldd	r24, Y+1	; 0x01
    3bbc:	85 34       	cpi	r24, 0x45	; 69
    3bbe:	09 f5       	brne	.+66     	; 0x3c02 <main+0xe8>
		{
			LCD_void_SetCursor(0, 4);
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	64 e0       	ldi	r22, 0x04	; 4
    3bc4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3bc8:	80 e6       	ldi	r24, 0x60	; 96
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	60 e0       	ldi	r22, 0x00	; 0
    3bd4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Free");
    3bd8:	8e e6       	ldi	r24, 0x6E	; 110
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3be0:	82 e0       	ldi	r24, 0x02	; 2
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Free");
    3be8:	87 e7       	ldi	r24, 0x77	; 119
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3bf0:	83 e0       	ldi	r24, 0x03	; 3
    3bf2:	60 e0       	ldi	r22, 0x00	; 0
    3bf4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Free");
    3bf8:	80 e8       	ldi	r24, 0x80	; 128
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3c00:	fb c0       	rjmp	.+502    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == 'F')
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
    3c04:	86 34       	cpi	r24, 0x46	; 70
    3c06:	09 f5       	brne	.+66     	; 0x3c4a <main+0x130>
		{
			LCD_void_SetCursor(0, 4);
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	64 e0       	ldi	r22, 0x04	; 4
    3c0c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3c10:	80 e6       	ldi	r24, 0x60	; 96
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Full");
    3c20:	89 e8       	ldi	r24, 0x89	; 137
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	60 e0       	ldi	r22, 0x00	; 0
    3c2c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Full");
    3c30:	82 e9       	ldi	r24, 0x92	; 146
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3c38:	83 e0       	ldi	r24, 0x03	; 3
    3c3a:	60 e0       	ldi	r22, 0x00	; 0
    3c3c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Full");
    3c40:	8b e9       	ldi	r24, 0x9B	; 155
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3c48:	d7 c0       	rjmp	.+430    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == '1')
    3c4a:	89 81       	ldd	r24, Y+1	; 0x01
    3c4c:	81 33       	cpi	r24, 0x31	; 49
    3c4e:	09 f5       	brne	.+66     	; 0x3c92 <main+0x178>
		{
			LCD_void_SetCursor(0, 4);
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	64 e0       	ldi	r22, 0x04	; 4
    3c54:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3c58:	80 e6       	ldi	r24, 0x60	; 96
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Full");
    3c68:	89 e8       	ldi	r24, 0x89	; 137
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3c70:	82 e0       	ldi	r24, 0x02	; 2
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Free");
    3c78:	87 e7       	ldi	r24, 0x77	; 119
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3c80:	83 e0       	ldi	r24, 0x03	; 3
    3c82:	60 e0       	ldi	r22, 0x00	; 0
    3c84:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Free");
    3c88:	80 e8       	ldi	r24, 0x80	; 128
    3c8a:	90 e0       	ldi	r25, 0x00	; 0
    3c8c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3c90:	b3 c0       	rjmp	.+358    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == '2')
    3c92:	89 81       	ldd	r24, Y+1	; 0x01
    3c94:	82 33       	cpi	r24, 0x32	; 50
    3c96:	09 f5       	brne	.+66     	; 0x3cda <main+0x1c0>
		{
			LCD_void_SetCursor(0, 4);
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	64 e0       	ldi	r22, 0x04	; 4
    3c9c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3ca0:	80 e6       	ldi	r24, 0x60	; 96
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Free");
    3cb0:	8e e6       	ldi	r24, 0x6E	; 110
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3cb8:	82 e0       	ldi	r24, 0x02	; 2
    3cba:	60 e0       	ldi	r22, 0x00	; 0
    3cbc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Full");
    3cc0:	82 e9       	ldi	r24, 0x92	; 146
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3cc8:	83 e0       	ldi	r24, 0x03	; 3
    3cca:	60 e0       	ldi	r22, 0x00	; 0
    3ccc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Free");
    3cd0:	80 e8       	ldi	r24, 0x80	; 128
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3cd8:	8f c0       	rjmp	.+286    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == '3')
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	83 33       	cpi	r24, 0x33	; 51
    3cde:	09 f5       	brne	.+66     	; 0x3d22 <main+0x208>
		{
			LCD_void_SetCursor(0, 4);
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	64 e0       	ldi	r22, 0x04	; 4
    3ce4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3ce8:	80 e6       	ldi	r24, 0x60	; 96
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Free");
    3cf8:	8e e6       	ldi	r24, 0x6E	; 110
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3d00:	82 e0       	ldi	r24, 0x02	; 2
    3d02:	60 e0       	ldi	r22, 0x00	; 0
    3d04:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Free");
    3d08:	87 e7       	ldi	r24, 0x77	; 119
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3d10:	83 e0       	ldi	r24, 0x03	; 3
    3d12:	60 e0       	ldi	r22, 0x00	; 0
    3d14:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Full");
    3d18:	8b e9       	ldi	r24, 0x9B	; 155
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3d20:	6b c0       	rjmp	.+214    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == 'A')
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	81 34       	cpi	r24, 0x41	; 65
    3d26:	09 f5       	brne	.+66     	; 0x3d6a <main+0x250>
		{
			LCD_void_SetCursor(0, 4);
    3d28:	80 e0       	ldi	r24, 0x00	; 0
    3d2a:	64 e0       	ldi	r22, 0x04	; 4
    3d2c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3d30:	80 e6       	ldi	r24, 0x60	; 96
    3d32:	90 e0       	ldi	r25, 0x00	; 0
    3d34:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Full");
    3d40:	89 e8       	ldi	r24, 0x89	; 137
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3d48:	82 e0       	ldi	r24, 0x02	; 2
    3d4a:	60 e0       	ldi	r22, 0x00	; 0
    3d4c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Full");
    3d50:	82 e9       	ldi	r24, 0x92	; 146
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3d58:	83 e0       	ldi	r24, 0x03	; 3
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Free");
    3d60:	80 e8       	ldi	r24, 0x80	; 128
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3d68:	47 c0       	rjmp	.+142    	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == 'B')
    3d6a:	89 81       	ldd	r24, Y+1	; 0x01
    3d6c:	82 34       	cpi	r24, 0x42	; 66
    3d6e:	09 f5       	brne	.+66     	; 0x3db2 <main+0x298>
		{
			LCD_void_SetCursor(0, 4);
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	64 e0       	ldi	r22, 0x04	; 4
    3d74:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3d78:	80 e6       	ldi	r24, 0x60	; 96
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3d80:	81 e0       	ldi	r24, 0x01	; 1
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Full");
    3d88:	89 e8       	ldi	r24, 0x89	; 137
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3d90:	82 e0       	ldi	r24, 0x02	; 2
    3d92:	60 e0       	ldi	r22, 0x00	; 0
    3d94:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Free");
    3d98:	87 e7       	ldi	r24, 0x77	; 119
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3da0:	83 e0       	ldi	r24, 0x03	; 3
    3da2:	60 e0       	ldi	r22, 0x00	; 0
    3da4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Full");
    3da8:	8b e9       	ldi	r24, 0x9B	; 155
    3daa:	90 e0       	ldi	r25, 0x00	; 0
    3dac:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
    3db0:	23 c0       	rjmp	.+70     	; 0x3df8 <main+0x2de>
		}
		else if(Local_u8RecieveDate == 'C')
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	83 34       	cpi	r24, 0x43	; 67
    3db6:	01 f5       	brne	.+64     	; 0x3df8 <main+0x2de>
		{
			LCD_void_SetCursor(0, 4);
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	64 e0       	ldi	r22, 0x04	; 4
    3dbc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"Smart Parking");
    3dc0:	80 e6       	ldi	r24, 0x60	; 96
    3dc2:	90 e0       	ldi	r25, 0x00	; 0
    3dc4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(1, 0);
    3dc8:	81 e0       	ldi	r24, 0x01	; 1
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P1: Free");
    3dd0:	8e e6       	ldi	r24, 0x6E	; 110
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(2, 0);
    3dd8:	82 e0       	ldi	r24, 0x02	; 2
    3dda:	60 e0       	ldi	r22, 0x00	; 0
    3ddc:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P2: Full");
    3de0:	82 e9       	ldi	r24, 0x92	; 146
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>

			LCD_void_SetCursor(3, 0);
    3de8:	83 e0       	ldi	r24, 0x03	; 3
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <LCD_void_SetCursor>
			LCD_void_4Bit_WriteString((u8*)"P3: Full");
    3df0:	8b e9       	ldi	r24, 0x9B	; 155
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 aa 10 	call	0x2154	; 0x2154 <LCD_void_4Bit_WriteString>
		}

		/* sense if there are a car outside the garage */
		PIR_voidGetIRValue(PIR_PORTA, PIR_PIN0, &Local_Au8irvalue[0]);
    3df8:	2a eb       	ldi	r18, 0xBA	; 186
    3dfa:	31 e0       	ldi	r19, 0x01	; 1
    3dfc:	80 e0       	ldi	r24, 0x00	; 0
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	a9 01       	movw	r20, r18
    3e02:	0e 94 18 17 	call	0x2e30	; 0x2e30 <PIR_voidGetIRValue>
		/* sense if there are a car inside the garage */
		PIR_voidGetIRValue(PIR_PORTA, PIR_PIN1, &Local_Au8irvalue[1]);
    3e06:	2b eb       	ldi	r18, 0xBB	; 187
    3e08:	31 e0       	ldi	r19, 0x01	; 1
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	61 e0       	ldi	r22, 0x01	; 1
    3e0e:	a9 01       	movw	r20, r18
    3e10:	0e 94 18 17 	call	0x2e30	; 0x2e30 <PIR_voidGetIRValue>

		/* open the gate */
		if ((Local_Au8irvalue[0] == 1) || (Local_Au8irvalue[1] == 1))
    3e14:	80 91 ba 01 	lds	r24, 0x01BA
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	21 f0       	breq	.+8      	; 0x3e24 <main+0x30a>
    3e1c:	80 91 bb 01 	lds	r24, 0x01BB
    3e20:	81 30       	cpi	r24, 0x01	; 1
    3e22:	69 f4       	brne	.+26     	; 0x3e3e <main+0x324>
		{
			Servo_void_Operate(OPEN_90,SERVO_CHANNEL_A);
    3e24:	84 eb       	ldi	r24, 0xB4	; 180
    3e26:	61 e0       	ldi	r22, 0x01	; 1
    3e28:	0e 94 44 17 	call	0x2e88	; 0x2e88 <Servo_void_Operate>
			TIMER0_void_AsynchronousStartTimer(1000,UpdateIRValue);
    3e2c:	2e e2       	ldi	r18, 0x2E	; 46
    3e2e:	3f e1       	ldi	r19, 0x1F	; 31
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	70 e0       	ldi	r23, 0x00	; 0
    3e34:	8a e7       	ldi	r24, 0x7A	; 122
    3e36:	94 e4       	ldi	r25, 0x44	; 68
    3e38:	a9 01       	movw	r20, r18
    3e3a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <TIMER0_void_AsynchronousStartTimer>
		}

		/* close the gate again */
		if ((Local_Au8irvalue[0] == 0) && (Local_Au8irvalue[1] == 0))
    3e3e:	80 91 ba 01 	lds	r24, 0x01BA
    3e42:	88 23       	and	r24, r24
    3e44:	09 f0       	breq	.+2      	; 0x3e48 <main+0x32e>
    3e46:	b5 ce       	rjmp	.-662    	; 0x3bb2 <main+0x98>
    3e48:	80 91 bb 01 	lds	r24, 0x01BB
    3e4c:	88 23       	and	r24, r24
    3e4e:	09 f0       	breq	.+2      	; 0x3e52 <main+0x338>
    3e50:	b0 ce       	rjmp	.-672    	; 0x3bb2 <main+0x98>
		{
			Servo_void_Operate(OPEN_0,SERVO_CHANNEL_A);
    3e52:	8a e5       	ldi	r24, 0x5A	; 90
    3e54:	61 e0       	ldi	r22, 0x01	; 1
    3e56:	0e 94 44 17 	call	0x2e88	; 0x2e88 <Servo_void_Operate>
    3e5a:	ab ce       	rjmp	.-682    	; 0x3bb2 <main+0x98>

00003e5c <UpdateIRValue>:
	return 0;
}


void UpdateIRValue(void)
{
    3e5c:	df 93       	push	r29
    3e5e:	cf 93       	push	r28
    3e60:	cd b7       	in	r28, 0x3d	; 61
    3e62:	de b7       	in	r29, 0x3e	; 62
	Local_Au8irvalue[0] = 0;
    3e64:	10 92 ba 01 	sts	0x01BA, r1
	Local_Au8irvalue[1] = 0;
    3e68:	10 92 bb 01 	sts	0x01BB, r1
}
    3e6c:	cf 91       	pop	r28
    3e6e:	df 91       	pop	r29
    3e70:	08 95       	ret

00003e72 <__mulsi3>:
    3e72:	62 9f       	mul	r22, r18
    3e74:	d0 01       	movw	r26, r0
    3e76:	73 9f       	mul	r23, r19
    3e78:	f0 01       	movw	r30, r0
    3e7a:	82 9f       	mul	r24, r18
    3e7c:	e0 0d       	add	r30, r0
    3e7e:	f1 1d       	adc	r31, r1
    3e80:	64 9f       	mul	r22, r20
    3e82:	e0 0d       	add	r30, r0
    3e84:	f1 1d       	adc	r31, r1
    3e86:	92 9f       	mul	r25, r18
    3e88:	f0 0d       	add	r31, r0
    3e8a:	83 9f       	mul	r24, r19
    3e8c:	f0 0d       	add	r31, r0
    3e8e:	74 9f       	mul	r23, r20
    3e90:	f0 0d       	add	r31, r0
    3e92:	65 9f       	mul	r22, r21
    3e94:	f0 0d       	add	r31, r0
    3e96:	99 27       	eor	r25, r25
    3e98:	72 9f       	mul	r23, r18
    3e9a:	b0 0d       	add	r27, r0
    3e9c:	e1 1d       	adc	r30, r1
    3e9e:	f9 1f       	adc	r31, r25
    3ea0:	63 9f       	mul	r22, r19
    3ea2:	b0 0d       	add	r27, r0
    3ea4:	e1 1d       	adc	r30, r1
    3ea6:	f9 1f       	adc	r31, r25
    3ea8:	bd 01       	movw	r22, r26
    3eaa:	cf 01       	movw	r24, r30
    3eac:	11 24       	eor	r1, r1
    3eae:	08 95       	ret

00003eb0 <__divmodhi4>:
    3eb0:	97 fb       	bst	r25, 7
    3eb2:	09 2e       	mov	r0, r25
    3eb4:	07 26       	eor	r0, r23
    3eb6:	0a d0       	rcall	.+20     	; 0x3ecc <__divmodhi4_neg1>
    3eb8:	77 fd       	sbrc	r23, 7
    3eba:	04 d0       	rcall	.+8      	; 0x3ec4 <__divmodhi4_neg2>
    3ebc:	49 d0       	rcall	.+146    	; 0x3f50 <__udivmodhi4>
    3ebe:	06 d0       	rcall	.+12     	; 0x3ecc <__divmodhi4_neg1>
    3ec0:	00 20       	and	r0, r0
    3ec2:	1a f4       	brpl	.+6      	; 0x3eca <__divmodhi4_exit>

00003ec4 <__divmodhi4_neg2>:
    3ec4:	70 95       	com	r23
    3ec6:	61 95       	neg	r22
    3ec8:	7f 4f       	sbci	r23, 0xFF	; 255

00003eca <__divmodhi4_exit>:
    3eca:	08 95       	ret

00003ecc <__divmodhi4_neg1>:
    3ecc:	f6 f7       	brtc	.-4      	; 0x3eca <__divmodhi4_exit>
    3ece:	90 95       	com	r25
    3ed0:	81 95       	neg	r24
    3ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ed4:	08 95       	ret

00003ed6 <__udivmodsi4>:
    3ed6:	a1 e2       	ldi	r26, 0x21	; 33
    3ed8:	1a 2e       	mov	r1, r26
    3eda:	aa 1b       	sub	r26, r26
    3edc:	bb 1b       	sub	r27, r27
    3ede:	fd 01       	movw	r30, r26
    3ee0:	0d c0       	rjmp	.+26     	; 0x3efc <__udivmodsi4_ep>

00003ee2 <__udivmodsi4_loop>:
    3ee2:	aa 1f       	adc	r26, r26
    3ee4:	bb 1f       	adc	r27, r27
    3ee6:	ee 1f       	adc	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	a2 17       	cp	r26, r18
    3eec:	b3 07       	cpc	r27, r19
    3eee:	e4 07       	cpc	r30, r20
    3ef0:	f5 07       	cpc	r31, r21
    3ef2:	20 f0       	brcs	.+8      	; 0x3efc <__udivmodsi4_ep>
    3ef4:	a2 1b       	sub	r26, r18
    3ef6:	b3 0b       	sbc	r27, r19
    3ef8:	e4 0b       	sbc	r30, r20
    3efa:	f5 0b       	sbc	r31, r21

00003efc <__udivmodsi4_ep>:
    3efc:	66 1f       	adc	r22, r22
    3efe:	77 1f       	adc	r23, r23
    3f00:	88 1f       	adc	r24, r24
    3f02:	99 1f       	adc	r25, r25
    3f04:	1a 94       	dec	r1
    3f06:	69 f7       	brne	.-38     	; 0x3ee2 <__udivmodsi4_loop>
    3f08:	60 95       	com	r22
    3f0a:	70 95       	com	r23
    3f0c:	80 95       	com	r24
    3f0e:	90 95       	com	r25
    3f10:	9b 01       	movw	r18, r22
    3f12:	ac 01       	movw	r20, r24
    3f14:	bd 01       	movw	r22, r26
    3f16:	cf 01       	movw	r24, r30
    3f18:	08 95       	ret

00003f1a <__divmodsi4>:
    3f1a:	97 fb       	bst	r25, 7
    3f1c:	09 2e       	mov	r0, r25
    3f1e:	05 26       	eor	r0, r21
    3f20:	0e d0       	rcall	.+28     	; 0x3f3e <__divmodsi4_neg1>
    3f22:	57 fd       	sbrc	r21, 7
    3f24:	04 d0       	rcall	.+8      	; 0x3f2e <__divmodsi4_neg2>
    3f26:	d7 df       	rcall	.-82     	; 0x3ed6 <__udivmodsi4>
    3f28:	0a d0       	rcall	.+20     	; 0x3f3e <__divmodsi4_neg1>
    3f2a:	00 1c       	adc	r0, r0
    3f2c:	38 f4       	brcc	.+14     	; 0x3f3c <__divmodsi4_exit>

00003f2e <__divmodsi4_neg2>:
    3f2e:	50 95       	com	r21
    3f30:	40 95       	com	r20
    3f32:	30 95       	com	r19
    3f34:	21 95       	neg	r18
    3f36:	3f 4f       	sbci	r19, 0xFF	; 255
    3f38:	4f 4f       	sbci	r20, 0xFF	; 255
    3f3a:	5f 4f       	sbci	r21, 0xFF	; 255

00003f3c <__divmodsi4_exit>:
    3f3c:	08 95       	ret

00003f3e <__divmodsi4_neg1>:
    3f3e:	f6 f7       	brtc	.-4      	; 0x3f3c <__divmodsi4_exit>
    3f40:	90 95       	com	r25
    3f42:	80 95       	com	r24
    3f44:	70 95       	com	r23
    3f46:	61 95       	neg	r22
    3f48:	7f 4f       	sbci	r23, 0xFF	; 255
    3f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f4e:	08 95       	ret

00003f50 <__udivmodhi4>:
    3f50:	aa 1b       	sub	r26, r26
    3f52:	bb 1b       	sub	r27, r27
    3f54:	51 e1       	ldi	r21, 0x11	; 17
    3f56:	07 c0       	rjmp	.+14     	; 0x3f66 <__udivmodhi4_ep>

00003f58 <__udivmodhi4_loop>:
    3f58:	aa 1f       	adc	r26, r26
    3f5a:	bb 1f       	adc	r27, r27
    3f5c:	a6 17       	cp	r26, r22
    3f5e:	b7 07       	cpc	r27, r23
    3f60:	10 f0       	brcs	.+4      	; 0x3f66 <__udivmodhi4_ep>
    3f62:	a6 1b       	sub	r26, r22
    3f64:	b7 0b       	sbc	r27, r23

00003f66 <__udivmodhi4_ep>:
    3f66:	88 1f       	adc	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	5a 95       	dec	r21
    3f6c:	a9 f7       	brne	.-22     	; 0x3f58 <__udivmodhi4_loop>
    3f6e:	80 95       	com	r24
    3f70:	90 95       	com	r25
    3f72:	bc 01       	movw	r22, r24
    3f74:	cd 01       	movw	r24, r26
    3f76:	08 95       	ret

00003f78 <__prologue_saves__>:
    3f78:	2f 92       	push	r2
    3f7a:	3f 92       	push	r3
    3f7c:	4f 92       	push	r4
    3f7e:	5f 92       	push	r5
    3f80:	6f 92       	push	r6
    3f82:	7f 92       	push	r7
    3f84:	8f 92       	push	r8
    3f86:	9f 92       	push	r9
    3f88:	af 92       	push	r10
    3f8a:	bf 92       	push	r11
    3f8c:	cf 92       	push	r12
    3f8e:	df 92       	push	r13
    3f90:	ef 92       	push	r14
    3f92:	ff 92       	push	r15
    3f94:	0f 93       	push	r16
    3f96:	1f 93       	push	r17
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	ca 1b       	sub	r28, r26
    3fa2:	db 0b       	sbc	r29, r27
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	09 94       	ijmp

00003fb0 <__epilogue_restores__>:
    3fb0:	2a 88       	ldd	r2, Y+18	; 0x12
    3fb2:	39 88       	ldd	r3, Y+17	; 0x11
    3fb4:	48 88       	ldd	r4, Y+16	; 0x10
    3fb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3fb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3fba:	7d 84       	ldd	r7, Y+13	; 0x0d
    3fbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3fbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    3fc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3fc2:	b9 84       	ldd	r11, Y+9	; 0x09
    3fc4:	c8 84       	ldd	r12, Y+8	; 0x08
    3fc6:	df 80       	ldd	r13, Y+7	; 0x07
    3fc8:	ee 80       	ldd	r14, Y+6	; 0x06
    3fca:	fd 80       	ldd	r15, Y+5	; 0x05
    3fcc:	0c 81       	ldd	r16, Y+4	; 0x04
    3fce:	1b 81       	ldd	r17, Y+3	; 0x03
    3fd0:	aa 81       	ldd	r26, Y+2	; 0x02
    3fd2:	b9 81       	ldd	r27, Y+1	; 0x01
    3fd4:	ce 0f       	add	r28, r30
    3fd6:	d1 1d       	adc	r29, r1
    3fd8:	0f b6       	in	r0, 0x3f	; 63
    3fda:	f8 94       	cli
    3fdc:	de bf       	out	0x3e, r29	; 62
    3fde:	0f be       	out	0x3f, r0	; 63
    3fe0:	cd bf       	out	0x3d, r28	; 61
    3fe2:	ed 01       	movw	r28, r26
    3fe4:	08 95       	ret

00003fe6 <_exit>:
    3fe6:	f8 94       	cli

00003fe8 <__stop_program>:
    3fe8:	ff cf       	rjmp	.-2      	; 0x3fe8 <__stop_program>
